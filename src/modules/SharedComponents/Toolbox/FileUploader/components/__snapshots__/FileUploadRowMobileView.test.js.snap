// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Component FileUploadRowMobileView should not render access selector or date picker if access condition is not required to select 1`] = `
<WithStyles(ForwardRef(List))
  classes={
    Object {
      "root": "root",
    }
  }
>
  <WithStyles(ForwardRef(ListItem))
    classes={
      Object {
        "root": "listItem",
      }
    }
  >
    <WithStyles(ForwardRef(ListItemIcon))>
      <Memo(ForwardRef(AttachmentIcon)) />
    </WithStyles(ForwardRef(ListItemIcon))>
    <WithStyles(ForwardRef(ListItemText))
      data-testid="dsi-dsid-0"
      primary="test.pdf (100 MB)"
      primaryTypographyProps={
        Object {
          "noWrap": true,
          "variant": "body1",
        }
      }
      secondary="File name"
      secondaryTypographyProps={
        Object {
          "variant": "caption",
        }
      }
    />
  </WithStyles(ForwardRef(ListItem))>
</WithStyles(ForwardRef(List))>
`;

exports[`Component FileUploadRowMobileView should not render embargo date picker if access condition is set to closed access 1`] = `
<WithStyles(ForwardRef(List))
  classes={
    Object {
      "root": "root",
    }
  }
>
  <WithStyles(ForwardRef(ListItem))
    classes={
      Object {
        "root": "listItem",
      }
    }
  >
    <WithStyles(ForwardRef(ListItemIcon))>
      <Memo(ForwardRef(AttachmentIcon)) />
    </WithStyles(ForwardRef(ListItemIcon))>
    <WithStyles(ForwardRef(ListItemText))
      data-testid="dsi-dsid-0"
      primary="test.pdf (100 MB)"
      primaryTypographyProps={
        Object {
          "noWrap": true,
          "variant": "body1",
        }
      }
      secondary="File name"
      secondaryTypographyProps={
        Object {
          "variant": "caption",
        }
      }
    />
  </WithStyles(ForwardRef(ListItem))>
  <WithStyles(ForwardRef(ListItem))
    classes={
      Object {
        "root": "listItem",
      }
    }
  >
    <WithStyles(ForwardRef(ListItemIcon))>
      <Memo(ForwardRef(LockOutlinedIcon)) />
    </WithStyles(ForwardRef(ListItemIcon))>
    <WithStyles(ForwardRef(ListItemText))
      secondary="File access"
      secondaryTypographyProps={
        Object {
          "variant": "caption",
        }
      }
    >
      <Memo(NewGenericSelectField)
        autoFocus={false}
        disabled={false}
        displayEmpty={true}
        error={false}
        formHelperTextProps={
          Object {
            "className": undefined,
          }
        }
        genericSelectFieldId="dsi-open-access-0"
        hideLabel={true}
        itemsList={
          Array [
            Object {
              "text": "Open Access",
              "value": 5,
            },
            Object {
              "text": "Closed Access",
              "value": 1,
            },
          ]
        }
        onChange={[MockFunction]}
        required={true}
        selectPrompt="Select access conditions"
        selectProps={
          Object {
            "className": undefined,
            "input": <WithStyles(ForwardRef(Input))
              autoFocus={false}
              classes={
                Object {
                  "root": undefined,
                }
              }
              disableUnderline={true}
            />,
          }
        }
        value={1}
      />
    </WithStyles(ForwardRef(ListItemText))>
  </WithStyles(ForwardRef(ListItem))>
  <WithStyles(ForwardRef(ListItem))
    classes={
      Object {
        "root": "listItem",
      }
    }
  >
    <WithStyles(ForwardRef(ListItemIcon))>
      <Memo(ForwardRef(CalendarTodayOutlinedIcon)) />
    </WithStyles(ForwardRef(ListItemIcon))>
    <WithStyles(ForwardRef(ListItemText))
      primaryTypographyProps={
        Object {
          "variant": "body1",
        }
      }
      secondary="Embargo date"
      secondaryTypographyProps={
        Object {
          "variant": "caption",
        }
      }
    >
      <WithStyles(ForwardRef(Typography))
        data-testid="dsi-embargo-date-0"
        gutterBottom={true}
        variant="body2"
      >
        No date required
      </WithStyles(ForwardRef(Typography))>
    </WithStyles(ForwardRef(ListItemText))>
    <WithStyles(ForwardRef(ListItemSecondaryAction))
      classes={
        Object {
          "root": undefined,
        }
      }
    >
      <Connect(FileUploadRowStatus)
        disabled={false}
        fileUploadRowStatusId="dsi-dsid-0"
        name="test.pdf"
        onDelete={[MockFunction]}
      />
    </WithStyles(ForwardRef(ListItemSecondaryAction))>
  </WithStyles(ForwardRef(ListItem))>
</WithStyles(ForwardRef(List))>
`;

exports[`Component FileUploadRowMobileView should render default view 1`] = `
<WithStyles(ForwardRef(List))
  classes={
    Object {
      "root": "root",
    }
  }
>
  <WithStyles(ForwardRef(ListItem))
    classes={
      Object {
        "root": "listItem",
      }
    }
  >
    <WithStyles(ForwardRef(ListItemIcon))>
      <Memo(ForwardRef(AttachmentIcon)) />
    </WithStyles(ForwardRef(ListItemIcon))>
    <WithStyles(ForwardRef(ListItemText))
      data-testid="dsi-dsid-0"
      primary="test.pdf (100 MB)"
      primaryTypographyProps={
        Object {
          "noWrap": true,
          "variant": "body1",
        }
      }
      secondary="File name"
      secondaryTypographyProps={
        Object {
          "variant": "caption",
        }
      }
    />
  </WithStyles(ForwardRef(ListItem))>
  <WithStyles(ForwardRef(ListItem))
    classes={
      Object {
        "root": "listItem",
      }
    }
  >
    <WithStyles(ForwardRef(ListItemIcon))>
      <Memo(ForwardRef(LockOutlinedIcon)) />
    </WithStyles(ForwardRef(ListItemIcon))>
    <WithStyles(ForwardRef(ListItemText))
      secondary="File access"
      secondaryTypographyProps={
        Object {
          "variant": "caption",
        }
      }
    >
      <Memo(NewGenericSelectField)
        autoFocus={false}
        disabled={false}
        displayEmpty={true}
        error="This field is required"
        formHelperTextProps={
          Object {
            "className": undefined,
          }
        }
        genericSelectFieldId="dsi-open-access-0"
        hideLabel={true}
        itemsList={
          Array [
            Object {
              "text": "Open Access",
              "value": 5,
            },
            Object {
              "text": "Closed Access",
              "value": 1,
            },
          ]
        }
        onChange={[MockFunction]}
        required={true}
        selectPrompt="Select access conditions"
        selectProps={
          Object {
            "className": undefined,
            "input": <WithStyles(ForwardRef(Input))
              autoFocus={false}
              classes={
                Object {
                  "root": undefined,
                }
              }
              disableUnderline={true}
            />,
          }
        }
        value=""
      />
    </WithStyles(ForwardRef(ListItemText))>
  </WithStyles(ForwardRef(ListItem))>
  <WithStyles(ForwardRef(ListItem))
    classes={
      Object {
        "root": "listItem",
      }
    }
  >
    <WithStyles(ForwardRef(ListItemIcon))>
      <Memo(ForwardRef(CalendarTodayOutlinedIcon)) />
    </WithStyles(ForwardRef(ListItemIcon))>
    <WithStyles(ForwardRef(ListItemText))
      primaryTypographyProps={
        Object {
          "variant": "body1",
        }
      }
      secondary="Embargo date"
      secondaryTypographyProps={
        Object {
          "variant": "caption",
        }
      }
    >
      <WithStyles(ForwardRef(Typography))
        data-testid="dsi-embargo-date-0"
        gutterBottom={true}
        variant="body2"
      >
        No date required
      </WithStyles(ForwardRef(Typography))>
    </WithStyles(ForwardRef(ListItemText))>
    <WithStyles(ForwardRef(ListItemSecondaryAction))
      classes={
        Object {
          "root": undefined,
        }
      }
    >
      <Connect(FileUploadRowStatus)
        disabled={false}
        fileUploadRowStatusId="dsi-dsid-0"
        name="test.pdf"
        onDelete={[MockFunction]}
      />
    </WithStyles(ForwardRef(ListItemSecondaryAction))>
  </WithStyles(ForwardRef(ListItem))>
</WithStyles(ForwardRef(List))>
`;

exports[`Component FileUploadRowMobileView should render default view for admin 1`] = `
<WithStyles(ForwardRef(List))
  classes={
    Object {
      "root": "root",
    }
  }
>
  <WithStyles(ForwardRef(ListItem))
    classes={
      Object {
        "root": "listItem",
      }
    }
  >
    <WithStyles(ForwardRef(ListItemIcon))>
      <Memo(ForwardRef(AttachmentIcon)) />
    </WithStyles(ForwardRef(ListItemIcon))>
    <WithStyles(ForwardRef(ListItemText))
      data-testid="dsi-dsid-0"
      primary="test.pdf (100 MB)"
      primaryTypographyProps={
        Object {
          "noWrap": true,
          "variant": "body1",
        }
      }
      secondary="File name"
      secondaryTypographyProps={
        Object {
          "variant": "caption",
        }
      }
    />
  </WithStyles(ForwardRef(ListItem))>
  <WithStyles(ForwardRef(ListItem))
    classes={
      Object {
        "root": "listItem",
      }
    }
  >
    <WithStyles(ForwardRef(ListItemIcon))>
      <Memo(ForwardRef(LockOutlinedIcon)) />
    </WithStyles(ForwardRef(ListItemIcon))>
    <WithStyles(ForwardRef(ListItemText))
      secondary="File access"
      secondaryTypographyProps={
        Object {
          "variant": "caption",
        }
      }
    >
      <Memo(NewGenericSelectField)
        autoFocus={false}
        disabled={false}
        displayEmpty={true}
        error="This field is required"
        formHelperTextProps={
          Object {
            "className": undefined,
          }
        }
        genericSelectFieldId="dsi-open-access-0"
        hideLabel={true}
        itemsList={
          Array [
            Object {
              "text": "Open Access",
              "value": 5,
            },
            Object {
              "text": "Closed Access",
              "value": 1,
            },
            Object {
              "text": "Inherit from parent collection",
              "value": 99,
            },
          ]
        }
        onChange={[MockFunction]}
        required={true}
        selectPrompt="Select access conditions"
        selectProps={
          Object {
            "className": undefined,
            "input": <WithStyles(ForwardRef(Input))
              autoFocus={false}
              classes={
                Object {
                  "root": undefined,
                }
              }
              disableUnderline={true}
            />,
          }
        }
        value=""
      />
    </WithStyles(ForwardRef(ListItemText))>
  </WithStyles(ForwardRef(ListItem))>
  <WithStyles(ForwardRef(ListItem))
    classes={
      Object {
        "root": "listItem",
      }
    }
  >
    <WithStyles(ForwardRef(ListItemIcon))>
      <Memo(ForwardRef(CalendarTodayOutlinedIcon)) />
    </WithStyles(ForwardRef(ListItemIcon))>
    <WithStyles(ForwardRef(ListItemText))
      primaryTypographyProps={
        Object {
          "variant": "body1",
        }
      }
      secondary="Embargo date"
      secondaryTypographyProps={
        Object {
          "variant": "caption",
        }
      }
    >
      <WithStyles(ForwardRef(Typography))
        data-testid="dsi-embargo-date-0"
        gutterBottom={true}
        variant="body2"
      >
        No date required
      </WithStyles(ForwardRef(Typography))>
    </WithStyles(ForwardRef(ListItemText))>
    <WithStyles(ForwardRef(ListItemSecondaryAction))
      classes={
        Object {
          "root": undefined,
        }
      }
    >
      <Connect(FileUploadRowStatus)
        disabled={false}
        fileUploadRowStatusId="dsi-dsid-0"
        name="test.pdf"
        onDelete={[MockFunction]}
      />
    </WithStyles(ForwardRef(ListItemSecondaryAction))>
  </WithStyles(ForwardRef(ListItem))>
</WithStyles(ForwardRef(List))>
`;

exports[`Component FileUploadRowMobileView should render default view with styles 1`] = `
<FileUploadRowMobileView
  accessConditionId={null}
  classes={
    Object {
      "listItem": "FileUploadRowMobileView-listItem-2 listItem",
      "root": "FileUploadRowMobileView-root-1 root",
      "secondaryAction": "FileUploadRowMobileView-secondaryAction-3",
    }
  }
  disabled={false}
  embargoDate="01/01/2017"
  index={0}
  locale={
    Object {
      "embargoDateClosedAccess": "No date required",
      "embargoDateColumn": "Embargo date",
      "fileAccessColumn": "File access",
      "filenameColumn": "File name",
    }
  }
  name="test.pdf"
  onAccessConditionChange={[MockFunction]}
  onDelete={[MockFunction]}
  onEmbargoDateChange={[MockFunction]}
  requireOpenAccessStatus={true}
  size="100 MB"
/>
`;

exports[`Component FileUploadRowMobileView should render embargo date picker if access condition is set to open access 1`] = `
<WithStyles(ForwardRef(List))
  classes={
    Object {
      "root": "root",
    }
  }
>
  <WithStyles(ForwardRef(ListItem))
    classes={
      Object {
        "root": "listItem",
      }
    }
  >
    <WithStyles(ForwardRef(ListItemIcon))>
      <Memo(ForwardRef(AttachmentIcon)) />
    </WithStyles(ForwardRef(ListItemIcon))>
    <WithStyles(ForwardRef(ListItemText))
      data-testid="dsi-dsid-0"
      primary="test.pdf (100 MB)"
      primaryTypographyProps={
        Object {
          "noWrap": true,
          "variant": "body1",
        }
      }
      secondary="File name"
      secondaryTypographyProps={
        Object {
          "variant": "caption",
        }
      }
    />
  </WithStyles(ForwardRef(ListItem))>
  <WithStyles(ForwardRef(ListItem))
    classes={
      Object {
        "root": "listItem",
      }
    }
  >
    <WithStyles(ForwardRef(ListItemIcon))>
      <Memo(ForwardRef(LockOutlinedIcon)) />
    </WithStyles(ForwardRef(ListItemIcon))>
    <WithStyles(ForwardRef(ListItemText))
      secondary="File access"
      secondaryTypographyProps={
        Object {
          "variant": "caption",
        }
      }
    >
      <Memo(NewGenericSelectField)
        autoFocus={false}
        disabled={false}
        displayEmpty={true}
        error={false}
        formHelperTextProps={
          Object {
            "className": undefined,
          }
        }
        genericSelectFieldId="dsi-open-access-0"
        hideLabel={true}
        itemsList={
          Array [
            Object {
              "text": "Open Access",
              "value": 5,
            },
            Object {
              "text": "Closed Access",
              "value": 1,
            },
          ]
        }
        onChange={[MockFunction]}
        required={true}
        selectPrompt="Select access conditions"
        selectProps={
          Object {
            "className": undefined,
            "input": <WithStyles(ForwardRef(Input))
              autoFocus={false}
              classes={
                Object {
                  "root": undefined,
                }
              }
              disableUnderline={true}
            />,
          }
        }
        value={5}
      />
    </WithStyles(ForwardRef(ListItemText))>
  </WithStyles(ForwardRef(ListItem))>
  <WithStyles(ForwardRef(ListItem))
    classes={
      Object {
        "root": "listItem",
      }
    }
  >
    <WithStyles(ForwardRef(ListItemIcon))>
      <Memo(ForwardRef(CalendarTodayOutlinedIcon)) />
    </WithStyles(ForwardRef(ListItemIcon))>
    <WithStyles(ForwardRef(ListItemText))
      primaryTypographyProps={
        Object {
          "variant": "body1",
        }
      }
      secondary="Embargo date"
      secondaryTypographyProps={
        Object {
          "variant": "caption",
        }
      }
    >
      <WithStyles(FileUploadEmbargoDate)
        disabled={false}
        fileUploadEmbargoDateId="dsi-embargo-date-0"
        minDate={2017-06-29T14:00:00.000Z}
        onChange={[MockFunction]}
        value="01/01/2017"
      />
    </WithStyles(ForwardRef(ListItemText))>
    <WithStyles(ForwardRef(ListItemSecondaryAction))
      classes={
        Object {
          "root": undefined,
        }
      }
    >
      <Connect(FileUploadRowStatus)
        disabled={false}
        fileUploadRowStatusId="dsi-dsid-0"
        name="test.pdf"
        onDelete={[MockFunction]}
      />
    </WithStyles(ForwardRef(ListItemSecondaryAction))>
  </WithStyles(ForwardRef(ListItem))>
</WithStyles(ForwardRef(List))>
`;
