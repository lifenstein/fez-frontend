// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ContributorsEditor can edit a selected contributor 1`] = `
Object {
  "contributorIndexSelectedToEdit": null,
  "contributors": Array [
    Object {
      "authorId": null,
      "disabled": true,
      "required": false,
      "selected": false,
      "uqIdentifier": 410,
    },
  ],
  "errorMessage": "",
  "isCurrentAuthorSelected": false,
}
`;

exports[`ContributorsEditor can edit a selected contributor and reset other contributor selected state 1`] = `
Object {
  "contributorIndexSelectedToEdit": null,
  "contributors": Array [
    Object {
      "authorId": undefined,
      "nameAsPublished": "test 1",
      "selected": false,
    },
    Object {
      "aut_id": 410,
      "authorId": 410,
      "disabled": false,
      "required": false,
      "selected": false,
      "uqIdentifier": "410",
    },
    Object {
      "authorId": null,
      "nameAsPublished": "test 3",
      "selected": false,
    },
  ],
  "errorMessage": "",
  "isCurrentAuthorSelected": true,
}
`;

exports[`ContributorsEditor can edit a selected contributor and should not reset other contributor selected state if selected contributor is not current author 1`] = `
Object {
  "contributorIndexSelectedToEdit": null,
  "contributors": Array [
    Object {
      "authorId": undefined,
      "nameAsPublished": "test 1",
      "selected": undefined,
    },
    Object {
      "authorId": null,
      "disabled": true,
      "required": false,
      "selected": false,
      "uqIdentifier": 2,
    },
    Object {
      "authorId": undefined,
      "nameAsPublished": "test 3",
      "selected": true,
    },
  ],
  "errorMessage": "",
  "isCurrentAuthorSelected": false,
}
`;

exports[`ContributorsEditor can not add contributor with same id 1`] = `
Object {
  "contributorIndexSelectedToEdit": null,
  "contributors": Array [
    Object {
      "aut_id": 410,
      "nameAsPublished": "test",
    },
  ],
  "errorMessage": "Unable to add an item with the same identifier.",
  "isCurrentAuthorSelected": false,
}
`;

exports[`ContributorsEditor can not edit and add contributor with same id 1`] = `
Object {
  "contributorIndexSelectedToEdit": 1,
  "contributors": Array [
    Object {
      "aut_id": 410,
      "nameAsPublished": "test",
    },
    Object {
      "nameAsPublished": "Test 2",
    },
  ],
  "errorMessage": "Unable to add an item with the same identifier.",
  "isCurrentAuthorSelected": false,
}
`;

exports[`ContributorsEditor can not edit and add contributor with same id 2`] = `
Object {
  "contributorIndexSelectedToEdit": null,
  "contributors": Array [
    Object {
      "aut_id": 410,
      "authorId": undefined,
      "nameAsPublished": "test",
      "selected": undefined,
    },
    Object {
      "authorId": null,
      "disabled": false,
      "nameAsPublished": "EditedContributorAuthorIdNOTInTheList",
      "required": false,
      "selected": false,
    },
  ],
  "errorMessage": "",
  "isCurrentAuthorSelected": false,
}
`;

exports[`ContributorsEditor chooses a architectural contributor to edit 1`] = `
<div
  className="contributorEditor"
  id="test-list-editor"
>
  <WithStyles(ForwardRef(Grid))
    container={true}
    spacing={1}
  />
  <WithStyles(ForwardRef(Grid))
    container={true}
    spacing={1}
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
      xs={12}
    >
      <WithStyles(ForwardRef(List))
        style={
          Object {
            "marginBottom": 0,
          }
        }
      >
        <WithStyles(ContributorRowHeader)
          hideDelete={false}
          isInfinite={false}
          isNtro={false}
          onDeleteAll={[Function]}
          showContributorAssignment={false}
          showIdentifierLookup={true}
          showRoleInput={false}
        />
      </WithStyles(ForwardRef(List))>
      <WithStyles(ForwardRef(List))
        classes={
          Object {
            "root": "ContributorList list ",
          }
        }
        data-testid="test-list"
        id="test-list"
      >
        <Memo(ContributorRow)
          canEdit={true}
          canMoveDown={true}
          canMoveUp={false}
          className="ContributorRow"
          contributor={
            Object {
              "nameAsPublished": "test1",
              "selected": false,
            }
          }
          contributorRowId="test-list-row"
          enableSelect={false}
          hideDelete={false}
          hideReorder={false}
          index={0}
          key="ContributorRow_0"
          onDelete={[Function]}
          onEdit={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={null}
          showIdentifierLookup={true}
          showRoleInput={false}
        />
        <Memo(ContributorRow)
          canEdit={true}
          canMoveDown={true}
          canMoveUp={true}
          className="ContributorRow"
          contributor={
            Object {
              "nameAsPublished": "test2",
              "selected": false,
            }
          }
          contributorRowId="test-list-row"
          enableSelect={false}
          hideDelete={false}
          hideReorder={false}
          index={1}
          key="ContributorRow_1"
          onDelete={[Function]}
          onEdit={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={null}
          showIdentifierLookup={true}
          showRoleInput={false}
        />
        <Memo(ContributorRow)
          canEdit={true}
          canMoveDown={false}
          canMoveUp={true}
          className="ContributorRow"
          contributor={
            Object {
              "nameAsPublished": "test3",
              "selected": false,
            }
          }
          contributorRowId="test-list-row"
          enableSelect={false}
          hideDelete={false}
          hideReorder={false}
          index={2}
          key="ContributorRow_2"
          onDelete={[Function]}
          onEdit={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={null}
          showIdentifierLookup={true}
          showRoleInput={false}
        />
      </WithStyles(ForwardRef(List))>
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
</div>
`;

exports[`ContributorsEditor chooses a architectural contributor to edit 2`] = `
<div
  className="contributorEditor"
  id="test-list-editor"
>
  <WithStyles(ForwardRef(Grid))
    container={true}
    spacing={1}
  />
  <WithStyles(ForwardRef(Grid))
    container={true}
    spacing={1}
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
      xs={12}
    >
      <WithStyles(ForwardRef(List))
        style={
          Object {
            "marginBottom": 0,
          }
        }
      >
        <WithStyles(ContributorRowHeader)
          hideDelete={false}
          isInfinite={false}
          isNtro={false}
          onDeleteAll={[Function]}
          showContributorAssignment={false}
          showIdentifierLookup={true}
          showRoleInput={false}
        />
      </WithStyles(ForwardRef(List))>
      <WithStyles(ForwardRef(List))
        classes={
          Object {
            "root": "ContributorList list ",
          }
        }
        data-testid="test-list"
        id="test-list"
      >
        <Memo(ContributorRow)
          canEdit={true}
          canMoveDown={true}
          canMoveUp={false}
          className="ContributorRow"
          contributor={
            Object {
              "nameAsPublished": "test1",
              "selected": false,
            }
          }
          contributorRowId="test-list-row"
          enableSelect={false}
          hideDelete={false}
          hideReorder={false}
          index={0}
          key="ContributorRow_0"
          onDelete={[Function]}
          onEdit={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={null}
          showIdentifierLookup={true}
          showRoleInput={false}
        />
        <Memo(ContributorRow)
          canEdit={true}
          canMoveDown={true}
          canMoveUp={true}
          className="ContributorRow"
          contributor={
            Object {
              "nameAsPublished": "test2",
              "selected": true,
            }
          }
          contributorRowId="test-list-row"
          enableSelect={false}
          hideDelete={false}
          hideReorder={false}
          index={1}
          key="ContributorRow_1"
          onDelete={[Function]}
          onEdit={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={null}
          showIdentifierLookup={true}
          showRoleInput={false}
        />
        <Memo(ContributorRow)
          canEdit={true}
          canMoveDown={false}
          canMoveUp={true}
          className="ContributorRow"
          contributor={
            Object {
              "nameAsPublished": "test3",
              "selected": false,
            }
          }
          contributorRowId="test-list-row"
          enableSelect={false}
          hideDelete={false}
          hideReorder={false}
          index={2}
          key="ContributorRow_2"
          onDelete={[Function]}
          onEdit={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={null}
          showIdentifierLookup={true}
          showRoleInput={false}
        />
      </WithStyles(ForwardRef(List))>
      <div
        style={
          Object {
            "marginTop": 24,
          }
        }
      >
        <ContributorForm
          author={
            Object {
              "aut_id": 1,
            }
          }
          canEdit={true}
          classes={
            Object {
              "list": "list",
              "scroll": "scroll",
            }
          }
          contributor={
            Object {
              "nameAsPublished": "test2",
              "selected": true,
            }
          }
          contributorEditorId="test"
          contributorFormId="test"
          disableNameAsPublished={true}
          displayCancel={true}
          editMode={true}
          enableUqIdentifierOnAffiliationChange={false}
          hideDelete={false}
          hideReorder={false}
          isContributorAssigned={true}
          isNtro={false}
          key="contributor-form-edit-1"
          locale={
            Object {
              "addButton": "Add author",
              "creatorRoleHint": "Role of the creator in relation to the dataset",
              "creatorRoleLabel": "Creator role",
              "descriptionStep1": <div>
                <span
                  className="authorSteps"
                >
                  Step 1 of 2
                </span>
                - Please 
                <b>
                  add to a list of contributors below
                </b>
                , in the format and order that they are published.
              </div>,
              "descriptionStep1NoStep2": <div>
                Please 
                <b>
                  add to a list of contributors below
                </b>
                , in the format and order that they are published.
              </div>,
              "identifierLabel": "UQ identifier (if available)",
              "nameAsPublishedHint": "Please type the name exactly as published",
              "nameAsPublishedLabel": "Name as published",
            }
          }
          onSubmit={[Function]}
          required={false}
          showContributorAssignment={false}
          showIdentifierLookup={true}
          showRoleInput={false}
        />
      </div>
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
</div>
`;

exports[`ContributorsEditor chooses a contributor to edit 1`] = `
<div
  className="contributorEditor"
  id="test-list-editor"
>
  <WithStyles(ForwardRef(Grid))
    container={true}
    spacing={1}
  />
  <WithStyles(ForwardRef(Grid))
    container={true}
    spacing={1}
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
      xs={12}
    >
      <WithStyles(ForwardRef(List))
        style={
          Object {
            "marginBottom": 0,
          }
        }
      >
        <WithStyles(ContributorRowHeader)
          hideDelete={false}
          isInfinite={false}
          isNtro={false}
          onDeleteAll={[Function]}
          showContributorAssignment={false}
          showIdentifierLookup={false}
          showRoleInput={false}
        />
      </WithStyles(ForwardRef(List))>
      <WithStyles(ForwardRef(List))
        classes={
          Object {
            "root": "ContributorList list ",
          }
        }
        data-testid="test-list"
        id="test-list"
      >
        <Memo(ContributorRow)
          canEdit={true}
          canMoveDown={true}
          canMoveUp={false}
          className="ContributorRow"
          contributor={
            Object {
              "nameAsPublished": "test1",
              "selected": false,
            }
          }
          contributorRowId="test-list-row"
          enableSelect={false}
          hideDelete={false}
          hideReorder={false}
          index={0}
          key="ContributorRow_0"
          onDelete={[Function]}
          onEdit={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={null}
          showIdentifierLookup={false}
          showRoleInput={false}
        />
        <Memo(ContributorRow)
          canEdit={true}
          canMoveDown={true}
          canMoveUp={true}
          className="ContributorRow"
          contributor={
            Object {
              "nameAsPublished": "test2",
              "selected": false,
            }
          }
          contributorRowId="test-list-row"
          enableSelect={false}
          hideDelete={false}
          hideReorder={false}
          index={1}
          key="ContributorRow_1"
          onDelete={[Function]}
          onEdit={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={null}
          showIdentifierLookup={false}
          showRoleInput={false}
        />
        <Memo(ContributorRow)
          canEdit={true}
          canMoveDown={false}
          canMoveUp={true}
          className="ContributorRow"
          contributor={
            Object {
              "nameAsPublished": "test3",
              "selected": false,
            }
          }
          contributorRowId="test-list-row"
          enableSelect={false}
          hideDelete={false}
          hideReorder={false}
          index={2}
          key="ContributorRow_2"
          onDelete={[Function]}
          onEdit={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={null}
          showIdentifierLookup={false}
          showRoleInput={false}
        />
      </WithStyles(ForwardRef(List))>
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
</div>
`;

exports[`ContributorsEditor chooses a contributor to edit 2`] = `
<div
  className="contributorEditor"
  id="test-list-editor"
>
  <WithStyles(ForwardRef(Grid))
    container={true}
    spacing={1}
  />
  <WithStyles(ForwardRef(Grid))
    container={true}
    spacing={1}
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
      xs={12}
    >
      <WithStyles(ForwardRef(List))
        style={
          Object {
            "marginBottom": 0,
          }
        }
      >
        <WithStyles(ContributorRowHeader)
          hideDelete={false}
          isInfinite={false}
          isNtro={false}
          onDeleteAll={[Function]}
          showContributorAssignment={false}
          showIdentifierLookup={false}
          showRoleInput={false}
        />
      </WithStyles(ForwardRef(List))>
      <WithStyles(ForwardRef(List))
        classes={
          Object {
            "root": "ContributorList list ",
          }
        }
        data-testid="test-list"
        id="test-list"
      >
        <Memo(ContributorRow)
          canEdit={true}
          canMoveDown={true}
          canMoveUp={false}
          className="ContributorRow"
          contributor={
            Object {
              "nameAsPublished": "test1",
              "selected": false,
            }
          }
          contributorRowId="test-list-row"
          enableSelect={false}
          hideDelete={false}
          hideReorder={false}
          index={0}
          key="ContributorRow_0"
          onDelete={[Function]}
          onEdit={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={null}
          showIdentifierLookup={false}
          showRoleInput={false}
        />
        <Memo(ContributorRow)
          canEdit={true}
          canMoveDown={true}
          canMoveUp={true}
          className="ContributorRow"
          contributor={
            Object {
              "nameAsPublished": "test2",
              "selected": true,
            }
          }
          contributorRowId="test-list-row"
          enableSelect={false}
          hideDelete={false}
          hideReorder={false}
          index={1}
          key="ContributorRow_1"
          onDelete={[Function]}
          onEdit={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={null}
          showIdentifierLookup={false}
          showRoleInput={false}
        />
        <Memo(ContributorRow)
          canEdit={true}
          canMoveDown={false}
          canMoveUp={true}
          className="ContributorRow"
          contributor={
            Object {
              "nameAsPublished": "test3",
              "selected": false,
            }
          }
          contributorRowId="test-list-row"
          enableSelect={false}
          hideDelete={false}
          hideReorder={false}
          index={2}
          key="ContributorRow_2"
          onDelete={[Function]}
          onEdit={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={null}
          showIdentifierLookup={false}
          showRoleInput={false}
        />
      </WithStyles(ForwardRef(List))>
      <div
        style={
          Object {
            "marginTop": 24,
          }
        }
      >
        <ContributorForm
          author={
            Object {
              "aut_id": 1,
            }
          }
          canEdit={true}
          classes={
            Object {
              "list": "list",
              "scroll": "scroll",
            }
          }
          contributor={
            Object {
              "nameAsPublished": "test2",
              "selected": true,
            }
          }
          contributorEditorId="test"
          contributorFormId="test"
          disableNameAsPublished={true}
          displayCancel={true}
          editMode={true}
          enableUqIdentifierOnAffiliationChange={false}
          hideDelete={false}
          hideReorder={false}
          isContributorAssigned={true}
          isNtro={false}
          key="contributor-form-edit-1"
          locale={
            Object {
              "addButton": "Add author",
              "creatorRoleHint": "Role of the creator in relation to the dataset",
              "creatorRoleLabel": "Creator role",
              "descriptionStep1": <div>
                <span
                  className="authorSteps"
                >
                  Step 1 of 2
                </span>
                - Please 
                <b>
                  add to a list of contributors below
                </b>
                , in the format and order that they are published.
              </div>,
              "descriptionStep1NoStep2": <div>
                Please 
                <b>
                  add to a list of contributors below
                </b>
                , in the format and order that they are published.
              </div>,
              "identifierLabel": "UQ identifier (if available)",
              "nameAsPublishedHint": "Please type the name exactly as published",
              "nameAsPublishedLabel": "Name as published",
            }
          }
          onSubmit={[Function]}
          required={false}
          showContributorAssignment={false}
          showIdentifierLookup={false}
          showRoleInput={false}
        />
      </div>
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
</div>
`;

exports[`ContributorsEditor render authors list component for admin interface 1`] = `
<Memo(AuthorsList)
  contributorEditorId="test"
  isNtro={false}
  list={Array []}
  locale={
    Object {
      "form": Object {
        "locale": Object {
          "addButton": "Add rek-author",
          "creatorRoleHint": "Select role from list or type the role of the creator in relation to the dataset",
          "creatorRoleLabel": "Enter creator's role",
          "identifierLabel": "UQ identifier (if available)",
          "nameAsPublishedHint": "Type the name exactly as published (eg. Smith, John)",
          "nameAsPublishedLabel": "Rek-author's name as published",
        },
      },
      "header": Object {
        "locale": Object {
          "contributorAssignmentColumn": "Select your name",
          "identifierColumn": "UQ identifiers",
          "nameColumn": "Rek-author's name as published",
          "organisationColumn": "Organisation/Organisation type",
          "roleColumn": "Creator role",
        },
      },
      "row": Object {
        "locale": Object {
          "deleteHint": "Remove this item",
          "editHint": "Edit this item",
          "moveDownHint": "Move item down the order",
          "moveUpHint": "Move item up the order",
          "suffix": " listed rek-author",
        },
      },
    }
  }
  onChange={[Function]}
  showRoleInput={false}
/>
`;

exports[`ContributorsEditor renders 3 contributor rows with no infinite scroll 1`] = `
<div
  className="contributorEditor"
  id="test-list-editor"
>
  <WithStyles(ForwardRef(Grid))
    container={true}
    spacing={1}
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
      xs={12}
    >
      <ContributorForm
        author={
          Object {
            "aut_id": 1,
          }
        }
        canEdit={false}
        classes={
          Object {
            "list": "list",
            "scroll": "scroll",
          }
        }
        contributor={
          Object {
            "affiliation": "",
            "creatorRole": "",
            "nameAsPublished": "",
            "orgaff": "",
            "orgtype": "",
            "uqIdentifier": "",
            "uqUsername": "",
          }
        }
        contributorEditorId="test"
        contributorFormId="test"
        contributors={Array []}
        disableNameAsPublished={false}
        displayCancel={false}
        editMode={false}
        enableUqIdentifierOnAffiliationChange={true}
        hideDelete={false}
        hideReorder={false}
        isContributorAssigned={true}
        isNtro={false}
        key="contributor-form-add"
        locale={
          Object {
            "addButton": "Add author",
            "creatorRoleHint": "Role of the creator in relation to the dataset",
            "creatorRoleLabel": "Creator role",
            "descriptionStep1": <div>
              <span
                className="authorSteps"
              >
                Step 1 of 2
              </span>
              - Please 
              <b>
                add to a list of contributors below
              </b>
              , in the format and order that they are published.
            </div>,
            "descriptionStep1NoStep2": <div>
              Please 
              <b>
                add to a list of contributors below
              </b>
              , in the format and order that they are published.
            </div>,
            "identifierLabel": "UQ identifier (if available)",
            "nameAsPublishedHint": "Please type the name exactly as published",
            "nameAsPublishedLabel": "Name as published",
          }
        }
        onSubmit={[Function]}
        required={false}
        showContributorAssignment={false}
        showIdentifierLookup={false}
        showRoleInput={false}
      />
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
  <WithStyles(ForwardRef(Grid))
    container={true}
    spacing={1}
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
      xs={12}
    >
      <WithStyles(ForwardRef(List))
        style={
          Object {
            "marginBottom": 0,
          }
        }
      >
        <WithStyles(ContributorRowHeader)
          hideDelete={false}
          isInfinite={false}
          isNtro={false}
          onDeleteAll={[Function]}
          showContributorAssignment={false}
          showIdentifierLookup={false}
          showRoleInput={false}
        />
      </WithStyles(ForwardRef(List))>
      <WithStyles(ForwardRef(List))
        classes={
          Object {
            "root": "ContributorList list ",
          }
        }
        data-testid="test-list"
        id="test-list"
      >
        <Memo(ContributorRow)
          canEdit={false}
          canMoveDown={true}
          canMoveUp={false}
          className="ContributorRow"
          contributor={
            Object {
              "nameAsPublished": 1,
            }
          }
          contributorRowId="test-list-row"
          enableSelect={false}
          hideDelete={false}
          hideReorder={false}
          index={0}
          key="ContributorRow_0"
          onDelete={[Function]}
          onEdit={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={[Function]}
          showIdentifierLookup={false}
          showRoleInput={false}
        />
        <Memo(ContributorRow)
          canEdit={false}
          canMoveDown={true}
          canMoveUp={true}
          className="ContributorRow"
          contributor={
            Object {
              "nameAsPublished": 2,
            }
          }
          contributorRowId="test-list-row"
          enableSelect={false}
          hideDelete={false}
          hideReorder={false}
          index={1}
          key="ContributorRow_1"
          onDelete={[Function]}
          onEdit={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={[Function]}
          showIdentifierLookup={false}
          showRoleInput={false}
        />
        <Memo(ContributorRow)
          canEdit={false}
          canMoveDown={false}
          canMoveUp={true}
          className="ContributorRow"
          contributor={
            Object {
              "nameAsPublished": 3,
            }
          }
          contributorRowId="test-list-row"
          enableSelect={false}
          hideDelete={false}
          hideReorder={false}
          index={2}
          key="ContributorRow_2"
          onDelete={[Function]}
          onEdit={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={[Function]}
          showIdentifierLookup={false}
          showRoleInput={false}
        />
      </WithStyles(ForwardRef(List))>
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
</div>
`;

exports[`ContributorsEditor renders 4 contributor rows wrapped in an infinite scroll 1`] = `
<div
  className="contributorEditor"
  id="test-list-editor"
>
  <WithStyles(ForwardRef(Grid))
    container={true}
    spacing={1}
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
      xs={12}
    >
      <ContributorForm
        author={
          Object {
            "aut_id": 1,
          }
        }
        canEdit={false}
        classes={
          Object {
            "list": "list",
            "scroll": "scroll",
          }
        }
        contributor={
          Object {
            "affiliation": "",
            "creatorRole": "",
            "nameAsPublished": "",
            "orgaff": "",
            "orgtype": "",
            "uqIdentifier": "",
            "uqUsername": "",
          }
        }
        contributorEditorId="test"
        contributorFormId="test"
        contributors={Array []}
        disableNameAsPublished={false}
        displayCancel={false}
        editMode={false}
        enableUqIdentifierOnAffiliationChange={true}
        hideDelete={false}
        hideReorder={false}
        isContributorAssigned={true}
        isNtro={false}
        key="contributor-form-add"
        locale={
          Object {
            "addButton": "Add author",
            "creatorRoleHint": "Role of the creator in relation to the dataset",
            "creatorRoleLabel": "Creator role",
            "descriptionStep1": <div>
              <span
                className="authorSteps"
              >
                Step 1 of 2
              </span>
              - Please 
              <b>
                add to a list of contributors below
              </b>
              , in the format and order that they are published.
            </div>,
            "descriptionStep1NoStep2": <div>
              Please 
              <b>
                add to a list of contributors below
              </b>
              , in the format and order that they are published.
            </div>,
            "identifierLabel": "UQ identifier (if available)",
            "nameAsPublishedHint": "Please type the name exactly as published",
            "nameAsPublishedLabel": "Name as published",
          }
        }
        onSubmit={[Function]}
        required={false}
        showContributorAssignment={false}
        showIdentifierLookup={false}
        showRoleInput={false}
      />
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
  <WithStyles(ForwardRef(Grid))
    container={true}
    spacing={1}
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
      xs={12}
    >
      <WithStyles(ForwardRef(List))
        style={
          Object {
            "marginBottom": 0,
          }
        }
      >
        <WithStyles(ContributorRowHeader)
          hideDelete={false}
          isInfinite={false}
          isNtro={false}
          onDeleteAll={[Function]}
          showContributorAssignment={false}
          showIdentifierLookup={false}
          showRoleInput={false}
        />
      </WithStyles(ForwardRef(List))>
      <WithStyles(ForwardRef(List))
        classes={
          Object {
            "root": "ContributorList list scroll",
          }
        }
        data-testid="test-list"
        id="test-list"
      >
        <Memo(ContributorRow)
          canEdit={false}
          canMoveDown={true}
          canMoveUp={false}
          className="ContributorRow"
          contributor={
            Object {
              "displayName": 1,
            }
          }
          contributorRowId="test-list-row"
          enableSelect={false}
          hideDelete={false}
          hideReorder={false}
          index={0}
          key="ContributorRow_0"
          onDelete={[Function]}
          onEdit={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={[Function]}
          showIdentifierLookup={false}
          showRoleInput={false}
        />
        <Memo(ContributorRow)
          canEdit={false}
          canMoveDown={true}
          canMoveUp={true}
          className="ContributorRow"
          contributor={
            Object {
              "displayName": 2,
            }
          }
          contributorRowId="test-list-row"
          enableSelect={false}
          hideDelete={false}
          hideReorder={false}
          index={1}
          key="ContributorRow_1"
          onDelete={[Function]}
          onEdit={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={[Function]}
          showIdentifierLookup={false}
          showRoleInput={false}
        />
        <Memo(ContributorRow)
          canEdit={false}
          canMoveDown={true}
          canMoveUp={true}
          className="ContributorRow"
          contributor={
            Object {
              "displayName": 3,
            }
          }
          contributorRowId="test-list-row"
          enableSelect={false}
          hideDelete={false}
          hideReorder={false}
          index={2}
          key="ContributorRow_2"
          onDelete={[Function]}
          onEdit={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={[Function]}
          showIdentifierLookup={false}
          showRoleInput={false}
        />
        <Memo(ContributorRow)
          canEdit={false}
          canMoveDown={false}
          canMoveUp={true}
          className="ContributorRow"
          contributor={
            Object {
              "displayName": 4,
            }
          }
          contributorRowId="test-list-row"
          enableSelect={false}
          hideDelete={false}
          hideReorder={false}
          index={3}
          key="ContributorRow_3"
          onDelete={[Function]}
          onEdit={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={[Function]}
          showIdentifierLookup={false}
          showRoleInput={false}
        />
      </WithStyles(ForwardRef(List))>
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
</div>
`;

exports[`ContributorsEditor renders component in edit mode 1`] = `
<div
  className="contributorEditor"
  id="test-list-editor"
>
  <WithStyles(ForwardRef(Grid))
    container={true}
    spacing={1}
  >
    
  </WithStyles(ForwardRef(Grid))>
  <WithStyles(ForwardRef(Grid))
    container={true}
    spacing={1}
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
      xs={12}
    >
      <WithStyles(ForwardRef(List))
        style={
          Object {
            "marginBottom": 0,
          }
        }
      >
        <WithStyles(ContributorRowHeader)
          hideDelete={false}
          isInfinite={false}
          isNtro={false}
          onDeleteAll={[Function]}
          showContributorAssignment={false}
          showIdentifierLookup={false}
          showRoleInput={false}
        />
      </WithStyles(ForwardRef(List))>
      <WithStyles(ForwardRef(List))
        classes={
          Object {
            "root": "ContributorList list ",
          }
        }
        data-testid="test-list"
        id="test-list"
      >
        <Memo(ContributorRow)
          canEdit={true}
          canMoveDown={false}
          canMoveUp={false}
          className="ContributorRow"
          contributor={
            Object {
              "selected": true,
            }
          }
          contributorRowId="test-list-row"
          enableSelect={false}
          hideDelete={false}
          hideReorder={false}
          index={0}
          onDelete={[Function]}
          onEdit={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={null}
          showIdentifierLookup={false}
          showRoleInput={false}
        />
      </WithStyles(ForwardRef(List))>
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
</div>
`;

exports[`ContributorsEditor renders full component for admin user 1`] = `
<Provider
  store={
    Object {
      "dispatch": [MockFunction],
      "getState": [MockFunction] {
        "calls": Array [
          Array [],
          Array [],
          Array [],
          Array [],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
        ],
      },
      "subscribe": [MockFunction] {
        "calls": Array [
          Array [
            [Function],
          ],
          Array [
            [Function],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "key": "testKey",
          "pathname": "/",
        },
      ]
    }
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "testKey",
              "pathname": "/",
              "search": "",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "testKey",
            "pathname": "/",
            "search": "",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <ThemeProvider
        theme={
          Object {
            "breakpoints": Object {
              "between": [Function],
              "down": [Function],
              "keys": Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ],
              "only": [Function],
              "up": [Function],
              "values": Object {
                "lg": 1280,
                "md": 960,
                "sm": 600,
                "xl": 1920,
                "xs": 0,
              },
              "width": [Function],
            },
            "direction": "ltr",
            "graphs": Object {
              "color1": "#d72865",
              "color2": "#1e7d94",
              "color3": "#49075E",
              "color4": "#468fcc",
              "color5": "#f28620",
              "color6": "#333333",
              "color7": "#595959",
            },
            "hexToRGBA": [Function],
            "mixins": Object {
              "gutters": [Function],
              "toolbar": Object {
                "@media (min-width:0px) and (orientation: landscape)": Object {
                  "minHeight": 48,
                },
                "@media (min-width:600px)": Object {
                  "minHeight": 64,
                },
                "minHeight": 56,
              },
            },
            "overrides": Object {
              "MUIDataTable": Object {
                "paper": Object {
                  "boxShadow": "none",
                  "margin": 0,
                  "padding": 0,
                },
              },
              "MuiFormLabel": Object {
                "root": Object {
                  "overflow": "hidden",
                  "textOverflow": "ellipsis",
                  "whiteSpace": "nowrap",
                  "width": "100%",
                },
              },
              "MuiIconButton": Object {
                "colorInherit": Object {
                  "color": "none",
                },
              },
              "MuiMenuItem": Object {
                "root": Object {
                  "&$selected": Object {
                    "backgroundColor": "#4085C6 !important",
                    "color": "#FFFFFF",
                  },
                },
              },
            },
            "palette": Object {
              "accent": Object {
                "dark": "#2a557d",
                "light": "#54acff",
                "main": "#316799",
              },
              "action": Object {
                "activatedOpacity": 0.12,
                "active": "rgba(0, 0, 0, 0.54)",
                "disabled": "rgba(0, 0, 0, 0.26)",
                "disabledBackground": "rgba(0, 0, 0, 0.12)",
                "disabledOpacity": 0.38,
                "focus": "rgba(0, 0, 0, 0.12)",
                "focusOpacity": 0.12,
                "hover": "rgba(0, 0, 0, 0.04)",
                "hoverOpacity": 0.04,
                "selected": "rgba(0, 0, 0, 0.08)",
                "selectedOpacity": 0.08,
              },
              "augmentColor": [Function],
              "background": Object {
                "default": "#fafafa",
                "paper": "#fff",
              },
              "common": Object {
                "black": "#000",
                "white": "#fff",
              },
              "contrastThreshold": 3,
              "divider": "rgba(0, 0, 0, 0.12)",
              "error": Object {
                "contrastText": "#fff",
                "dark": "#790000",
                "light": "#ff0000",
                "main": "#c80000",
              },
              "getContrastText": [Function],
              "grey": Object {
                "100": "#f5f5f5",
                "200": "#eeeeee",
                "300": "#e0e0e0",
                "400": "#bdbdbd",
                "50": "#fafafa",
                "500": "#9e9e9e",
                "600": "#757575",
                "700": "#616161",
                "800": "#424242",
                "900": "#212121",
                "A100": "#d5d5d5",
                "A200": "#aaaaaa",
                "A400": "#303030",
                "A700": "#616161",
              },
              "info": Object {
                "contrastText": "#fff",
                "dark": "#1976d2",
                "light": "#64b5f6",
                "main": "#2196f3",
              },
              "primary": Object {
                "contrastText": "#fff",
                "dark": "#3b1a59",
                "gradient": Object {
                  "diagonal": Object {
                    "background": "linear-gradient(135deg, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                    "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                  },
                  "horizontal": Object {
                    "background": "linear-gradient(to right, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                    "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                  },
                },
                "light": "#962A8B",
                "main": "#51247A",
              },
              "secondary": Object {
                "contrastText": "#fff",
                "dark": "#333333",
                "light": "#f2f2f2",
                "main": "#595959",
              },
              "success": Object {
                "contrastText": "#fff",
                "dark": "#005000",
                "light": "#00a700",
                "main": "#007200",
              },
              "text": Object {
                "disabled": "rgba(0, 0, 0, 0.38)",
                "hint": "rgba(0, 0, 0, 0.38)",
                "primary": "rgba(0, 0, 0, 0.87)",
                "secondary": "rgba(0, 0, 0, 0.54)",
              },
              "tonalOffset": 0.2,
              "type": "light",
              "warning": Object {
                "contrastText": "#fff",
                "dark": "#542400",
                "light": "#ff9a57",
                "main": "#bf5000",
              },
              "white": Object {
                "main": "#FFFFFF",
              },
            },
            "props": Object {},
            "shadows": Array [
              "none",
              "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
              "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
              "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
              "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
              "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
              "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
              "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
              "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
              "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
              "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
              "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
              "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
              "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
              "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
              "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
              "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
              "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
              "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
            ],
            "shape": Object {
              "borderRadius": 4,
            },
            "spacing": [Function],
            "status": Object {
              "danger": "#f44336",
              "warning": "#ff9800",
            },
            "transitions": Object {
              "create": [Function],
              "duration": Object {
                "complex": 375,
                "enteringScreen": 225,
                "leavingScreen": 195,
                "short": 250,
                "shorter": 200,
                "shortest": 150,
                "standard": 300,
              },
              "easing": Object {
                "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
              },
              "getAutoHeightDuration": [Function],
            },
            "typography": Object {
              "body1": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1rem",
                "fontWeight": 300,
                "letterSpacing": "0.00938em",
                "lineHeight": 1.5,
              },
              "body2": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 300,
                "letterSpacing": "0.01071em",
                "lineHeight": 1.43,
              },
              "button": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 400,
                "letterSpacing": "0.02857em",
                "lineHeight": 1.75,
                "textTransform": "uppercase",
              },
              "caption": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 300,
                "letterSpacing": "0.03333em",
                "lineHeight": 1.66,
              },
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": 14,
              "fontWeightBold": 700,
              "fontWeightLight": 200,
              "fontWeightMedium": 400,
              "fontWeightRegular": 300,
              "h1": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "6rem",
                "fontWeight": 200,
                "letterSpacing": "-0.01562em",
                "lineHeight": 1.167,
              },
              "h2": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "3.75rem",
                "fontWeight": 200,
                "letterSpacing": "-0.00833em",
                "lineHeight": 1.2,
              },
              "h3": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "3rem",
                "fontWeight": 300,
                "letterSpacing": "0em",
                "lineHeight": 1.167,
              },
              "h4": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "2.125rem",
                "fontWeight": 300,
                "letterSpacing": "0.00735em",
                "lineHeight": 1.235,
              },
              "h5": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1.5rem",
                "fontWeight": 300,
                "letterSpacing": "0em",
                "lineHeight": 1.334,
              },
              "h6": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1.25rem",
                "fontWeight": 400,
                "letterSpacing": "0.0075em",
                "lineHeight": 1.6,
              },
              "htmlFontSize": 16,
              "overline": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 300,
                "letterSpacing": "0.08333em",
                "lineHeight": 2.66,
                "textTransform": "uppercase",
              },
              "pxToRem": [Function],
              "round": [Function],
              "subtitle1": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1rem",
                "fontWeight": 300,
                "letterSpacing": "0.00938em",
                "lineHeight": 1.75,
              },
              "subtitle2": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 400,
                "letterSpacing": "0.00714em",
                "lineHeight": 1.57,
              },
              "suppressDeprecationWarnings": true,
              "useNextVariants": true,
            },
            "zIndex": Object {
              "appBar": 1100,
              "drawer": 1200,
              "mobileStepper": 1000,
              "modal": 1300,
              "snackbar": 1400,
              "speedDial": 1050,
              "tooltip": 1500,
            },
            Symbol(mui.nested): false,
          }
        }
      >
        <MuiPickersUtilsProvider
          utils={[Function]}
        >
          <ContributorsEditor
            author={
              Object {
                "aut_id": 1,
              }
            }
            canEdit={true}
            classes={
              Object {
                "list": "list",
                "scroll": "scroll",
              }
            }
            contributorEditorId="test"
            editMode={false}
            hideDelete={false}
            hideReorder={false}
            isNtro={false}
            locale={
              Object {
                "errorMessage": "Unable to add an item with the same identifier.",
                "errorTitle": "Error",
              }
            }
            showContributorAssignment={false}
            showIdentifierLookup={false}
            showRoleInput={false}
          >
            <div
              className="contributorEditor"
              id="test-list-editor"
            >
              <WithStyles(ForwardRef(Grid))
                container={true}
                spacing={1}
              >
                <ForwardRef(Grid)
                  classes={
                    Object {
                      "align-content-xs-center": "MuiGrid-align-content-xs-center",
                      "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                      "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                      "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                      "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                      "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                      "align-items-xs-center": "MuiGrid-align-items-xs-center",
                      "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                      "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                      "container": "MuiGrid-container",
                      "direction-xs-column": "MuiGrid-direction-xs-column",
                      "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                      "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                      "grid-lg-1": "MuiGrid-grid-lg-1",
                      "grid-lg-10": "MuiGrid-grid-lg-10",
                      "grid-lg-11": "MuiGrid-grid-lg-11",
                      "grid-lg-12": "MuiGrid-grid-lg-12",
                      "grid-lg-2": "MuiGrid-grid-lg-2",
                      "grid-lg-3": "MuiGrid-grid-lg-3",
                      "grid-lg-4": "MuiGrid-grid-lg-4",
                      "grid-lg-5": "MuiGrid-grid-lg-5",
                      "grid-lg-6": "MuiGrid-grid-lg-6",
                      "grid-lg-7": "MuiGrid-grid-lg-7",
                      "grid-lg-8": "MuiGrid-grid-lg-8",
                      "grid-lg-9": "MuiGrid-grid-lg-9",
                      "grid-lg-auto": "MuiGrid-grid-lg-auto",
                      "grid-lg-true": "MuiGrid-grid-lg-true",
                      "grid-md-1": "MuiGrid-grid-md-1",
                      "grid-md-10": "MuiGrid-grid-md-10",
                      "grid-md-11": "MuiGrid-grid-md-11",
                      "grid-md-12": "MuiGrid-grid-md-12",
                      "grid-md-2": "MuiGrid-grid-md-2",
                      "grid-md-3": "MuiGrid-grid-md-3",
                      "grid-md-4": "MuiGrid-grid-md-4",
                      "grid-md-5": "MuiGrid-grid-md-5",
                      "grid-md-6": "MuiGrid-grid-md-6",
                      "grid-md-7": "MuiGrid-grid-md-7",
                      "grid-md-8": "MuiGrid-grid-md-8",
                      "grid-md-9": "MuiGrid-grid-md-9",
                      "grid-md-auto": "MuiGrid-grid-md-auto",
                      "grid-md-true": "MuiGrid-grid-md-true",
                      "grid-sm-1": "MuiGrid-grid-sm-1",
                      "grid-sm-10": "MuiGrid-grid-sm-10",
                      "grid-sm-11": "MuiGrid-grid-sm-11",
                      "grid-sm-12": "MuiGrid-grid-sm-12",
                      "grid-sm-2": "MuiGrid-grid-sm-2",
                      "grid-sm-3": "MuiGrid-grid-sm-3",
                      "grid-sm-4": "MuiGrid-grid-sm-4",
                      "grid-sm-5": "MuiGrid-grid-sm-5",
                      "grid-sm-6": "MuiGrid-grid-sm-6",
                      "grid-sm-7": "MuiGrid-grid-sm-7",
                      "grid-sm-8": "MuiGrid-grid-sm-8",
                      "grid-sm-9": "MuiGrid-grid-sm-9",
                      "grid-sm-auto": "MuiGrid-grid-sm-auto",
                      "grid-sm-true": "MuiGrid-grid-sm-true",
                      "grid-xl-1": "MuiGrid-grid-xl-1",
                      "grid-xl-10": "MuiGrid-grid-xl-10",
                      "grid-xl-11": "MuiGrid-grid-xl-11",
                      "grid-xl-12": "MuiGrid-grid-xl-12",
                      "grid-xl-2": "MuiGrid-grid-xl-2",
                      "grid-xl-3": "MuiGrid-grid-xl-3",
                      "grid-xl-4": "MuiGrid-grid-xl-4",
                      "grid-xl-5": "MuiGrid-grid-xl-5",
                      "grid-xl-6": "MuiGrid-grid-xl-6",
                      "grid-xl-7": "MuiGrid-grid-xl-7",
                      "grid-xl-8": "MuiGrid-grid-xl-8",
                      "grid-xl-9": "MuiGrid-grid-xl-9",
                      "grid-xl-auto": "MuiGrid-grid-xl-auto",
                      "grid-xl-true": "MuiGrid-grid-xl-true",
                      "grid-xs-1": "MuiGrid-grid-xs-1",
                      "grid-xs-10": "MuiGrid-grid-xs-10",
                      "grid-xs-11": "MuiGrid-grid-xs-11",
                      "grid-xs-12": "MuiGrid-grid-xs-12",
                      "grid-xs-2": "MuiGrid-grid-xs-2",
                      "grid-xs-3": "MuiGrid-grid-xs-3",
                      "grid-xs-4": "MuiGrid-grid-xs-4",
                      "grid-xs-5": "MuiGrid-grid-xs-5",
                      "grid-xs-6": "MuiGrid-grid-xs-6",
                      "grid-xs-7": "MuiGrid-grid-xs-7",
                      "grid-xs-8": "MuiGrid-grid-xs-8",
                      "grid-xs-9": "MuiGrid-grid-xs-9",
                      "grid-xs-auto": "MuiGrid-grid-xs-auto",
                      "grid-xs-true": "MuiGrid-grid-xs-true",
                      "item": "MuiGrid-item",
                      "justify-xs-center": "MuiGrid-justify-xs-center",
                      "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                      "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                      "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                      "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                      "root": "MuiGrid-root",
                      "spacing-xs-1": "MuiGrid-spacing-xs-1",
                      "spacing-xs-10": "MuiGrid-spacing-xs-10",
                      "spacing-xs-2": "MuiGrid-spacing-xs-2",
                      "spacing-xs-3": "MuiGrid-spacing-xs-3",
                      "spacing-xs-4": "MuiGrid-spacing-xs-4",
                      "spacing-xs-5": "MuiGrid-spacing-xs-5",
                      "spacing-xs-6": "MuiGrid-spacing-xs-6",
                      "spacing-xs-7": "MuiGrid-spacing-xs-7",
                      "spacing-xs-8": "MuiGrid-spacing-xs-8",
                      "spacing-xs-9": "MuiGrid-spacing-xs-9",
                      "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                      "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                      "zeroMinWidth": "MuiGrid-zeroMinWidth",
                    }
                  }
                  container={true}
                  spacing={1}
                >
                  <div
                    className="MuiGrid-root MuiGrid-container MuiGrid-spacing-xs-1"
                  >
                    <WithStyles(ForwardRef(Grid))
                      item={true}
                      xs={12}
                    >
                      <ForwardRef(Grid)
                        classes={
                          Object {
                            "align-content-xs-center": "MuiGrid-align-content-xs-center",
                            "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                            "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                            "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                            "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                            "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                            "align-items-xs-center": "MuiGrid-align-items-xs-center",
                            "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                            "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                            "container": "MuiGrid-container",
                            "direction-xs-column": "MuiGrid-direction-xs-column",
                            "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                            "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                            "grid-lg-1": "MuiGrid-grid-lg-1",
                            "grid-lg-10": "MuiGrid-grid-lg-10",
                            "grid-lg-11": "MuiGrid-grid-lg-11",
                            "grid-lg-12": "MuiGrid-grid-lg-12",
                            "grid-lg-2": "MuiGrid-grid-lg-2",
                            "grid-lg-3": "MuiGrid-grid-lg-3",
                            "grid-lg-4": "MuiGrid-grid-lg-4",
                            "grid-lg-5": "MuiGrid-grid-lg-5",
                            "grid-lg-6": "MuiGrid-grid-lg-6",
                            "grid-lg-7": "MuiGrid-grid-lg-7",
                            "grid-lg-8": "MuiGrid-grid-lg-8",
                            "grid-lg-9": "MuiGrid-grid-lg-9",
                            "grid-lg-auto": "MuiGrid-grid-lg-auto",
                            "grid-lg-true": "MuiGrid-grid-lg-true",
                            "grid-md-1": "MuiGrid-grid-md-1",
                            "grid-md-10": "MuiGrid-grid-md-10",
                            "grid-md-11": "MuiGrid-grid-md-11",
                            "grid-md-12": "MuiGrid-grid-md-12",
                            "grid-md-2": "MuiGrid-grid-md-2",
                            "grid-md-3": "MuiGrid-grid-md-3",
                            "grid-md-4": "MuiGrid-grid-md-4",
                            "grid-md-5": "MuiGrid-grid-md-5",
                            "grid-md-6": "MuiGrid-grid-md-6",
                            "grid-md-7": "MuiGrid-grid-md-7",
                            "grid-md-8": "MuiGrid-grid-md-8",
                            "grid-md-9": "MuiGrid-grid-md-9",
                            "grid-md-auto": "MuiGrid-grid-md-auto",
                            "grid-md-true": "MuiGrid-grid-md-true",
                            "grid-sm-1": "MuiGrid-grid-sm-1",
                            "grid-sm-10": "MuiGrid-grid-sm-10",
                            "grid-sm-11": "MuiGrid-grid-sm-11",
                            "grid-sm-12": "MuiGrid-grid-sm-12",
                            "grid-sm-2": "MuiGrid-grid-sm-2",
                            "grid-sm-3": "MuiGrid-grid-sm-3",
                            "grid-sm-4": "MuiGrid-grid-sm-4",
                            "grid-sm-5": "MuiGrid-grid-sm-5",
                            "grid-sm-6": "MuiGrid-grid-sm-6",
                            "grid-sm-7": "MuiGrid-grid-sm-7",
                            "grid-sm-8": "MuiGrid-grid-sm-8",
                            "grid-sm-9": "MuiGrid-grid-sm-9",
                            "grid-sm-auto": "MuiGrid-grid-sm-auto",
                            "grid-sm-true": "MuiGrid-grid-sm-true",
                            "grid-xl-1": "MuiGrid-grid-xl-1",
                            "grid-xl-10": "MuiGrid-grid-xl-10",
                            "grid-xl-11": "MuiGrid-grid-xl-11",
                            "grid-xl-12": "MuiGrid-grid-xl-12",
                            "grid-xl-2": "MuiGrid-grid-xl-2",
                            "grid-xl-3": "MuiGrid-grid-xl-3",
                            "grid-xl-4": "MuiGrid-grid-xl-4",
                            "grid-xl-5": "MuiGrid-grid-xl-5",
                            "grid-xl-6": "MuiGrid-grid-xl-6",
                            "grid-xl-7": "MuiGrid-grid-xl-7",
                            "grid-xl-8": "MuiGrid-grid-xl-8",
                            "grid-xl-9": "MuiGrid-grid-xl-9",
                            "grid-xl-auto": "MuiGrid-grid-xl-auto",
                            "grid-xl-true": "MuiGrid-grid-xl-true",
                            "grid-xs-1": "MuiGrid-grid-xs-1",
                            "grid-xs-10": "MuiGrid-grid-xs-10",
                            "grid-xs-11": "MuiGrid-grid-xs-11",
                            "grid-xs-12": "MuiGrid-grid-xs-12",
                            "grid-xs-2": "MuiGrid-grid-xs-2",
                            "grid-xs-3": "MuiGrid-grid-xs-3",
                            "grid-xs-4": "MuiGrid-grid-xs-4",
                            "grid-xs-5": "MuiGrid-grid-xs-5",
                            "grid-xs-6": "MuiGrid-grid-xs-6",
                            "grid-xs-7": "MuiGrid-grid-xs-7",
                            "grid-xs-8": "MuiGrid-grid-xs-8",
                            "grid-xs-9": "MuiGrid-grid-xs-9",
                            "grid-xs-auto": "MuiGrid-grid-xs-auto",
                            "grid-xs-true": "MuiGrid-grid-xs-true",
                            "item": "MuiGrid-item",
                            "justify-xs-center": "MuiGrid-justify-xs-center",
                            "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                            "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                            "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                            "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                            "root": "MuiGrid-root",
                            "spacing-xs-1": "MuiGrid-spacing-xs-1",
                            "spacing-xs-10": "MuiGrid-spacing-xs-10",
                            "spacing-xs-2": "MuiGrid-spacing-xs-2",
                            "spacing-xs-3": "MuiGrid-spacing-xs-3",
                            "spacing-xs-4": "MuiGrid-spacing-xs-4",
                            "spacing-xs-5": "MuiGrid-spacing-xs-5",
                            "spacing-xs-6": "MuiGrid-spacing-xs-6",
                            "spacing-xs-7": "MuiGrid-spacing-xs-7",
                            "spacing-xs-8": "MuiGrid-spacing-xs-8",
                            "spacing-xs-9": "MuiGrid-spacing-xs-9",
                            "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                            "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                            "zeroMinWidth": "MuiGrid-zeroMinWidth",
                          }
                        }
                        item={true}
                        xs={12}
                      >
                        <div
                          className="MuiGrid-root MuiGrid-item MuiGrid-grid-xs-12"
                        >
                          <ContributorForm
                            author={
                              Object {
                                "aut_id": 1,
                              }
                            }
                            canEdit={true}
                            classes={
                              Object {
                                "list": "list",
                                "scroll": "scroll",
                              }
                            }
                            contributor={
                              Object {
                                "affiliation": "",
                                "creatorRole": "",
                                "nameAsPublished": "",
                                "orgaff": "",
                                "orgtype": "",
                                "uqIdentifier": "",
                                "uqUsername": "",
                              }
                            }
                            contributorEditorId="test"
                            contributorFormId="test"
                            disableNameAsPublished={false}
                            displayCancel={true}
                            editMode={false}
                            enableUqIdentifierOnAffiliationChange={true}
                            hideDelete={false}
                            hideReorder={false}
                            isContributorAssigned={false}
                            isNtro={false}
                            key="contributor-form-add"
                            locale={
                              Object {
                                "addButton": "Add author",
                                "creatorRoleHint": "Role of the creator in relation to the dataset",
                                "creatorRoleLabel": "Creator role",
                                "descriptionStep1": <div>
                                  <span
                                    className="authorSteps"
                                  >
                                    Step 1 of 2
                                  </span>
                                  - Please 
                                  <b>
                                    add to a list of contributors below
                                  </b>
                                  , in the format and order that they are published.
                                </div>,
                                "descriptionStep1NoStep2": <div>
                                  Please 
                                  <b>
                                    add to a list of contributors below
                                  </b>
                                  , in the format and order that they are published.
                                </div>,
                                "identifierLabel": "UQ identifier (if available)",
                                "nameAsPublishedHint": "Please type the name exactly as published",
                                "nameAsPublishedLabel": "Name as published",
                              }
                            }
                            onSubmit={[Function]}
                            required={false}
                            showContributorAssignment={false}
                            showIdentifierLookup={false}
                            showRoleInput={false}
                          >
                            <div>
                              Please 
                              <b>
                                add to a list of contributors below
                              </b>
                              , in the format and order that they are published.
                            </div>
                            <WithStyles(ForwardRef(Grid))
                              container={true}
                              id="contributorForm"
                              spacing={1}
                              style={
                                Object {
                                  "marginTop": 8,
                                }
                              }
                            >
                              <ForwardRef(Grid)
                                classes={
                                  Object {
                                    "align-content-xs-center": "MuiGrid-align-content-xs-center",
                                    "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                                    "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                                    "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                                    "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                                    "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                                    "align-items-xs-center": "MuiGrid-align-items-xs-center",
                                    "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                                    "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                                    "container": "MuiGrid-container",
                                    "direction-xs-column": "MuiGrid-direction-xs-column",
                                    "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                                    "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                                    "grid-lg-1": "MuiGrid-grid-lg-1",
                                    "grid-lg-10": "MuiGrid-grid-lg-10",
                                    "grid-lg-11": "MuiGrid-grid-lg-11",
                                    "grid-lg-12": "MuiGrid-grid-lg-12",
                                    "grid-lg-2": "MuiGrid-grid-lg-2",
                                    "grid-lg-3": "MuiGrid-grid-lg-3",
                                    "grid-lg-4": "MuiGrid-grid-lg-4",
                                    "grid-lg-5": "MuiGrid-grid-lg-5",
                                    "grid-lg-6": "MuiGrid-grid-lg-6",
                                    "grid-lg-7": "MuiGrid-grid-lg-7",
                                    "grid-lg-8": "MuiGrid-grid-lg-8",
                                    "grid-lg-9": "MuiGrid-grid-lg-9",
                                    "grid-lg-auto": "MuiGrid-grid-lg-auto",
                                    "grid-lg-true": "MuiGrid-grid-lg-true",
                                    "grid-md-1": "MuiGrid-grid-md-1",
                                    "grid-md-10": "MuiGrid-grid-md-10",
                                    "grid-md-11": "MuiGrid-grid-md-11",
                                    "grid-md-12": "MuiGrid-grid-md-12",
                                    "grid-md-2": "MuiGrid-grid-md-2",
                                    "grid-md-3": "MuiGrid-grid-md-3",
                                    "grid-md-4": "MuiGrid-grid-md-4",
                                    "grid-md-5": "MuiGrid-grid-md-5",
                                    "grid-md-6": "MuiGrid-grid-md-6",
                                    "grid-md-7": "MuiGrid-grid-md-7",
                                    "grid-md-8": "MuiGrid-grid-md-8",
                                    "grid-md-9": "MuiGrid-grid-md-9",
                                    "grid-md-auto": "MuiGrid-grid-md-auto",
                                    "grid-md-true": "MuiGrid-grid-md-true",
                                    "grid-sm-1": "MuiGrid-grid-sm-1",
                                    "grid-sm-10": "MuiGrid-grid-sm-10",
                                    "grid-sm-11": "MuiGrid-grid-sm-11",
                                    "grid-sm-12": "MuiGrid-grid-sm-12",
                                    "grid-sm-2": "MuiGrid-grid-sm-2",
                                    "grid-sm-3": "MuiGrid-grid-sm-3",
                                    "grid-sm-4": "MuiGrid-grid-sm-4",
                                    "grid-sm-5": "MuiGrid-grid-sm-5",
                                    "grid-sm-6": "MuiGrid-grid-sm-6",
                                    "grid-sm-7": "MuiGrid-grid-sm-7",
                                    "grid-sm-8": "MuiGrid-grid-sm-8",
                                    "grid-sm-9": "MuiGrid-grid-sm-9",
                                    "grid-sm-auto": "MuiGrid-grid-sm-auto",
                                    "grid-sm-true": "MuiGrid-grid-sm-true",
                                    "grid-xl-1": "MuiGrid-grid-xl-1",
                                    "grid-xl-10": "MuiGrid-grid-xl-10",
                                    "grid-xl-11": "MuiGrid-grid-xl-11",
                                    "grid-xl-12": "MuiGrid-grid-xl-12",
                                    "grid-xl-2": "MuiGrid-grid-xl-2",
                                    "grid-xl-3": "MuiGrid-grid-xl-3",
                                    "grid-xl-4": "MuiGrid-grid-xl-4",
                                    "grid-xl-5": "MuiGrid-grid-xl-5",
                                    "grid-xl-6": "MuiGrid-grid-xl-6",
                                    "grid-xl-7": "MuiGrid-grid-xl-7",
                                    "grid-xl-8": "MuiGrid-grid-xl-8",
                                    "grid-xl-9": "MuiGrid-grid-xl-9",
                                    "grid-xl-auto": "MuiGrid-grid-xl-auto",
                                    "grid-xl-true": "MuiGrid-grid-xl-true",
                                    "grid-xs-1": "MuiGrid-grid-xs-1",
                                    "grid-xs-10": "MuiGrid-grid-xs-10",
                                    "grid-xs-11": "MuiGrid-grid-xs-11",
                                    "grid-xs-12": "MuiGrid-grid-xs-12",
                                    "grid-xs-2": "MuiGrid-grid-xs-2",
                                    "grid-xs-3": "MuiGrid-grid-xs-3",
                                    "grid-xs-4": "MuiGrid-grid-xs-4",
                                    "grid-xs-5": "MuiGrid-grid-xs-5",
                                    "grid-xs-6": "MuiGrid-grid-xs-6",
                                    "grid-xs-7": "MuiGrid-grid-xs-7",
                                    "grid-xs-8": "MuiGrid-grid-xs-8",
                                    "grid-xs-9": "MuiGrid-grid-xs-9",
                                    "grid-xs-auto": "MuiGrid-grid-xs-auto",
                                    "grid-xs-true": "MuiGrid-grid-xs-true",
                                    "item": "MuiGrid-item",
                                    "justify-xs-center": "MuiGrid-justify-xs-center",
                                    "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                                    "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                                    "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                                    "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                                    "root": "MuiGrid-root",
                                    "spacing-xs-1": "MuiGrid-spacing-xs-1",
                                    "spacing-xs-10": "MuiGrid-spacing-xs-10",
                                    "spacing-xs-2": "MuiGrid-spacing-xs-2",
                                    "spacing-xs-3": "MuiGrid-spacing-xs-3",
                                    "spacing-xs-4": "MuiGrid-spacing-xs-4",
                                    "spacing-xs-5": "MuiGrid-spacing-xs-5",
                                    "spacing-xs-6": "MuiGrid-spacing-xs-6",
                                    "spacing-xs-7": "MuiGrid-spacing-xs-7",
                                    "spacing-xs-8": "MuiGrid-spacing-xs-8",
                                    "spacing-xs-9": "MuiGrid-spacing-xs-9",
                                    "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                                    "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                                    "zeroMinWidth": "MuiGrid-zeroMinWidth",
                                  }
                                }
                                container={true}
                                id="contributorForm"
                                spacing={1}
                                style={
                                  Object {
                                    "marginTop": 8,
                                  }
                                }
                              >
                                <div
                                  className="MuiGrid-root MuiGrid-container MuiGrid-spacing-xs-1"
                                  id="contributorForm"
                                  style={
                                    Object {
                                      "marginTop": 8,
                                    }
                                  }
                                >
                                  <WithStyles(ForwardRef(Grid))
                                    item={true}
                                    sm={true}
                                    xs={12}
                                  >
                                    <ForwardRef(Grid)
                                      classes={
                                        Object {
                                          "align-content-xs-center": "MuiGrid-align-content-xs-center",
                                          "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                                          "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                                          "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                                          "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                                          "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                                          "align-items-xs-center": "MuiGrid-align-items-xs-center",
                                          "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                                          "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                                          "container": "MuiGrid-container",
                                          "direction-xs-column": "MuiGrid-direction-xs-column",
                                          "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                                          "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                                          "grid-lg-1": "MuiGrid-grid-lg-1",
                                          "grid-lg-10": "MuiGrid-grid-lg-10",
                                          "grid-lg-11": "MuiGrid-grid-lg-11",
                                          "grid-lg-12": "MuiGrid-grid-lg-12",
                                          "grid-lg-2": "MuiGrid-grid-lg-2",
                                          "grid-lg-3": "MuiGrid-grid-lg-3",
                                          "grid-lg-4": "MuiGrid-grid-lg-4",
                                          "grid-lg-5": "MuiGrid-grid-lg-5",
                                          "grid-lg-6": "MuiGrid-grid-lg-6",
                                          "grid-lg-7": "MuiGrid-grid-lg-7",
                                          "grid-lg-8": "MuiGrid-grid-lg-8",
                                          "grid-lg-9": "MuiGrid-grid-lg-9",
                                          "grid-lg-auto": "MuiGrid-grid-lg-auto",
                                          "grid-lg-true": "MuiGrid-grid-lg-true",
                                          "grid-md-1": "MuiGrid-grid-md-1",
                                          "grid-md-10": "MuiGrid-grid-md-10",
                                          "grid-md-11": "MuiGrid-grid-md-11",
                                          "grid-md-12": "MuiGrid-grid-md-12",
                                          "grid-md-2": "MuiGrid-grid-md-2",
                                          "grid-md-3": "MuiGrid-grid-md-3",
                                          "grid-md-4": "MuiGrid-grid-md-4",
                                          "grid-md-5": "MuiGrid-grid-md-5",
                                          "grid-md-6": "MuiGrid-grid-md-6",
                                          "grid-md-7": "MuiGrid-grid-md-7",
                                          "grid-md-8": "MuiGrid-grid-md-8",
                                          "grid-md-9": "MuiGrid-grid-md-9",
                                          "grid-md-auto": "MuiGrid-grid-md-auto",
                                          "grid-md-true": "MuiGrid-grid-md-true",
                                          "grid-sm-1": "MuiGrid-grid-sm-1",
                                          "grid-sm-10": "MuiGrid-grid-sm-10",
                                          "grid-sm-11": "MuiGrid-grid-sm-11",
                                          "grid-sm-12": "MuiGrid-grid-sm-12",
                                          "grid-sm-2": "MuiGrid-grid-sm-2",
                                          "grid-sm-3": "MuiGrid-grid-sm-3",
                                          "grid-sm-4": "MuiGrid-grid-sm-4",
                                          "grid-sm-5": "MuiGrid-grid-sm-5",
                                          "grid-sm-6": "MuiGrid-grid-sm-6",
                                          "grid-sm-7": "MuiGrid-grid-sm-7",
                                          "grid-sm-8": "MuiGrid-grid-sm-8",
                                          "grid-sm-9": "MuiGrid-grid-sm-9",
                                          "grid-sm-auto": "MuiGrid-grid-sm-auto",
                                          "grid-sm-true": "MuiGrid-grid-sm-true",
                                          "grid-xl-1": "MuiGrid-grid-xl-1",
                                          "grid-xl-10": "MuiGrid-grid-xl-10",
                                          "grid-xl-11": "MuiGrid-grid-xl-11",
                                          "grid-xl-12": "MuiGrid-grid-xl-12",
                                          "grid-xl-2": "MuiGrid-grid-xl-2",
                                          "grid-xl-3": "MuiGrid-grid-xl-3",
                                          "grid-xl-4": "MuiGrid-grid-xl-4",
                                          "grid-xl-5": "MuiGrid-grid-xl-5",
                                          "grid-xl-6": "MuiGrid-grid-xl-6",
                                          "grid-xl-7": "MuiGrid-grid-xl-7",
                                          "grid-xl-8": "MuiGrid-grid-xl-8",
                                          "grid-xl-9": "MuiGrid-grid-xl-9",
                                          "grid-xl-auto": "MuiGrid-grid-xl-auto",
                                          "grid-xl-true": "MuiGrid-grid-xl-true",
                                          "grid-xs-1": "MuiGrid-grid-xs-1",
                                          "grid-xs-10": "MuiGrid-grid-xs-10",
                                          "grid-xs-11": "MuiGrid-grid-xs-11",
                                          "grid-xs-12": "MuiGrid-grid-xs-12",
                                          "grid-xs-2": "MuiGrid-grid-xs-2",
                                          "grid-xs-3": "MuiGrid-grid-xs-3",
                                          "grid-xs-4": "MuiGrid-grid-xs-4",
                                          "grid-xs-5": "MuiGrid-grid-xs-5",
                                          "grid-xs-6": "MuiGrid-grid-xs-6",
                                          "grid-xs-7": "MuiGrid-grid-xs-7",
                                          "grid-xs-8": "MuiGrid-grid-xs-8",
                                          "grid-xs-9": "MuiGrid-grid-xs-9",
                                          "grid-xs-auto": "MuiGrid-grid-xs-auto",
                                          "grid-xs-true": "MuiGrid-grid-xs-true",
                                          "item": "MuiGrid-item",
                                          "justify-xs-center": "MuiGrid-justify-xs-center",
                                          "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                                          "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                                          "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                                          "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                                          "root": "MuiGrid-root",
                                          "spacing-xs-1": "MuiGrid-spacing-xs-1",
                                          "spacing-xs-10": "MuiGrid-spacing-xs-10",
                                          "spacing-xs-2": "MuiGrid-spacing-xs-2",
                                          "spacing-xs-3": "MuiGrid-spacing-xs-3",
                                          "spacing-xs-4": "MuiGrid-spacing-xs-4",
                                          "spacing-xs-5": "MuiGrid-spacing-xs-5",
                                          "spacing-xs-6": "MuiGrid-spacing-xs-6",
                                          "spacing-xs-7": "MuiGrid-spacing-xs-7",
                                          "spacing-xs-8": "MuiGrid-spacing-xs-8",
                                          "spacing-xs-9": "MuiGrid-spacing-xs-9",
                                          "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                                          "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                                          "zeroMinWidth": "MuiGrid-zeroMinWidth",
                                        }
                                      }
                                      item={true}
                                      sm={true}
                                      xs={12}
                                    >
                                      <div
                                        className="MuiGrid-root MuiGrid-item MuiGrid-grid-xs-12 MuiGrid-grid-sm-true"
                                      >
                                        <TextField
                                          autoComplete="off"
                                          disabled={false}
                                          error={false}
                                          fullWidth={true}
                                          id="name-as-published"
                                          label="Name as published"
                                          onChange={[Function]}
                                          onKeyDown={[Function]}
                                          placeholder="Please type the name exactly as published"
                                          required={false}
                                          textFieldId="test"
                                          value=""
                                        >
                                          <WithStyles(ForwardRef(TextField))
                                            InputLabelProps={
                                              Object {
                                                "data-testid": "test-label",
                                                "hidden": false,
                                                "htmlFor": "test-input",
                                                "id": "test-label",
                                                "shrink": undefined,
                                              }
                                            }
                                            autoComplete="off"
                                            disabled={false}
                                            fullWidth={true}
                                            id="test"
                                            inputProps={
                                              Object {
                                                "aria-label": "Name as published",
                                                "aria-labelledby": "test-label",
                                                "data-testid": "test-input",
                                                "id": "test-input",
                                                "label": "Name as published",
                                              }
                                            }
                                            label="Name as published"
                                            onChange={[Function]}
                                            onKeyDown={[Function]}
                                            placeholder="Please type the name exactly as published"
                                            required={false}
                                            value=""
                                          >
                                            <ForwardRef(TextField)
                                              InputLabelProps={
                                                Object {
                                                  "data-testid": "test-label",
                                                  "hidden": false,
                                                  "htmlFor": "test-input",
                                                  "id": "test-label",
                                                  "shrink": undefined,
                                                }
                                              }
                                              autoComplete="off"
                                              classes={
                                                Object {
                                                  "root": "MuiTextField-root",
                                                }
                                              }
                                              disabled={false}
                                              fullWidth={true}
                                              id="test"
                                              inputProps={
                                                Object {
                                                  "aria-label": "Name as published",
                                                  "aria-labelledby": "test-label",
                                                  "data-testid": "test-input",
                                                  "id": "test-input",
                                                  "label": "Name as published",
                                                }
                                              }
                                              label="Name as published"
                                              onChange={[Function]}
                                              onKeyDown={[Function]}
                                              placeholder="Please type the name exactly as published"
                                              required={false}
                                              value=""
                                            >
                                              <WithStyles(ForwardRef(FormControl))
                                                className="MuiTextField-root"
                                                color="primary"
                                                disabled={false}
                                                error={false}
                                                fullWidth={true}
                                                onKeyDown={[Function]}
                                                required={false}
                                                variant="standard"
                                              >
                                                <ForwardRef(FormControl)
                                                  className="MuiTextField-root"
                                                  classes={
                                                    Object {
                                                      "fullWidth": "MuiFormControl-fullWidth",
                                                      "marginDense": "MuiFormControl-marginDense",
                                                      "marginNormal": "MuiFormControl-marginNormal",
                                                      "root": "MuiFormControl-root",
                                                    }
                                                  }
                                                  color="primary"
                                                  disabled={false}
                                                  error={false}
                                                  fullWidth={true}
                                                  onKeyDown={[Function]}
                                                  required={false}
                                                  variant="standard"
                                                >
                                                  <div
                                                    className="MuiFormControl-root MuiTextField-root MuiFormControl-fullWidth"
                                                    onKeyDown={[Function]}
                                                  >
                                                    <WithStyles(ForwardRef(InputLabel))
                                                      data-testid="test-label"
                                                      hidden={false}
                                                      htmlFor="test-input"
                                                      id="test-label"
                                                    >
                                                      <ForwardRef(InputLabel)
                                                        classes={
                                                          Object {
                                                            "animated": "MuiInputLabel-animated",
                                                            "asterisk": "MuiInputLabel-asterisk",
                                                            "disabled": "Mui-disabled",
                                                            "error": "Mui-error",
                                                            "filled": "MuiInputLabel-filled",
                                                            "focused": "Mui-focused",
                                                            "formControl": "MuiInputLabel-formControl",
                                                            "marginDense": "MuiInputLabel-marginDense",
                                                            "outlined": "MuiInputLabel-outlined",
                                                            "required": "Mui-required",
                                                            "root": "MuiInputLabel-root",
                                                            "shrink": "MuiInputLabel-shrink",
                                                          }
                                                        }
                                                        data-testid="test-label"
                                                        hidden={false}
                                                        htmlFor="test-input"
                                                        id="test-label"
                                                      >
                                                        <WithStyles(ForwardRef(FormLabel))
                                                          className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                          classes={
                                                            Object {
                                                              "asterisk": "MuiInputLabel-asterisk",
                                                              "disabled": "Mui-disabled",
                                                              "error": "Mui-error",
                                                              "focused": "Mui-focused",
                                                              "required": "Mui-required",
                                                            }
                                                          }
                                                          data-shrink={false}
                                                          data-testid="test-label"
                                                          hidden={false}
                                                          htmlFor="test-input"
                                                          id="test-label"
                                                        >
                                                          <ForwardRef(FormLabel)
                                                            className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                            classes={
                                                              Object {
                                                                "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                                                "colorSecondary": "MuiFormLabel-colorSecondary",
                                                                "disabled": "Mui-disabled Mui-disabled",
                                                                "error": "Mui-error Mui-error",
                                                                "filled": "MuiFormLabel-filled",
                                                                "focused": "Mui-focused Mui-focused",
                                                                "required": "Mui-required Mui-required",
                                                                "root": "MuiFormLabel-root",
                                                              }
                                                            }
                                                            data-shrink={false}
                                                            data-testid="test-label"
                                                            hidden={false}
                                                            htmlFor="test-input"
                                                            id="test-label"
                                                          >
                                                            <label
                                                              className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                              data-shrink={false}
                                                              data-testid="test-label"
                                                              hidden={false}
                                                              htmlFor="test-input"
                                                              id="test-label"
                                                            >
                                                              Name as published
                                                            </label>
                                                          </ForwardRef(FormLabel)>
                                                        </WithStyles(ForwardRef(FormLabel))>
                                                      </ForwardRef(InputLabel)>
                                                    </WithStyles(ForwardRef(InputLabel))>
                                                    <WithStyles(ForwardRef(Input))
                                                      autoComplete="off"
                                                      autoFocus={false}
                                                      fullWidth={true}
                                                      id="test"
                                                      inputProps={
                                                        Object {
                                                          "aria-label": "Name as published",
                                                          "aria-labelledby": "test-label",
                                                          "data-testid": "test-input",
                                                          "id": "test-input",
                                                          "label": "Name as published",
                                                        }
                                                      }
                                                      multiline={false}
                                                      onChange={[Function]}
                                                      placeholder="Please type the name exactly as published"
                                                      value=""
                                                    >
                                                      <ForwardRef(Input)
                                                        autoComplete="off"
                                                        autoFocus={false}
                                                        classes={
                                                          Object {
                                                            "colorSecondary": "MuiInput-colorSecondary",
                                                            "disabled": "Mui-disabled",
                                                            "error": "Mui-error",
                                                            "focused": "Mui-focused",
                                                            "formControl": "MuiInput-formControl",
                                                            "fullWidth": "MuiInput-fullWidth",
                                                            "input": "MuiInput-input",
                                                            "inputMarginDense": "MuiInput-inputMarginDense",
                                                            "inputMultiline": "MuiInput-inputMultiline",
                                                            "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                            "marginDense": "MuiInput-marginDense",
                                                            "multiline": "MuiInput-multiline",
                                                            "root": "MuiInput-root",
                                                            "underline": "MuiInput-underline",
                                                          }
                                                        }
                                                        fullWidth={true}
                                                        id="test"
                                                        inputProps={
                                                          Object {
                                                            "aria-label": "Name as published",
                                                            "aria-labelledby": "test-label",
                                                            "data-testid": "test-input",
                                                            "id": "test-input",
                                                            "label": "Name as published",
                                                          }
                                                        }
                                                        multiline={false}
                                                        onChange={[Function]}
                                                        placeholder="Please type the name exactly as published"
                                                        value=""
                                                      >
                                                        <WithStyles(ForwardRef(InputBase))
                                                          autoComplete="off"
                                                          autoFocus={false}
                                                          classes={
                                                            Object {
                                                              "colorSecondary": "MuiInput-colorSecondary",
                                                              "disabled": "Mui-disabled",
                                                              "error": "Mui-error",
                                                              "focused": "Mui-focused",
                                                              "formControl": "MuiInput-formControl",
                                                              "fullWidth": "MuiInput-fullWidth",
                                                              "input": "MuiInput-input",
                                                              "inputMarginDense": "MuiInput-inputMarginDense",
                                                              "inputMultiline": "MuiInput-inputMultiline",
                                                              "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                              "marginDense": "MuiInput-marginDense",
                                                              "multiline": "MuiInput-multiline",
                                                              "root": "MuiInput-root MuiInput-underline",
                                                              "underline": null,
                                                            }
                                                          }
                                                          fullWidth={true}
                                                          id="test"
                                                          inputComponent="input"
                                                          inputProps={
                                                            Object {
                                                              "aria-label": "Name as published",
                                                              "aria-labelledby": "test-label",
                                                              "data-testid": "test-input",
                                                              "id": "test-input",
                                                              "label": "Name as published",
                                                            }
                                                          }
                                                          multiline={false}
                                                          onChange={[Function]}
                                                          placeholder="Please type the name exactly as published"
                                                          type="text"
                                                          value=""
                                                        >
                                                          <ForwardRef(InputBase)
                                                            autoComplete="off"
                                                            autoFocus={false}
                                                            classes={
                                                              Object {
                                                                "adornedEnd": "MuiInputBase-adornedEnd",
                                                                "adornedStart": "MuiInputBase-adornedStart",
                                                                "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                                                "disabled": "Mui-disabled Mui-disabled",
                                                                "error": "Mui-error Mui-error",
                                                                "focused": "Mui-focused Mui-focused",
                                                                "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                                                "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                                                "input": "MuiInputBase-input MuiInput-input",
                                                                "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                                                "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                                                "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                                                "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                                                "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                                                "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                                                "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                                                "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                                                "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                                                              }
                                                            }
                                                            fullWidth={true}
                                                            id="test"
                                                            inputComponent="input"
                                                            inputProps={
                                                              Object {
                                                                "aria-label": "Name as published",
                                                                "aria-labelledby": "test-label",
                                                                "data-testid": "test-input",
                                                                "id": "test-input",
                                                                "label": "Name as published",
                                                              }
                                                            }
                                                            multiline={false}
                                                            onChange={[Function]}
                                                            placeholder="Please type the name exactly as published"
                                                            type="text"
                                                            value=""
                                                          >
                                                            <div
                                                              className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl"
                                                              onClick={[Function]}
                                                            >
                                                              <input
                                                                aria-invalid={false}
                                                                aria-label="Name as published"
                                                                aria-labelledby="test-label"
                                                                autoComplete="off"
                                                                autoFocus={false}
                                                                className="MuiInputBase-input MuiInput-input"
                                                                data-testid="test-input"
                                                                disabled={false}
                                                                id="test-input"
                                                                label="Name as published"
                                                                onAnimationStart={[Function]}
                                                                onBlur={[Function]}
                                                                onChange={[Function]}
                                                                onFocus={[Function]}
                                                                placeholder="Please type the name exactly as published"
                                                                required={false}
                                                                type="text"
                                                                value=""
                                                              />
                                                            </div>
                                                          </ForwardRef(InputBase)>
                                                        </WithStyles(ForwardRef(InputBase))>
                                                      </ForwardRef(Input)>
                                                    </WithStyles(ForwardRef(Input))>
                                                  </div>
                                                </ForwardRef(FormControl)>
                                              </WithStyles(ForwardRef(FormControl))>
                                            </ForwardRef(TextField)>
                                          </WithStyles(ForwardRef(TextField))>
                                        </TextField>
                                      </div>
                                    </ForwardRef(Grid)>
                                  </WithStyles(ForwardRef(Grid))>
                                  <WithStyles(ForwardRef(Grid))
                                    item={true}
                                    sm={3}
                                    xs={12}
                                  >
                                    <ForwardRef(Grid)
                                      classes={
                                        Object {
                                          "align-content-xs-center": "MuiGrid-align-content-xs-center",
                                          "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                                          "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                                          "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                                          "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                                          "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                                          "align-items-xs-center": "MuiGrid-align-items-xs-center",
                                          "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                                          "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                                          "container": "MuiGrid-container",
                                          "direction-xs-column": "MuiGrid-direction-xs-column",
                                          "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                                          "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                                          "grid-lg-1": "MuiGrid-grid-lg-1",
                                          "grid-lg-10": "MuiGrid-grid-lg-10",
                                          "grid-lg-11": "MuiGrid-grid-lg-11",
                                          "grid-lg-12": "MuiGrid-grid-lg-12",
                                          "grid-lg-2": "MuiGrid-grid-lg-2",
                                          "grid-lg-3": "MuiGrid-grid-lg-3",
                                          "grid-lg-4": "MuiGrid-grid-lg-4",
                                          "grid-lg-5": "MuiGrid-grid-lg-5",
                                          "grid-lg-6": "MuiGrid-grid-lg-6",
                                          "grid-lg-7": "MuiGrid-grid-lg-7",
                                          "grid-lg-8": "MuiGrid-grid-lg-8",
                                          "grid-lg-9": "MuiGrid-grid-lg-9",
                                          "grid-lg-auto": "MuiGrid-grid-lg-auto",
                                          "grid-lg-true": "MuiGrid-grid-lg-true",
                                          "grid-md-1": "MuiGrid-grid-md-1",
                                          "grid-md-10": "MuiGrid-grid-md-10",
                                          "grid-md-11": "MuiGrid-grid-md-11",
                                          "grid-md-12": "MuiGrid-grid-md-12",
                                          "grid-md-2": "MuiGrid-grid-md-2",
                                          "grid-md-3": "MuiGrid-grid-md-3",
                                          "grid-md-4": "MuiGrid-grid-md-4",
                                          "grid-md-5": "MuiGrid-grid-md-5",
                                          "grid-md-6": "MuiGrid-grid-md-6",
                                          "grid-md-7": "MuiGrid-grid-md-7",
                                          "grid-md-8": "MuiGrid-grid-md-8",
                                          "grid-md-9": "MuiGrid-grid-md-9",
                                          "grid-md-auto": "MuiGrid-grid-md-auto",
                                          "grid-md-true": "MuiGrid-grid-md-true",
                                          "grid-sm-1": "MuiGrid-grid-sm-1",
                                          "grid-sm-10": "MuiGrid-grid-sm-10",
                                          "grid-sm-11": "MuiGrid-grid-sm-11",
                                          "grid-sm-12": "MuiGrid-grid-sm-12",
                                          "grid-sm-2": "MuiGrid-grid-sm-2",
                                          "grid-sm-3": "MuiGrid-grid-sm-3",
                                          "grid-sm-4": "MuiGrid-grid-sm-4",
                                          "grid-sm-5": "MuiGrid-grid-sm-5",
                                          "grid-sm-6": "MuiGrid-grid-sm-6",
                                          "grid-sm-7": "MuiGrid-grid-sm-7",
                                          "grid-sm-8": "MuiGrid-grid-sm-8",
                                          "grid-sm-9": "MuiGrid-grid-sm-9",
                                          "grid-sm-auto": "MuiGrid-grid-sm-auto",
                                          "grid-sm-true": "MuiGrid-grid-sm-true",
                                          "grid-xl-1": "MuiGrid-grid-xl-1",
                                          "grid-xl-10": "MuiGrid-grid-xl-10",
                                          "grid-xl-11": "MuiGrid-grid-xl-11",
                                          "grid-xl-12": "MuiGrid-grid-xl-12",
                                          "grid-xl-2": "MuiGrid-grid-xl-2",
                                          "grid-xl-3": "MuiGrid-grid-xl-3",
                                          "grid-xl-4": "MuiGrid-grid-xl-4",
                                          "grid-xl-5": "MuiGrid-grid-xl-5",
                                          "grid-xl-6": "MuiGrid-grid-xl-6",
                                          "grid-xl-7": "MuiGrid-grid-xl-7",
                                          "grid-xl-8": "MuiGrid-grid-xl-8",
                                          "grid-xl-9": "MuiGrid-grid-xl-9",
                                          "grid-xl-auto": "MuiGrid-grid-xl-auto",
                                          "grid-xl-true": "MuiGrid-grid-xl-true",
                                          "grid-xs-1": "MuiGrid-grid-xs-1",
                                          "grid-xs-10": "MuiGrid-grid-xs-10",
                                          "grid-xs-11": "MuiGrid-grid-xs-11",
                                          "grid-xs-12": "MuiGrid-grid-xs-12",
                                          "grid-xs-2": "MuiGrid-grid-xs-2",
                                          "grid-xs-3": "MuiGrid-grid-xs-3",
                                          "grid-xs-4": "MuiGrid-grid-xs-4",
                                          "grid-xs-5": "MuiGrid-grid-xs-5",
                                          "grid-xs-6": "MuiGrid-grid-xs-6",
                                          "grid-xs-7": "MuiGrid-grid-xs-7",
                                          "grid-xs-8": "MuiGrid-grid-xs-8",
                                          "grid-xs-9": "MuiGrid-grid-xs-9",
                                          "grid-xs-auto": "MuiGrid-grid-xs-auto",
                                          "grid-xs-true": "MuiGrid-grid-xs-true",
                                          "item": "MuiGrid-item",
                                          "justify-xs-center": "MuiGrid-justify-xs-center",
                                          "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                                          "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                                          "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                                          "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                                          "root": "MuiGrid-root",
                                          "spacing-xs-1": "MuiGrid-spacing-xs-1",
                                          "spacing-xs-10": "MuiGrid-spacing-xs-10",
                                          "spacing-xs-2": "MuiGrid-spacing-xs-2",
                                          "spacing-xs-3": "MuiGrid-spacing-xs-3",
                                          "spacing-xs-4": "MuiGrid-spacing-xs-4",
                                          "spacing-xs-5": "MuiGrid-spacing-xs-5",
                                          "spacing-xs-6": "MuiGrid-spacing-xs-6",
                                          "spacing-xs-7": "MuiGrid-spacing-xs-7",
                                          "spacing-xs-8": "MuiGrid-spacing-xs-8",
                                          "spacing-xs-9": "MuiGrid-spacing-xs-9",
                                          "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                                          "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                                          "zeroMinWidth": "MuiGrid-zeroMinWidth",
                                        }
                                      }
                                      item={true}
                                      sm={3}
                                      xs={12}
                                    >
                                      <div
                                        className="MuiGrid-root MuiGrid-item MuiGrid-grid-xs-12 MuiGrid-grid-sm-3"
                                      >
                                        <Connect(Component)
                                          disabled={false}
                                          floatingLabelText="UQ Author ID"
                                          hintText="Type UQ author name to search"
                                          key="aut-id"
                                          onChange={[Function]}
                                          onClear={[Function]}
                                          prefilledSearch={false}
                                          uqIdFieldId="test-aut-id"
                                          value=""
                                        >
                                          <Memo(AutoCompleteAsynchronousField)
                                            OptionTemplate={
                                              Object {
                                                "$$typeof": Symbol(react.memo),
                                                "compare": null,
                                                "type": [Function],
                                              }
                                            }
                                            autoCompleteAsynchronousFieldId="test-aut-id"
                                            clearSuggestions={[Function]}
                                            defaultValue={null}
                                            disabled={false}
                                            error={false}
                                            errorText="Type UQ author name to search"
                                            filterOptions={[Function]}
                                            floatingLabelText="UQ Author ID"
                                            getOptionLabel={[Function]}
                                            hintText="Type UQ author name to search"
                                            itemsList={Array []}
                                            itemsLoading={false}
                                            loadSuggestions={[Function]}
                                            onChange={[Function]}
                                            onClear={[Function]}
                                            prefilledSearch={false}
                                            uqIdFieldId="test-aut-id"
                                            value=""
                                          >
                                            <WithStyles(ForwardRef(Autocomplete))
                                              ListboxProps={
                                                Object {
                                                  "data-testid": "test-aut-id-options",
                                                  "id": "test-aut-id-options",
                                                }
                                              }
                                              clearOnEscape={true}
                                              disabled={false}
                                              filterOptions={[Function]}
                                              getOptionLabel={[Function]}
                                              getOptionSelected={[Function]}
                                              id="test-aut-id"
                                              loading={false}
                                              onChange={[Function]}
                                              onClose={[Function]}
                                              onInputChange={[Function]}
                                              onOpen={[Function]}
                                              open={false}
                                              options={Array []}
                                              popupIcon={false}
                                              renderInput={[Function]}
                                              renderOption={[Function]}
                                              value={null}
                                            >
                                              <ForwardRef(Autocomplete)
                                                ListboxProps={
                                                  Object {
                                                    "data-testid": "test-aut-id-options",
                                                    "id": "test-aut-id-options",
                                                  }
                                                }
                                                classes={
                                                  Object {
                                                    "clearIndicator": "MuiAutocomplete-clearIndicator",
                                                    "clearIndicatorDirty": "MuiAutocomplete-clearIndicatorDirty",
                                                    "endAdornment": "MuiAutocomplete-endAdornment",
                                                    "focused": "Mui-focused",
                                                    "fullWidth": "MuiAutocomplete-fullWidth",
                                                    "groupLabel": "MuiAutocomplete-groupLabel",
                                                    "groupUl": "MuiAutocomplete-groupUl",
                                                    "hasClearIcon": "MuiAutocomplete-hasClearIcon",
                                                    "hasPopupIcon": "MuiAutocomplete-hasPopupIcon",
                                                    "input": "MuiAutocomplete-input",
                                                    "inputFocused": "MuiAutocomplete-inputFocused",
                                                    "inputRoot": "MuiAutocomplete-inputRoot",
                                                    "listbox": "MuiAutocomplete-listbox",
                                                    "loading": "MuiAutocomplete-loading",
                                                    "noOptions": "MuiAutocomplete-noOptions",
                                                    "option": "MuiAutocomplete-option",
                                                    "paper": "MuiAutocomplete-paper",
                                                    "popper": "MuiAutocomplete-popper",
                                                    "popperDisablePortal": "MuiAutocomplete-popperDisablePortal",
                                                    "popupIndicator": "MuiAutocomplete-popupIndicator",
                                                    "popupIndicatorOpen": "MuiAutocomplete-popupIndicatorOpen",
                                                    "root": "MuiAutocomplete-root",
                                                    "tag": "MuiAutocomplete-tag",
                                                    "tagSizeSmall": "MuiAutocomplete-tagSizeSmall",
                                                  }
                                                }
                                                clearOnEscape={true}
                                                disabled={false}
                                                filterOptions={[Function]}
                                                getOptionLabel={[Function]}
                                                getOptionSelected={[Function]}
                                                id="test-aut-id"
                                                loading={false}
                                                onChange={[Function]}
                                                onClose={[Function]}
                                                onInputChange={[Function]}
                                                onOpen={[Function]}
                                                open={false}
                                                options={Array []}
                                                popupIcon={false}
                                                renderInput={[Function]}
                                                renderOption={[Function]}
                                                value={null}
                                              >
                                                <div
                                                  aria-expanded={false}
                                                  aria-owns={null}
                                                  className="MuiAutocomplete-root MuiAutocomplete-hasClearIcon MuiAutocomplete-hasPopupIcon"
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onMouseDown={[Function]}
                                                  role="combobox"
                                                >
                                                  <WithStyles(ForwardRef(TextField))
                                                    InputLabelProps={
                                                      Object {
                                                        "htmlFor": "test-aut-id",
                                                        "id": "test-aut-id-label",
                                                      }
                                                    }
                                                    InputProps={
                                                      Object {
                                                        "className": "MuiAutocomplete-inputRoot",
                                                        "endAdornment": <React.Fragment>
                                                          <div
                                                            className="MuiAutocomplete-endAdornment"
                                                          >
                                                            <WithStyles(ForwardRef(IconButton))
                                                              aria-label="Clear"
                                                              className="MuiAutocomplete-clearIndicator"
                                                              onClick={[Function]}
                                                              tabIndex={-1}
                                                              title="Clear"
                                                            >
                                                              <Memo
                                                                fontSize="small"
                                                              />
                                                            </WithStyles(ForwardRef(IconButton))>
                                                            <WithStyles(ForwardRef(IconButton))
                                                              aria-label="Open"
                                                              className="MuiAutocomplete-popupIndicator"
                                                              disabled={false}
                                                              onClick={[Function]}
                                                              tabIndex={-1}
                                                              title="Open"
                                                            />
                                                          </div>
                                                        </React.Fragment>,
                                                        "ref": [Function],
                                                        "startAdornment": undefined,
                                                      }
                                                    }
                                                    disabled={false}
                                                    error={false}
                                                    fullWidth={true}
                                                    helperText=""
                                                    id="test-aut-id"
                                                    inputProps={
                                                      Object {
                                                        "aria-activedescendant": null,
                                                        "aria-autocomplete": "list",
                                                        "aria-controls": null,
                                                        "autoCapitalize": "none",
                                                        "autoComplete": "off",
                                                        "className": "MuiAutocomplete-input MuiAutocomplete-inputFocused",
                                                        "data-testid": "test-aut-id-input",
                                                        "disabled": false,
                                                        "id": "test-aut-id-input",
                                                        "onBlur": [Function],
                                                        "onChange": [Function],
                                                        "onFocus": [Function],
                                                        "onMouseDown": [Function],
                                                        "ref": Object {
                                                          "current": <input
                                                            aria-autocomplete="list"
                                                            aria-invalid="false"
                                                            autocapitalize="none"
                                                            autocomplete="off"
                                                            class="MuiInputBase-input MuiInput-input MuiAutocomplete-input MuiAutocomplete-inputFocused MuiInputBase-inputAdornedEnd"
                                                            data-testid="test-aut-id-input"
                                                            id="test-aut-id-input"
                                                            name="test-aut-id"
                                                            spellcheck="false"
                                                            type="text"
                                                            value=""
                                                          />,
                                                        },
                                                        "spellCheck": "false",
                                                        "value": "",
                                                      }
                                                    }
                                                    label="UQ Author ID"
                                                    name="test-aut-id"
                                                    onChange={[Function]}
                                                    value=""
                                                  >
                                                    <ForwardRef(TextField)
                                                      InputLabelProps={
                                                        Object {
                                                          "htmlFor": "test-aut-id",
                                                          "id": "test-aut-id-label",
                                                        }
                                                      }
                                                      InputProps={
                                                        Object {
                                                          "className": "MuiAutocomplete-inputRoot",
                                                          "endAdornment": <React.Fragment>
                                                            <div
                                                              className="MuiAutocomplete-endAdornment"
                                                            >
                                                              <WithStyles(ForwardRef(IconButton))
                                                                aria-label="Clear"
                                                                className="MuiAutocomplete-clearIndicator"
                                                                onClick={[Function]}
                                                                tabIndex={-1}
                                                                title="Clear"
                                                              >
                                                                <Memo
                                                                  fontSize="small"
                                                                />
                                                              </WithStyles(ForwardRef(IconButton))>
                                                              <WithStyles(ForwardRef(IconButton))
                                                                aria-label="Open"
                                                                className="MuiAutocomplete-popupIndicator"
                                                                disabled={false}
                                                                onClick={[Function]}
                                                                tabIndex={-1}
                                                                title="Open"
                                                              />
                                                            </div>
                                                          </React.Fragment>,
                                                          "ref": [Function],
                                                          "startAdornment": undefined,
                                                        }
                                                      }
                                                      classes={
                                                        Object {
                                                          "root": "MuiTextField-root",
                                                        }
                                                      }
                                                      disabled={false}
                                                      error={false}
                                                      fullWidth={true}
                                                      helperText=""
                                                      id="test-aut-id"
                                                      inputProps={
                                                        Object {
                                                          "aria-activedescendant": null,
                                                          "aria-autocomplete": "list",
                                                          "aria-controls": null,
                                                          "autoCapitalize": "none",
                                                          "autoComplete": "off",
                                                          "className": "MuiAutocomplete-input MuiAutocomplete-inputFocused",
                                                          "data-testid": "test-aut-id-input",
                                                          "disabled": false,
                                                          "id": "test-aut-id-input",
                                                          "onBlur": [Function],
                                                          "onChange": [Function],
                                                          "onFocus": [Function],
                                                          "onMouseDown": [Function],
                                                          "ref": Object {
                                                            "current": <input
                                                              aria-autocomplete="list"
                                                              aria-invalid="false"
                                                              autocapitalize="none"
                                                              autocomplete="off"
                                                              class="MuiInputBase-input MuiInput-input MuiAutocomplete-input MuiAutocomplete-inputFocused MuiInputBase-inputAdornedEnd"
                                                              data-testid="test-aut-id-input"
                                                              id="test-aut-id-input"
                                                              name="test-aut-id"
                                                              spellcheck="false"
                                                              type="text"
                                                              value=""
                                                            />,
                                                          },
                                                          "spellCheck": "false",
                                                          "value": "",
                                                        }
                                                      }
                                                      label="UQ Author ID"
                                                      name="test-aut-id"
                                                      onChange={[Function]}
                                                      value=""
                                                    >
                                                      <WithStyles(ForwardRef(FormControl))
                                                        className="MuiTextField-root"
                                                        color="primary"
                                                        disabled={false}
                                                        error={false}
                                                        fullWidth={true}
                                                        required={false}
                                                        variant="standard"
                                                      >
                                                        <ForwardRef(FormControl)
                                                          className="MuiTextField-root"
                                                          classes={
                                                            Object {
                                                              "fullWidth": "MuiFormControl-fullWidth",
                                                              "marginDense": "MuiFormControl-marginDense",
                                                              "marginNormal": "MuiFormControl-marginNormal",
                                                              "root": "MuiFormControl-root",
                                                            }
                                                          }
                                                          color="primary"
                                                          disabled={false}
                                                          error={false}
                                                          fullWidth={true}
                                                          required={false}
                                                          variant="standard"
                                                        >
                                                          <div
                                                            className="MuiFormControl-root MuiTextField-root MuiFormControl-fullWidth"
                                                          >
                                                            <WithStyles(ForwardRef(InputLabel))
                                                              htmlFor="test-aut-id"
                                                              id="test-aut-id-label"
                                                            >
                                                              <ForwardRef(InputLabel)
                                                                classes={
                                                                  Object {
                                                                    "animated": "MuiInputLabel-animated",
                                                                    "asterisk": "MuiInputLabel-asterisk",
                                                                    "disabled": "Mui-disabled",
                                                                    "error": "Mui-error",
                                                                    "filled": "MuiInputLabel-filled",
                                                                    "focused": "Mui-focused",
                                                                    "formControl": "MuiInputLabel-formControl",
                                                                    "marginDense": "MuiInputLabel-marginDense",
                                                                    "outlined": "MuiInputLabel-outlined",
                                                                    "required": "Mui-required",
                                                                    "root": "MuiInputLabel-root",
                                                                    "shrink": "MuiInputLabel-shrink",
                                                                  }
                                                                }
                                                                htmlFor="test-aut-id"
                                                                id="test-aut-id-label"
                                                              >
                                                                <WithStyles(ForwardRef(FormLabel))
                                                                  className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                                  classes={
                                                                    Object {
                                                                      "asterisk": "MuiInputLabel-asterisk",
                                                                      "disabled": "Mui-disabled",
                                                                      "error": "Mui-error",
                                                                      "focused": "Mui-focused",
                                                                      "required": "Mui-required",
                                                                    }
                                                                  }
                                                                  data-shrink={false}
                                                                  htmlFor="test-aut-id"
                                                                  id="test-aut-id-label"
                                                                >
                                                                  <ForwardRef(FormLabel)
                                                                    className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                                    classes={
                                                                      Object {
                                                                        "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                                                        "colorSecondary": "MuiFormLabel-colorSecondary",
                                                                        "disabled": "Mui-disabled Mui-disabled",
                                                                        "error": "Mui-error Mui-error",
                                                                        "filled": "MuiFormLabel-filled",
                                                                        "focused": "Mui-focused Mui-focused",
                                                                        "required": "Mui-required Mui-required",
                                                                        "root": "MuiFormLabel-root",
                                                                      }
                                                                    }
                                                                    data-shrink={false}
                                                                    htmlFor="test-aut-id"
                                                                    id="test-aut-id-label"
                                                                  >
                                                                    <label
                                                                      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                                      data-shrink={false}
                                                                      htmlFor="test-aut-id"
                                                                      id="test-aut-id-label"
                                                                    >
                                                                      UQ Author ID
                                                                    </label>
                                                                  </ForwardRef(FormLabel)>
                                                                </WithStyles(ForwardRef(FormLabel))>
                                                              </ForwardRef(InputLabel)>
                                                            </WithStyles(ForwardRef(InputLabel))>
                                                            <WithStyles(ForwardRef(Input))
                                                              autoFocus={false}
                                                              className="MuiAutocomplete-inputRoot"
                                                              endAdornment={
                                                                <React.Fragment>
                                                                  <div
                                                                    className="MuiAutocomplete-endAdornment"
                                                                  >
                                                                    <WithStyles(ForwardRef(IconButton))
                                                                      aria-label="Clear"
                                                                      className="MuiAutocomplete-clearIndicator"
                                                                      onClick={[Function]}
                                                                      tabIndex={-1}
                                                                      title="Clear"
                                                                    >
                                                                      <Memo
                                                                        fontSize="small"
                                                                      />
                                                                    </WithStyles(ForwardRef(IconButton))>
                                                                    <WithStyles(ForwardRef(IconButton))
                                                                      aria-label="Open"
                                                                      className="MuiAutocomplete-popupIndicator"
                                                                      disabled={false}
                                                                      onClick={[Function]}
                                                                      tabIndex={-1}
                                                                      title="Open"
                                                                    />
                                                                  </div>
                                                                </React.Fragment>
                                                              }
                                                              fullWidth={true}
                                                              id="test-aut-id"
                                                              inputProps={
                                                                Object {
                                                                  "aria-activedescendant": null,
                                                                  "aria-autocomplete": "list",
                                                                  "aria-controls": null,
                                                                  "autoCapitalize": "none",
                                                                  "autoComplete": "off",
                                                                  "className": "MuiAutocomplete-input MuiAutocomplete-inputFocused",
                                                                  "data-testid": "test-aut-id-input",
                                                                  "disabled": false,
                                                                  "id": "test-aut-id-input",
                                                                  "onBlur": [Function],
                                                                  "onChange": [Function],
                                                                  "onFocus": [Function],
                                                                  "onMouseDown": [Function],
                                                                  "ref": Object {
                                                                    "current": <input
                                                                      aria-autocomplete="list"
                                                                      aria-invalid="false"
                                                                      autocapitalize="none"
                                                                      autocomplete="off"
                                                                      class="MuiInputBase-input MuiInput-input MuiAutocomplete-input MuiAutocomplete-inputFocused MuiInputBase-inputAdornedEnd"
                                                                      data-testid="test-aut-id-input"
                                                                      id="test-aut-id-input"
                                                                      name="test-aut-id"
                                                                      spellcheck="false"
                                                                      type="text"
                                                                      value=""
                                                                    />,
                                                                  },
                                                                  "spellCheck": "false",
                                                                  "value": "",
                                                                }
                                                              }
                                                              multiline={false}
                                                              name="test-aut-id"
                                                              onChange={[Function]}
                                                              value=""
                                                            >
                                                              <ForwardRef(Input)
                                                                autoFocus={false}
                                                                className="MuiAutocomplete-inputRoot"
                                                                classes={
                                                                  Object {
                                                                    "colorSecondary": "MuiInput-colorSecondary",
                                                                    "disabled": "Mui-disabled",
                                                                    "error": "Mui-error",
                                                                    "focused": "Mui-focused",
                                                                    "formControl": "MuiInput-formControl",
                                                                    "fullWidth": "MuiInput-fullWidth",
                                                                    "input": "MuiInput-input",
                                                                    "inputMarginDense": "MuiInput-inputMarginDense",
                                                                    "inputMultiline": "MuiInput-inputMultiline",
                                                                    "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                                    "marginDense": "MuiInput-marginDense",
                                                                    "multiline": "MuiInput-multiline",
                                                                    "root": "MuiInput-root",
                                                                    "underline": "MuiInput-underline",
                                                                  }
                                                                }
                                                                endAdornment={
                                                                  <React.Fragment>
                                                                    <div
                                                                      className="MuiAutocomplete-endAdornment"
                                                                    >
                                                                      <WithStyles(ForwardRef(IconButton))
                                                                        aria-label="Clear"
                                                                        className="MuiAutocomplete-clearIndicator"
                                                                        onClick={[Function]}
                                                                        tabIndex={-1}
                                                                        title="Clear"
                                                                      >
                                                                        <Memo
                                                                          fontSize="small"
                                                                        />
                                                                      </WithStyles(ForwardRef(IconButton))>
                                                                      <WithStyles(ForwardRef(IconButton))
                                                                        aria-label="Open"
                                                                        className="MuiAutocomplete-popupIndicator"
                                                                        disabled={false}
                                                                        onClick={[Function]}
                                                                        tabIndex={-1}
                                                                        title="Open"
                                                                      />
                                                                    </div>
                                                                  </React.Fragment>
                                                                }
                                                                fullWidth={true}
                                                                id="test-aut-id"
                                                                inputProps={
                                                                  Object {
                                                                    "aria-activedescendant": null,
                                                                    "aria-autocomplete": "list",
                                                                    "aria-controls": null,
                                                                    "autoCapitalize": "none",
                                                                    "autoComplete": "off",
                                                                    "className": "MuiAutocomplete-input MuiAutocomplete-inputFocused",
                                                                    "data-testid": "test-aut-id-input",
                                                                    "disabled": false,
                                                                    "id": "test-aut-id-input",
                                                                    "onBlur": [Function],
                                                                    "onChange": [Function],
                                                                    "onFocus": [Function],
                                                                    "onMouseDown": [Function],
                                                                    "ref": Object {
                                                                      "current": <input
                                                                        aria-autocomplete="list"
                                                                        aria-invalid="false"
                                                                        autocapitalize="none"
                                                                        autocomplete="off"
                                                                        class="MuiInputBase-input MuiInput-input MuiAutocomplete-input MuiAutocomplete-inputFocused MuiInputBase-inputAdornedEnd"
                                                                        data-testid="test-aut-id-input"
                                                                        id="test-aut-id-input"
                                                                        name="test-aut-id"
                                                                        spellcheck="false"
                                                                        type="text"
                                                                        value=""
                                                                      />,
                                                                    },
                                                                    "spellCheck": "false",
                                                                    "value": "",
                                                                  }
                                                                }
                                                                multiline={false}
                                                                name="test-aut-id"
                                                                onChange={[Function]}
                                                                value=""
                                                              >
                                                                <WithStyles(ForwardRef(InputBase))
                                                                  autoFocus={false}
                                                                  className="MuiAutocomplete-inputRoot"
                                                                  classes={
                                                                    Object {
                                                                      "colorSecondary": "MuiInput-colorSecondary",
                                                                      "disabled": "Mui-disabled",
                                                                      "error": "Mui-error",
                                                                      "focused": "Mui-focused",
                                                                      "formControl": "MuiInput-formControl",
                                                                      "fullWidth": "MuiInput-fullWidth",
                                                                      "input": "MuiInput-input",
                                                                      "inputMarginDense": "MuiInput-inputMarginDense",
                                                                      "inputMultiline": "MuiInput-inputMultiline",
                                                                      "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                                      "marginDense": "MuiInput-marginDense",
                                                                      "multiline": "MuiInput-multiline",
                                                                      "root": "MuiInput-root MuiInput-underline",
                                                                      "underline": null,
                                                                    }
                                                                  }
                                                                  endAdornment={
                                                                    <React.Fragment>
                                                                      <div
                                                                        className="MuiAutocomplete-endAdornment"
                                                                      >
                                                                        <WithStyles(ForwardRef(IconButton))
                                                                          aria-label="Clear"
                                                                          className="MuiAutocomplete-clearIndicator"
                                                                          onClick={[Function]}
                                                                          tabIndex={-1}
                                                                          title="Clear"
                                                                        >
                                                                          <Memo
                                                                            fontSize="small"
                                                                          />
                                                                        </WithStyles(ForwardRef(IconButton))>
                                                                        <WithStyles(ForwardRef(IconButton))
                                                                          aria-label="Open"
                                                                          className="MuiAutocomplete-popupIndicator"
                                                                          disabled={false}
                                                                          onClick={[Function]}
                                                                          tabIndex={-1}
                                                                          title="Open"
                                                                        />
                                                                      </div>
                                                                    </React.Fragment>
                                                                  }
                                                                  fullWidth={true}
                                                                  id="test-aut-id"
                                                                  inputComponent="input"
                                                                  inputProps={
                                                                    Object {
                                                                      "aria-activedescendant": null,
                                                                      "aria-autocomplete": "list",
                                                                      "aria-controls": null,
                                                                      "autoCapitalize": "none",
                                                                      "autoComplete": "off",
                                                                      "className": "MuiAutocomplete-input MuiAutocomplete-inputFocused",
                                                                      "data-testid": "test-aut-id-input",
                                                                      "disabled": false,
                                                                      "id": "test-aut-id-input",
                                                                      "onBlur": [Function],
                                                                      "onChange": [Function],
                                                                      "onFocus": [Function],
                                                                      "onMouseDown": [Function],
                                                                      "ref": Object {
                                                                        "current": <input
                                                                          aria-autocomplete="list"
                                                                          aria-invalid="false"
                                                                          autocapitalize="none"
                                                                          autocomplete="off"
                                                                          class="MuiInputBase-input MuiInput-input MuiAutocomplete-input MuiAutocomplete-inputFocused MuiInputBase-inputAdornedEnd"
                                                                          data-testid="test-aut-id-input"
                                                                          id="test-aut-id-input"
                                                                          name="test-aut-id"
                                                                          spellcheck="false"
                                                                          type="text"
                                                                          value=""
                                                                        />,
                                                                      },
                                                                      "spellCheck": "false",
                                                                      "value": "",
                                                                    }
                                                                  }
                                                                  multiline={false}
                                                                  name="test-aut-id"
                                                                  onChange={[Function]}
                                                                  type="text"
                                                                  value=""
                                                                >
                                                                  <ForwardRef(InputBase)
                                                                    autoFocus={false}
                                                                    className="MuiAutocomplete-inputRoot"
                                                                    classes={
                                                                      Object {
                                                                        "adornedEnd": "MuiInputBase-adornedEnd",
                                                                        "adornedStart": "MuiInputBase-adornedStart",
                                                                        "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                                                        "disabled": "Mui-disabled Mui-disabled",
                                                                        "error": "Mui-error Mui-error",
                                                                        "focused": "Mui-focused Mui-focused",
                                                                        "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                                                        "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                                                        "input": "MuiInputBase-input MuiInput-input",
                                                                        "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                                                        "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                                                        "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                                                        "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                                                        "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                                                        "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                                                        "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                                                        "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                                                        "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                                                                      }
                                                                    }
                                                                    endAdornment={
                                                                      <React.Fragment>
                                                                        <div
                                                                          className="MuiAutocomplete-endAdornment"
                                                                        >
                                                                          <WithStyles(ForwardRef(IconButton))
                                                                            aria-label="Clear"
                                                                            className="MuiAutocomplete-clearIndicator"
                                                                            onClick={[Function]}
                                                                            tabIndex={-1}
                                                                            title="Clear"
                                                                          >
                                                                            <Memo
                                                                              fontSize="small"
                                                                            />
                                                                          </WithStyles(ForwardRef(IconButton))>
                                                                          <WithStyles(ForwardRef(IconButton))
                                                                            aria-label="Open"
                                                                            className="MuiAutocomplete-popupIndicator"
                                                                            disabled={false}
                                                                            onClick={[Function]}
                                                                            tabIndex={-1}
                                                                            title="Open"
                                                                          />
                                                                        </div>
                                                                      </React.Fragment>
                                                                    }
                                                                    fullWidth={true}
                                                                    id="test-aut-id"
                                                                    inputComponent="input"
                                                                    inputProps={
                                                                      Object {
                                                                        "aria-activedescendant": null,
                                                                        "aria-autocomplete": "list",
                                                                        "aria-controls": null,
                                                                        "autoCapitalize": "none",
                                                                        "autoComplete": "off",
                                                                        "className": "MuiAutocomplete-input MuiAutocomplete-inputFocused",
                                                                        "data-testid": "test-aut-id-input",
                                                                        "disabled": false,
                                                                        "id": "test-aut-id-input",
                                                                        "onBlur": [Function],
                                                                        "onChange": [Function],
                                                                        "onFocus": [Function],
                                                                        "onMouseDown": [Function],
                                                                        "ref": Object {
                                                                          "current": <input
                                                                            aria-autocomplete="list"
                                                                            aria-invalid="false"
                                                                            autocapitalize="none"
                                                                            autocomplete="off"
                                                                            class="MuiInputBase-input MuiInput-input MuiAutocomplete-input MuiAutocomplete-inputFocused MuiInputBase-inputAdornedEnd"
                                                                            data-testid="test-aut-id-input"
                                                                            id="test-aut-id-input"
                                                                            name="test-aut-id"
                                                                            spellcheck="false"
                                                                            type="text"
                                                                            value=""
                                                                          />,
                                                                        },
                                                                        "spellCheck": "false",
                                                                        "value": "",
                                                                      }
                                                                    }
                                                                    multiline={false}
                                                                    name="test-aut-id"
                                                                    onChange={[Function]}
                                                                    type="text"
                                                                    value=""
                                                                  >
                                                                    <div
                                                                      className="MuiInputBase-root MuiInput-root MuiInput-underline MuiAutocomplete-inputRoot MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedEnd"
                                                                      onClick={[Function]}
                                                                    >
                                                                      <input
                                                                        aria-activedescendant={null}
                                                                        aria-autocomplete="list"
                                                                        aria-controls={null}
                                                                        aria-invalid={false}
                                                                        autoCapitalize="none"
                                                                        autoComplete="off"
                                                                        autoFocus={false}
                                                                        className="MuiInputBase-input MuiInput-input MuiAutocomplete-input MuiAutocomplete-inputFocused MuiInputBase-inputAdornedEnd"
                                                                        data-testid="test-aut-id-input"
                                                                        disabled={false}
                                                                        id="test-aut-id-input"
                                                                        name="test-aut-id"
                                                                        onAnimationStart={[Function]}
                                                                        onBlur={[Function]}
                                                                        onChange={[Function]}
                                                                        onFocus={[Function]}
                                                                        onMouseDown={[Function]}
                                                                        required={false}
                                                                        spellCheck="false"
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                      <div
                                                                        className="MuiAutocomplete-endAdornment"
                                                                      >
                                                                        <WithStyles(ForwardRef(IconButton))
                                                                          aria-label="Clear"
                                                                          className="MuiAutocomplete-clearIndicator"
                                                                          onClick={[Function]}
                                                                          tabIndex={-1}
                                                                          title="Clear"
                                                                        >
                                                                          <ForwardRef(IconButton)
                                                                            aria-label="Clear"
                                                                            className="MuiAutocomplete-clearIndicator"
                                                                            classes={
                                                                              Object {
                                                                                "colorInherit": "MuiIconButton-colorInherit",
                                                                                "colorPrimary": "MuiIconButton-colorPrimary",
                                                                                "colorSecondary": "MuiIconButton-colorSecondary",
                                                                                "disabled": "Mui-disabled",
                                                                                "edgeEnd": "MuiIconButton-edgeEnd",
                                                                                "edgeStart": "MuiIconButton-edgeStart",
                                                                                "label": "MuiIconButton-label",
                                                                                "root": "MuiIconButton-root",
                                                                                "sizeSmall": "MuiIconButton-sizeSmall",
                                                                              }
                                                                            }
                                                                            onClick={[Function]}
                                                                            tabIndex={-1}
                                                                            title="Clear"
                                                                          >
                                                                            <WithStyles(ForwardRef(ButtonBase))
                                                                              aria-label="Clear"
                                                                              centerRipple={true}
                                                                              className="MuiIconButton-root MuiAutocomplete-clearIndicator"
                                                                              disabled={false}
                                                                              focusRipple={true}
                                                                              onClick={[Function]}
                                                                              tabIndex={-1}
                                                                              title="Clear"
                                                                            >
                                                                              <ForwardRef(ButtonBase)
                                                                                aria-label="Clear"
                                                                                centerRipple={true}
                                                                                className="MuiIconButton-root MuiAutocomplete-clearIndicator"
                                                                                classes={
                                                                                  Object {
                                                                                    "disabled": "Mui-disabled",
                                                                                    "focusVisible": "Mui-focusVisible",
                                                                                    "root": "MuiButtonBase-root",
                                                                                  }
                                                                                }
                                                                                disabled={false}
                                                                                focusRipple={true}
                                                                                onClick={[Function]}
                                                                                tabIndex={-1}
                                                                                title="Clear"
                                                                              >
                                                                                <button
                                                                                  aria-label="Clear"
                                                                                  className="MuiButtonBase-root MuiIconButton-root MuiAutocomplete-clearIndicator"
                                                                                  disabled={false}
                                                                                  onBlur={[Function]}
                                                                                  onClick={[Function]}
                                                                                  onDragLeave={[Function]}
                                                                                  onFocus={[Function]}
                                                                                  onKeyDown={[Function]}
                                                                                  onKeyUp={[Function]}
                                                                                  onMouseDown={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                  onMouseUp={[Function]}
                                                                                  onTouchEnd={[Function]}
                                                                                  onTouchMove={[Function]}
                                                                                  onTouchStart={[Function]}
                                                                                  tabIndex={-1}
                                                                                  title="Clear"
                                                                                  type="button"
                                                                                >
                                                                                  <span
                                                                                    className="MuiIconButton-label"
                                                                                  >
                                                                                    <ForwardRef(CloseIcon)
                                                                                      fontSize="small"
                                                                                    >
                                                                                      <WithStyles(ForwardRef(SvgIcon))
                                                                                        fontSize="small"
                                                                                      >
                                                                                        <ForwardRef(SvgIcon)
                                                                                          classes={
                                                                                            Object {
                                                                                              "colorAction": "MuiSvgIcon-colorAction",
                                                                                              "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                                                              "colorError": "MuiSvgIcon-colorError",
                                                                                              "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                                                              "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                                                              "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                                                              "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                                                              "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                                                              "root": "MuiSvgIcon-root",
                                                                                            }
                                                                                          }
                                                                                          fontSize="small"
                                                                                        >
                                                                                          <svg
                                                                                            aria-hidden={true}
                                                                                            className="MuiSvgIcon-root MuiSvgIcon-fontSizeSmall"
                                                                                            focusable="false"
                                                                                            viewBox="0 0 24 24"
                                                                                          >
                                                                                            <path
                                                                                              d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                                                                                            />
                                                                                          </svg>
                                                                                        </ForwardRef(SvgIcon)>
                                                                                      </WithStyles(ForwardRef(SvgIcon))>
                                                                                    </ForwardRef(CloseIcon)>
                                                                                  </span>
                                                                                  <WithStyles(memo)
                                                                                    center={true}
                                                                                  >
                                                                                    <ForwardRef(TouchRipple)
                                                                                      center={true}
                                                                                      classes={
                                                                                        Object {
                                                                                          "child": "MuiTouchRipple-child",
                                                                                          "childLeaving": "MuiTouchRipple-childLeaving",
                                                                                          "childPulsate": "MuiTouchRipple-childPulsate",
                                                                                          "ripple": "MuiTouchRipple-ripple",
                                                                                          "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                                          "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                                          "root": "MuiTouchRipple-root",
                                                                                        }
                                                                                      }
                                                                                    >
                                                                                      <span
                                                                                        className="MuiTouchRipple-root"
                                                                                      >
                                                                                        <TransitionGroup
                                                                                          childFactory={[Function]}
                                                                                          component={null}
                                                                                          exit={true}
                                                                                        />
                                                                                      </span>
                                                                                    </ForwardRef(TouchRipple)>
                                                                                  </WithStyles(memo)>
                                                                                </button>
                                                                              </ForwardRef(ButtonBase)>
                                                                            </WithStyles(ForwardRef(ButtonBase))>
                                                                          </ForwardRef(IconButton)>
                                                                        </WithStyles(ForwardRef(IconButton))>
                                                                        <WithStyles(ForwardRef(IconButton))
                                                                          aria-label="Open"
                                                                          className="MuiAutocomplete-popupIndicator"
                                                                          disabled={false}
                                                                          onClick={[Function]}
                                                                          tabIndex={-1}
                                                                          title="Open"
                                                                        >
                                                                          <ForwardRef(IconButton)
                                                                            aria-label="Open"
                                                                            className="MuiAutocomplete-popupIndicator"
                                                                            classes={
                                                                              Object {
                                                                                "colorInherit": "MuiIconButton-colorInherit",
                                                                                "colorPrimary": "MuiIconButton-colorPrimary",
                                                                                "colorSecondary": "MuiIconButton-colorSecondary",
                                                                                "disabled": "Mui-disabled",
                                                                                "edgeEnd": "MuiIconButton-edgeEnd",
                                                                                "edgeStart": "MuiIconButton-edgeStart",
                                                                                "label": "MuiIconButton-label",
                                                                                "root": "MuiIconButton-root",
                                                                                "sizeSmall": "MuiIconButton-sizeSmall",
                                                                              }
                                                                            }
                                                                            disabled={false}
                                                                            onClick={[Function]}
                                                                            tabIndex={-1}
                                                                            title="Open"
                                                                          >
                                                                            <WithStyles(ForwardRef(ButtonBase))
                                                                              aria-label="Open"
                                                                              centerRipple={true}
                                                                              className="MuiIconButton-root MuiAutocomplete-popupIndicator"
                                                                              disabled={false}
                                                                              focusRipple={true}
                                                                              onClick={[Function]}
                                                                              tabIndex={-1}
                                                                              title="Open"
                                                                            >
                                                                              <ForwardRef(ButtonBase)
                                                                                aria-label="Open"
                                                                                centerRipple={true}
                                                                                className="MuiIconButton-root MuiAutocomplete-popupIndicator"
                                                                                classes={
                                                                                  Object {
                                                                                    "disabled": "Mui-disabled",
                                                                                    "focusVisible": "Mui-focusVisible",
                                                                                    "root": "MuiButtonBase-root",
                                                                                  }
                                                                                }
                                                                                disabled={false}
                                                                                focusRipple={true}
                                                                                onClick={[Function]}
                                                                                tabIndex={-1}
                                                                                title="Open"
                                                                              >
                                                                                <button
                                                                                  aria-label="Open"
                                                                                  className="MuiButtonBase-root MuiIconButton-root MuiAutocomplete-popupIndicator"
                                                                                  disabled={false}
                                                                                  onBlur={[Function]}
                                                                                  onClick={[Function]}
                                                                                  onDragLeave={[Function]}
                                                                                  onFocus={[Function]}
                                                                                  onKeyDown={[Function]}
                                                                                  onKeyUp={[Function]}
                                                                                  onMouseDown={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                  onMouseUp={[Function]}
                                                                                  onTouchEnd={[Function]}
                                                                                  onTouchMove={[Function]}
                                                                                  onTouchStart={[Function]}
                                                                                  tabIndex={-1}
                                                                                  title="Open"
                                                                                  type="button"
                                                                                >
                                                                                  <span
                                                                                    className="MuiIconButton-label"
                                                                                  />
                                                                                  <WithStyles(memo)
                                                                                    center={true}
                                                                                  >
                                                                                    <ForwardRef(TouchRipple)
                                                                                      center={true}
                                                                                      classes={
                                                                                        Object {
                                                                                          "child": "MuiTouchRipple-child",
                                                                                          "childLeaving": "MuiTouchRipple-childLeaving",
                                                                                          "childPulsate": "MuiTouchRipple-childPulsate",
                                                                                          "ripple": "MuiTouchRipple-ripple",
                                                                                          "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                                          "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                                          "root": "MuiTouchRipple-root",
                                                                                        }
                                                                                      }
                                                                                    >
                                                                                      <span
                                                                                        className="MuiTouchRipple-root"
                                                                                      >
                                                                                        <TransitionGroup
                                                                                          childFactory={[Function]}
                                                                                          component={null}
                                                                                          exit={true}
                                                                                        />
                                                                                      </span>
                                                                                    </ForwardRef(TouchRipple)>
                                                                                  </WithStyles(memo)>
                                                                                </button>
                                                                              </ForwardRef(ButtonBase)>
                                                                            </WithStyles(ForwardRef(ButtonBase))>
                                                                          </ForwardRef(IconButton)>
                                                                        </WithStyles(ForwardRef(IconButton))>
                                                                      </div>
                                                                    </div>
                                                                  </ForwardRef(InputBase)>
                                                                </WithStyles(ForwardRef(InputBase))>
                                                              </ForwardRef(Input)>
                                                            </WithStyles(ForwardRef(Input))>
                                                          </div>
                                                        </ForwardRef(FormControl)>
                                                      </WithStyles(ForwardRef(FormControl))>
                                                    </ForwardRef(TextField)>
                                                  </WithStyles(ForwardRef(TextField))>
                                                </div>
                                              </ForwardRef(Autocomplete)>
                                            </WithStyles(ForwardRef(Autocomplete))>
                                          </Memo(AutoCompleteAsynchronousField)>
                                        </Connect(Component)>
                                      </div>
                                    </ForwardRef(Grid)>
                                  </WithStyles(ForwardRef(Grid))>
                                </div>
                              </ForwardRef(Grid)>
                            </WithStyles(ForwardRef(Grid))>
                            <WithStyles(ForwardRef(Grid))
                              container={true}
                              spacing={1}
                              style={
                                Object {
                                  "marginTop": 8,
                                }
                              }
                            >
                              <ForwardRef(Grid)
                                classes={
                                  Object {
                                    "align-content-xs-center": "MuiGrid-align-content-xs-center",
                                    "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                                    "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                                    "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                                    "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                                    "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                                    "align-items-xs-center": "MuiGrid-align-items-xs-center",
                                    "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                                    "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                                    "container": "MuiGrid-container",
                                    "direction-xs-column": "MuiGrid-direction-xs-column",
                                    "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                                    "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                                    "grid-lg-1": "MuiGrid-grid-lg-1",
                                    "grid-lg-10": "MuiGrid-grid-lg-10",
                                    "grid-lg-11": "MuiGrid-grid-lg-11",
                                    "grid-lg-12": "MuiGrid-grid-lg-12",
                                    "grid-lg-2": "MuiGrid-grid-lg-2",
                                    "grid-lg-3": "MuiGrid-grid-lg-3",
                                    "grid-lg-4": "MuiGrid-grid-lg-4",
                                    "grid-lg-5": "MuiGrid-grid-lg-5",
                                    "grid-lg-6": "MuiGrid-grid-lg-6",
                                    "grid-lg-7": "MuiGrid-grid-lg-7",
                                    "grid-lg-8": "MuiGrid-grid-lg-8",
                                    "grid-lg-9": "MuiGrid-grid-lg-9",
                                    "grid-lg-auto": "MuiGrid-grid-lg-auto",
                                    "grid-lg-true": "MuiGrid-grid-lg-true",
                                    "grid-md-1": "MuiGrid-grid-md-1",
                                    "grid-md-10": "MuiGrid-grid-md-10",
                                    "grid-md-11": "MuiGrid-grid-md-11",
                                    "grid-md-12": "MuiGrid-grid-md-12",
                                    "grid-md-2": "MuiGrid-grid-md-2",
                                    "grid-md-3": "MuiGrid-grid-md-3",
                                    "grid-md-4": "MuiGrid-grid-md-4",
                                    "grid-md-5": "MuiGrid-grid-md-5",
                                    "grid-md-6": "MuiGrid-grid-md-6",
                                    "grid-md-7": "MuiGrid-grid-md-7",
                                    "grid-md-8": "MuiGrid-grid-md-8",
                                    "grid-md-9": "MuiGrid-grid-md-9",
                                    "grid-md-auto": "MuiGrid-grid-md-auto",
                                    "grid-md-true": "MuiGrid-grid-md-true",
                                    "grid-sm-1": "MuiGrid-grid-sm-1",
                                    "grid-sm-10": "MuiGrid-grid-sm-10",
                                    "grid-sm-11": "MuiGrid-grid-sm-11",
                                    "grid-sm-12": "MuiGrid-grid-sm-12",
                                    "grid-sm-2": "MuiGrid-grid-sm-2",
                                    "grid-sm-3": "MuiGrid-grid-sm-3",
                                    "grid-sm-4": "MuiGrid-grid-sm-4",
                                    "grid-sm-5": "MuiGrid-grid-sm-5",
                                    "grid-sm-6": "MuiGrid-grid-sm-6",
                                    "grid-sm-7": "MuiGrid-grid-sm-7",
                                    "grid-sm-8": "MuiGrid-grid-sm-8",
                                    "grid-sm-9": "MuiGrid-grid-sm-9",
                                    "grid-sm-auto": "MuiGrid-grid-sm-auto",
                                    "grid-sm-true": "MuiGrid-grid-sm-true",
                                    "grid-xl-1": "MuiGrid-grid-xl-1",
                                    "grid-xl-10": "MuiGrid-grid-xl-10",
                                    "grid-xl-11": "MuiGrid-grid-xl-11",
                                    "grid-xl-12": "MuiGrid-grid-xl-12",
                                    "grid-xl-2": "MuiGrid-grid-xl-2",
                                    "grid-xl-3": "MuiGrid-grid-xl-3",
                                    "grid-xl-4": "MuiGrid-grid-xl-4",
                                    "grid-xl-5": "MuiGrid-grid-xl-5",
                                    "grid-xl-6": "MuiGrid-grid-xl-6",
                                    "grid-xl-7": "MuiGrid-grid-xl-7",
                                    "grid-xl-8": "MuiGrid-grid-xl-8",
                                    "grid-xl-9": "MuiGrid-grid-xl-9",
                                    "grid-xl-auto": "MuiGrid-grid-xl-auto",
                                    "grid-xl-true": "MuiGrid-grid-xl-true",
                                    "grid-xs-1": "MuiGrid-grid-xs-1",
                                    "grid-xs-10": "MuiGrid-grid-xs-10",
                                    "grid-xs-11": "MuiGrid-grid-xs-11",
                                    "grid-xs-12": "MuiGrid-grid-xs-12",
                                    "grid-xs-2": "MuiGrid-grid-xs-2",
                                    "grid-xs-3": "MuiGrid-grid-xs-3",
                                    "grid-xs-4": "MuiGrid-grid-xs-4",
                                    "grid-xs-5": "MuiGrid-grid-xs-5",
                                    "grid-xs-6": "MuiGrid-grid-xs-6",
                                    "grid-xs-7": "MuiGrid-grid-xs-7",
                                    "grid-xs-8": "MuiGrid-grid-xs-8",
                                    "grid-xs-9": "MuiGrid-grid-xs-9",
                                    "grid-xs-auto": "MuiGrid-grid-xs-auto",
                                    "grid-xs-true": "MuiGrid-grid-xs-true",
                                    "item": "MuiGrid-item",
                                    "justify-xs-center": "MuiGrid-justify-xs-center",
                                    "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                                    "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                                    "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                                    "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                                    "root": "MuiGrid-root",
                                    "spacing-xs-1": "MuiGrid-spacing-xs-1",
                                    "spacing-xs-10": "MuiGrid-spacing-xs-10",
                                    "spacing-xs-2": "MuiGrid-spacing-xs-2",
                                    "spacing-xs-3": "MuiGrid-spacing-xs-3",
                                    "spacing-xs-4": "MuiGrid-spacing-xs-4",
                                    "spacing-xs-5": "MuiGrid-spacing-xs-5",
                                    "spacing-xs-6": "MuiGrid-spacing-xs-6",
                                    "spacing-xs-7": "MuiGrid-spacing-xs-7",
                                    "spacing-xs-8": "MuiGrid-spacing-xs-8",
                                    "spacing-xs-9": "MuiGrid-spacing-xs-9",
                                    "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                                    "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                                    "zeroMinWidth": "MuiGrid-zeroMinWidth",
                                  }
                                }
                                container={true}
                                spacing={1}
                                style={
                                  Object {
                                    "marginTop": 8,
                                  }
                                }
                              >
                                <div
                                  className="MuiGrid-root MuiGrid-container MuiGrid-spacing-xs-1"
                                  style={
                                    Object {
                                      "marginTop": 8,
                                    }
                                  }
                                >
                                  <WithStyles(ForwardRef(Grid))
                                    item={true}
                                    style={
                                      Object {
                                        "marginBottom": 8,
                                      }
                                    }
                                    xs={6}
                                  >
                                    <ForwardRef(Grid)
                                      classes={
                                        Object {
                                          "align-content-xs-center": "MuiGrid-align-content-xs-center",
                                          "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                                          "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                                          "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                                          "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                                          "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                                          "align-items-xs-center": "MuiGrid-align-items-xs-center",
                                          "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                                          "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                                          "container": "MuiGrid-container",
                                          "direction-xs-column": "MuiGrid-direction-xs-column",
                                          "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                                          "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                                          "grid-lg-1": "MuiGrid-grid-lg-1",
                                          "grid-lg-10": "MuiGrid-grid-lg-10",
                                          "grid-lg-11": "MuiGrid-grid-lg-11",
                                          "grid-lg-12": "MuiGrid-grid-lg-12",
                                          "grid-lg-2": "MuiGrid-grid-lg-2",
                                          "grid-lg-3": "MuiGrid-grid-lg-3",
                                          "grid-lg-4": "MuiGrid-grid-lg-4",
                                          "grid-lg-5": "MuiGrid-grid-lg-5",
                                          "grid-lg-6": "MuiGrid-grid-lg-6",
                                          "grid-lg-7": "MuiGrid-grid-lg-7",
                                          "grid-lg-8": "MuiGrid-grid-lg-8",
                                          "grid-lg-9": "MuiGrid-grid-lg-9",
                                          "grid-lg-auto": "MuiGrid-grid-lg-auto",
                                          "grid-lg-true": "MuiGrid-grid-lg-true",
                                          "grid-md-1": "MuiGrid-grid-md-1",
                                          "grid-md-10": "MuiGrid-grid-md-10",
                                          "grid-md-11": "MuiGrid-grid-md-11",
                                          "grid-md-12": "MuiGrid-grid-md-12",
                                          "grid-md-2": "MuiGrid-grid-md-2",
                                          "grid-md-3": "MuiGrid-grid-md-3",
                                          "grid-md-4": "MuiGrid-grid-md-4",
                                          "grid-md-5": "MuiGrid-grid-md-5",
                                          "grid-md-6": "MuiGrid-grid-md-6",
                                          "grid-md-7": "MuiGrid-grid-md-7",
                                          "grid-md-8": "MuiGrid-grid-md-8",
                                          "grid-md-9": "MuiGrid-grid-md-9",
                                          "grid-md-auto": "MuiGrid-grid-md-auto",
                                          "grid-md-true": "MuiGrid-grid-md-true",
                                          "grid-sm-1": "MuiGrid-grid-sm-1",
                                          "grid-sm-10": "MuiGrid-grid-sm-10",
                                          "grid-sm-11": "MuiGrid-grid-sm-11",
                                          "grid-sm-12": "MuiGrid-grid-sm-12",
                                          "grid-sm-2": "MuiGrid-grid-sm-2",
                                          "grid-sm-3": "MuiGrid-grid-sm-3",
                                          "grid-sm-4": "MuiGrid-grid-sm-4",
                                          "grid-sm-5": "MuiGrid-grid-sm-5",
                                          "grid-sm-6": "MuiGrid-grid-sm-6",
                                          "grid-sm-7": "MuiGrid-grid-sm-7",
                                          "grid-sm-8": "MuiGrid-grid-sm-8",
                                          "grid-sm-9": "MuiGrid-grid-sm-9",
                                          "grid-sm-auto": "MuiGrid-grid-sm-auto",
                                          "grid-sm-true": "MuiGrid-grid-sm-true",
                                          "grid-xl-1": "MuiGrid-grid-xl-1",
                                          "grid-xl-10": "MuiGrid-grid-xl-10",
                                          "grid-xl-11": "MuiGrid-grid-xl-11",
                                          "grid-xl-12": "MuiGrid-grid-xl-12",
                                          "grid-xl-2": "MuiGrid-grid-xl-2",
                                          "grid-xl-3": "MuiGrid-grid-xl-3",
                                          "grid-xl-4": "MuiGrid-grid-xl-4",
                                          "grid-xl-5": "MuiGrid-grid-xl-5",
                                          "grid-xl-6": "MuiGrid-grid-xl-6",
                                          "grid-xl-7": "MuiGrid-grid-xl-7",
                                          "grid-xl-8": "MuiGrid-grid-xl-8",
                                          "grid-xl-9": "MuiGrid-grid-xl-9",
                                          "grid-xl-auto": "MuiGrid-grid-xl-auto",
                                          "grid-xl-true": "MuiGrid-grid-xl-true",
                                          "grid-xs-1": "MuiGrid-grid-xs-1",
                                          "grid-xs-10": "MuiGrid-grid-xs-10",
                                          "grid-xs-11": "MuiGrid-grid-xs-11",
                                          "grid-xs-12": "MuiGrid-grid-xs-12",
                                          "grid-xs-2": "MuiGrid-grid-xs-2",
                                          "grid-xs-3": "MuiGrid-grid-xs-3",
                                          "grid-xs-4": "MuiGrid-grid-xs-4",
                                          "grid-xs-5": "MuiGrid-grid-xs-5",
                                          "grid-xs-6": "MuiGrid-grid-xs-6",
                                          "grid-xs-7": "MuiGrid-grid-xs-7",
                                          "grid-xs-8": "MuiGrid-grid-xs-8",
                                          "grid-xs-9": "MuiGrid-grid-xs-9",
                                          "grid-xs-auto": "MuiGrid-grid-xs-auto",
                                          "grid-xs-true": "MuiGrid-grid-xs-true",
                                          "item": "MuiGrid-item",
                                          "justify-xs-center": "MuiGrid-justify-xs-center",
                                          "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                                          "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                                          "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                                          "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                                          "root": "MuiGrid-root",
                                          "spacing-xs-1": "MuiGrid-spacing-xs-1",
                                          "spacing-xs-10": "MuiGrid-spacing-xs-10",
                                          "spacing-xs-2": "MuiGrid-spacing-xs-2",
                                          "spacing-xs-3": "MuiGrid-spacing-xs-3",
                                          "spacing-xs-4": "MuiGrid-spacing-xs-4",
                                          "spacing-xs-5": "MuiGrid-spacing-xs-5",
                                          "spacing-xs-6": "MuiGrid-spacing-xs-6",
                                          "spacing-xs-7": "MuiGrid-spacing-xs-7",
                                          "spacing-xs-8": "MuiGrid-spacing-xs-8",
                                          "spacing-xs-9": "MuiGrid-spacing-xs-9",
                                          "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                                          "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                                          "zeroMinWidth": "MuiGrid-zeroMinWidth",
                                        }
                                      }
                                      item={true}
                                      style={
                                        Object {
                                          "marginBottom": 8,
                                        }
                                      }
                                      xs={6}
                                    >
                                      <div
                                        className="MuiGrid-root MuiGrid-item MuiGrid-grid-xs-6"
                                        style={
                                          Object {
                                            "marginBottom": 8,
                                          }
                                        }
                                      >
                                        <WithStyles(ForwardRef(Button))
                                          color="primary"
                                          data-testid="test-add"
                                          disabled={true}
                                          fullWidth={true}
                                          id="test-add"
                                          onClick={[Function]}
                                          variant="contained"
                                        >
                                          <ForwardRef(Button)
                                            classes={
                                              Object {
                                                "colorInherit": "MuiButton-colorInherit",
                                                "contained": "MuiButton-contained",
                                                "containedPrimary": "MuiButton-containedPrimary",
                                                "containedSecondary": "MuiButton-containedSecondary",
                                                "containedSizeLarge": "MuiButton-containedSizeLarge",
                                                "containedSizeSmall": "MuiButton-containedSizeSmall",
                                                "disableElevation": "MuiButton-disableElevation",
                                                "disabled": "Mui-disabled",
                                                "endIcon": "MuiButton-endIcon",
                                                "focusVisible": "Mui-focusVisible",
                                                "fullWidth": "MuiButton-fullWidth",
                                                "iconSizeLarge": "MuiButton-iconSizeLarge",
                                                "iconSizeMedium": "MuiButton-iconSizeMedium",
                                                "iconSizeSmall": "MuiButton-iconSizeSmall",
                                                "label": "MuiButton-label",
                                                "outlined": "MuiButton-outlined",
                                                "outlinedPrimary": "MuiButton-outlinedPrimary",
                                                "outlinedSecondary": "MuiButton-outlinedSecondary",
                                                "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                                "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                                "root": "MuiButton-root",
                                                "sizeLarge": "MuiButton-sizeLarge",
                                                "sizeSmall": "MuiButton-sizeSmall",
                                                "startIcon": "MuiButton-startIcon",
                                                "text": "MuiButton-text",
                                                "textPrimary": "MuiButton-textPrimary",
                                                "textSecondary": "MuiButton-textSecondary",
                                                "textSizeLarge": "MuiButton-textSizeLarge",
                                                "textSizeSmall": "MuiButton-textSizeSmall",
                                              }
                                            }
                                            color="primary"
                                            data-testid="test-add"
                                            disabled={true}
                                            fullWidth={true}
                                            id="test-add"
                                            onClick={[Function]}
                                            variant="contained"
                                          >
                                            <WithStyles(ForwardRef(ButtonBase))
                                              className="MuiButton-root MuiButton-contained MuiButton-containedPrimary Mui-disabled MuiButton-fullWidth"
                                              component="button"
                                              data-testid="test-add"
                                              disabled={true}
                                              focusRipple={true}
                                              focusVisibleClassName="Mui-focusVisible"
                                              id="test-add"
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <ForwardRef(ButtonBase)
                                                className="MuiButton-root MuiButton-contained MuiButton-containedPrimary Mui-disabled MuiButton-fullWidth"
                                                classes={
                                                  Object {
                                                    "disabled": "Mui-disabled",
                                                    "focusVisible": "Mui-focusVisible",
                                                    "root": "MuiButtonBase-root",
                                                  }
                                                }
                                                component="button"
                                                data-testid="test-add"
                                                disabled={true}
                                                focusRipple={true}
                                                focusVisibleClassName="Mui-focusVisible"
                                                id="test-add"
                                                onClick={[Function]}
                                                type="button"
                                              >
                                                <button
                                                  className="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary Mui-disabled MuiButton-fullWidth Mui-disabled"
                                                  data-testid="test-add"
                                                  disabled={true}
                                                  id="test-add"
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onDragLeave={[Function]}
                                                  onFocus={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  onMouseDown={[Function]}
                                                  onMouseLeave={[Function]}
                                                  onMouseUp={[Function]}
                                                  onTouchEnd={[Function]}
                                                  onTouchMove={[Function]}
                                                  onTouchStart={[Function]}
                                                  tabIndex={-1}
                                                  type="button"
                                                >
                                                  <span
                                                    className="MuiButton-label"
                                                  >
                                                    Add author
                                                  </span>
                                                </button>
                                              </ForwardRef(ButtonBase)>
                                            </WithStyles(ForwardRef(ButtonBase))>
                                          </ForwardRef(Button)>
                                        </WithStyles(ForwardRef(Button))>
                                      </div>
                                    </ForwardRef(Grid)>
                                  </WithStyles(ForwardRef(Grid))>
                                  <WithStyles(ForwardRef(Grid))
                                    item={true}
                                    style={
                                      Object {
                                        "marginBottom": 8,
                                      }
                                    }
                                    xs={6}
                                  >
                                    <ForwardRef(Grid)
                                      classes={
                                        Object {
                                          "align-content-xs-center": "MuiGrid-align-content-xs-center",
                                          "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                                          "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                                          "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                                          "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                                          "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                                          "align-items-xs-center": "MuiGrid-align-items-xs-center",
                                          "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                                          "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                                          "container": "MuiGrid-container",
                                          "direction-xs-column": "MuiGrid-direction-xs-column",
                                          "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                                          "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                                          "grid-lg-1": "MuiGrid-grid-lg-1",
                                          "grid-lg-10": "MuiGrid-grid-lg-10",
                                          "grid-lg-11": "MuiGrid-grid-lg-11",
                                          "grid-lg-12": "MuiGrid-grid-lg-12",
                                          "grid-lg-2": "MuiGrid-grid-lg-2",
                                          "grid-lg-3": "MuiGrid-grid-lg-3",
                                          "grid-lg-4": "MuiGrid-grid-lg-4",
                                          "grid-lg-5": "MuiGrid-grid-lg-5",
                                          "grid-lg-6": "MuiGrid-grid-lg-6",
                                          "grid-lg-7": "MuiGrid-grid-lg-7",
                                          "grid-lg-8": "MuiGrid-grid-lg-8",
                                          "grid-lg-9": "MuiGrid-grid-lg-9",
                                          "grid-lg-auto": "MuiGrid-grid-lg-auto",
                                          "grid-lg-true": "MuiGrid-grid-lg-true",
                                          "grid-md-1": "MuiGrid-grid-md-1",
                                          "grid-md-10": "MuiGrid-grid-md-10",
                                          "grid-md-11": "MuiGrid-grid-md-11",
                                          "grid-md-12": "MuiGrid-grid-md-12",
                                          "grid-md-2": "MuiGrid-grid-md-2",
                                          "grid-md-3": "MuiGrid-grid-md-3",
                                          "grid-md-4": "MuiGrid-grid-md-4",
                                          "grid-md-5": "MuiGrid-grid-md-5",
                                          "grid-md-6": "MuiGrid-grid-md-6",
                                          "grid-md-7": "MuiGrid-grid-md-7",
                                          "grid-md-8": "MuiGrid-grid-md-8",
                                          "grid-md-9": "MuiGrid-grid-md-9",
                                          "grid-md-auto": "MuiGrid-grid-md-auto",
                                          "grid-md-true": "MuiGrid-grid-md-true",
                                          "grid-sm-1": "MuiGrid-grid-sm-1",
                                          "grid-sm-10": "MuiGrid-grid-sm-10",
                                          "grid-sm-11": "MuiGrid-grid-sm-11",
                                          "grid-sm-12": "MuiGrid-grid-sm-12",
                                          "grid-sm-2": "MuiGrid-grid-sm-2",
                                          "grid-sm-3": "MuiGrid-grid-sm-3",
                                          "grid-sm-4": "MuiGrid-grid-sm-4",
                                          "grid-sm-5": "MuiGrid-grid-sm-5",
                                          "grid-sm-6": "MuiGrid-grid-sm-6",
                                          "grid-sm-7": "MuiGrid-grid-sm-7",
                                          "grid-sm-8": "MuiGrid-grid-sm-8",
                                          "grid-sm-9": "MuiGrid-grid-sm-9",
                                          "grid-sm-auto": "MuiGrid-grid-sm-auto",
                                          "grid-sm-true": "MuiGrid-grid-sm-true",
                                          "grid-xl-1": "MuiGrid-grid-xl-1",
                                          "grid-xl-10": "MuiGrid-grid-xl-10",
                                          "grid-xl-11": "MuiGrid-grid-xl-11",
                                          "grid-xl-12": "MuiGrid-grid-xl-12",
                                          "grid-xl-2": "MuiGrid-grid-xl-2",
                                          "grid-xl-3": "MuiGrid-grid-xl-3",
                                          "grid-xl-4": "MuiGrid-grid-xl-4",
                                          "grid-xl-5": "MuiGrid-grid-xl-5",
                                          "grid-xl-6": "MuiGrid-grid-xl-6",
                                          "grid-xl-7": "MuiGrid-grid-xl-7",
                                          "grid-xl-8": "MuiGrid-grid-xl-8",
                                          "grid-xl-9": "MuiGrid-grid-xl-9",
                                          "grid-xl-auto": "MuiGrid-grid-xl-auto",
                                          "grid-xl-true": "MuiGrid-grid-xl-true",
                                          "grid-xs-1": "MuiGrid-grid-xs-1",
                                          "grid-xs-10": "MuiGrid-grid-xs-10",
                                          "grid-xs-11": "MuiGrid-grid-xs-11",
                                          "grid-xs-12": "MuiGrid-grid-xs-12",
                                          "grid-xs-2": "MuiGrid-grid-xs-2",
                                          "grid-xs-3": "MuiGrid-grid-xs-3",
                                          "grid-xs-4": "MuiGrid-grid-xs-4",
                                          "grid-xs-5": "MuiGrid-grid-xs-5",
                                          "grid-xs-6": "MuiGrid-grid-xs-6",
                                          "grid-xs-7": "MuiGrid-grid-xs-7",
                                          "grid-xs-8": "MuiGrid-grid-xs-8",
                                          "grid-xs-9": "MuiGrid-grid-xs-9",
                                          "grid-xs-auto": "MuiGrid-grid-xs-auto",
                                          "grid-xs-true": "MuiGrid-grid-xs-true",
                                          "item": "MuiGrid-item",
                                          "justify-xs-center": "MuiGrid-justify-xs-center",
                                          "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                                          "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                                          "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                                          "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                                          "root": "MuiGrid-root",
                                          "spacing-xs-1": "MuiGrid-spacing-xs-1",
                                          "spacing-xs-10": "MuiGrid-spacing-xs-10",
                                          "spacing-xs-2": "MuiGrid-spacing-xs-2",
                                          "spacing-xs-3": "MuiGrid-spacing-xs-3",
                                          "spacing-xs-4": "MuiGrid-spacing-xs-4",
                                          "spacing-xs-5": "MuiGrid-spacing-xs-5",
                                          "spacing-xs-6": "MuiGrid-spacing-xs-6",
                                          "spacing-xs-7": "MuiGrid-spacing-xs-7",
                                          "spacing-xs-8": "MuiGrid-spacing-xs-8",
                                          "spacing-xs-9": "MuiGrid-spacing-xs-9",
                                          "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                                          "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                                          "zeroMinWidth": "MuiGrid-zeroMinWidth",
                                        }
                                      }
                                      item={true}
                                      style={
                                        Object {
                                          "marginBottom": 8,
                                        }
                                      }
                                      xs={6}
                                    >
                                      <div
                                        className="MuiGrid-root MuiGrid-item MuiGrid-grid-xs-6"
                                        style={
                                          Object {
                                            "marginBottom": 8,
                                          }
                                        }
                                      >
                                        <WithStyles(ForwardRef(Button))
                                          color="primary"
                                          data-testid="test-cancel"
                                          disabled={true}
                                          fullWidth={true}
                                          id="test-cancel"
                                          onClick={[Function]}
                                          variant="contained"
                                        >
                                          <ForwardRef(Button)
                                            classes={
                                              Object {
                                                "colorInherit": "MuiButton-colorInherit",
                                                "contained": "MuiButton-contained",
                                                "containedPrimary": "MuiButton-containedPrimary",
                                                "containedSecondary": "MuiButton-containedSecondary",
                                                "containedSizeLarge": "MuiButton-containedSizeLarge",
                                                "containedSizeSmall": "MuiButton-containedSizeSmall",
                                                "disableElevation": "MuiButton-disableElevation",
                                                "disabled": "Mui-disabled",
                                                "endIcon": "MuiButton-endIcon",
                                                "focusVisible": "Mui-focusVisible",
                                                "fullWidth": "MuiButton-fullWidth",
                                                "iconSizeLarge": "MuiButton-iconSizeLarge",
                                                "iconSizeMedium": "MuiButton-iconSizeMedium",
                                                "iconSizeSmall": "MuiButton-iconSizeSmall",
                                                "label": "MuiButton-label",
                                                "outlined": "MuiButton-outlined",
                                                "outlinedPrimary": "MuiButton-outlinedPrimary",
                                                "outlinedSecondary": "MuiButton-outlinedSecondary",
                                                "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                                "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                                "root": "MuiButton-root",
                                                "sizeLarge": "MuiButton-sizeLarge",
                                                "sizeSmall": "MuiButton-sizeSmall",
                                                "startIcon": "MuiButton-startIcon",
                                                "text": "MuiButton-text",
                                                "textPrimary": "MuiButton-textPrimary",
                                                "textSecondary": "MuiButton-textSecondary",
                                                "textSizeLarge": "MuiButton-textSizeLarge",
                                                "textSizeSmall": "MuiButton-textSizeSmall",
                                              }
                                            }
                                            color="primary"
                                            data-testid="test-cancel"
                                            disabled={true}
                                            fullWidth={true}
                                            id="test-cancel"
                                            onClick={[Function]}
                                            variant="contained"
                                          >
                                            <WithStyles(ForwardRef(ButtonBase))
                                              className="MuiButton-root MuiButton-contained MuiButton-containedPrimary Mui-disabled MuiButton-fullWidth"
                                              component="button"
                                              data-testid="test-cancel"
                                              disabled={true}
                                              focusRipple={true}
                                              focusVisibleClassName="Mui-focusVisible"
                                              id="test-cancel"
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <ForwardRef(ButtonBase)
                                                className="MuiButton-root MuiButton-contained MuiButton-containedPrimary Mui-disabled MuiButton-fullWidth"
                                                classes={
                                                  Object {
                                                    "disabled": "Mui-disabled",
                                                    "focusVisible": "Mui-focusVisible",
                                                    "root": "MuiButtonBase-root",
                                                  }
                                                }
                                                component="button"
                                                data-testid="test-cancel"
                                                disabled={true}
                                                focusRipple={true}
                                                focusVisibleClassName="Mui-focusVisible"
                                                id="test-cancel"
                                                onClick={[Function]}
                                                type="button"
                                              >
                                                <button
                                                  className="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary Mui-disabled MuiButton-fullWidth Mui-disabled"
                                                  data-testid="test-cancel"
                                                  disabled={true}
                                                  id="test-cancel"
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onDragLeave={[Function]}
                                                  onFocus={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  onMouseDown={[Function]}
                                                  onMouseLeave={[Function]}
                                                  onMouseUp={[Function]}
                                                  onTouchEnd={[Function]}
                                                  onTouchMove={[Function]}
                                                  onTouchStart={[Function]}
                                                  tabIndex={-1}
                                                  type="button"
                                                >
                                                  <span
                                                    className="MuiButton-label"
                                                  >
                                                    Cancel
                                                  </span>
                                                </button>
                                              </ForwardRef(ButtonBase)>
                                            </WithStyles(ForwardRef(ButtonBase))>
                                          </ForwardRef(Button)>
                                        </WithStyles(ForwardRef(Button))>
                                      </div>
                                    </ForwardRef(Grid)>
                                  </WithStyles(ForwardRef(Grid))>
                                </div>
                              </ForwardRef(Grid)>
                            </WithStyles(ForwardRef(Grid))>
                          </ContributorForm>
                        </div>
                      </ForwardRef(Grid)>
                    </WithStyles(ForwardRef(Grid))>
                  </div>
                </ForwardRef(Grid)>
              </WithStyles(ForwardRef(Grid))>
            </div>
          </ContributorsEditor>
        </MuiPickersUtilsProvider>
      </ThemeProvider>
    </Router>
  </MemoryRouter>
</Provider>
`;

exports[`ContributorsEditor renders full component with NTRO fields 1`] = `
<Provider
  store={
    Object {
      "dispatch": [MockFunction],
      "getState": [MockFunction] {
        "calls": Array [
          Array [],
          Array [],
          Array [],
          Array [],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
        ],
      },
      "subscribe": [MockFunction] {
        "calls": Array [
          Array [
            [Function],
          ],
          Array [
            [Function],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "key": "testKey",
          "pathname": "/",
        },
      ]
    }
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "testKey",
              "pathname": "/",
              "search": "",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "testKey",
            "pathname": "/",
            "search": "",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <ThemeProvider
        theme={
          Object {
            "breakpoints": Object {
              "between": [Function],
              "down": [Function],
              "keys": Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ],
              "only": [Function],
              "up": [Function],
              "values": Object {
                "lg": 1280,
                "md": 960,
                "sm": 600,
                "xl": 1920,
                "xs": 0,
              },
              "width": [Function],
            },
            "direction": "ltr",
            "graphs": Object {
              "color1": "#d72865",
              "color2": "#1e7d94",
              "color3": "#49075E",
              "color4": "#468fcc",
              "color5": "#f28620",
              "color6": "#333333",
              "color7": "#595959",
            },
            "hexToRGBA": [Function],
            "mixins": Object {
              "gutters": [Function],
              "toolbar": Object {
                "@media (min-width:0px) and (orientation: landscape)": Object {
                  "minHeight": 48,
                },
                "@media (min-width:600px)": Object {
                  "minHeight": 64,
                },
                "minHeight": 56,
              },
            },
            "overrides": Object {
              "MUIDataTable": Object {
                "paper": Object {
                  "boxShadow": "none",
                  "margin": 0,
                  "padding": 0,
                },
              },
              "MuiFormLabel": Object {
                "root": Object {
                  "overflow": "hidden",
                  "textOverflow": "ellipsis",
                  "whiteSpace": "nowrap",
                  "width": "100%",
                },
              },
              "MuiIconButton": Object {
                "colorInherit": Object {
                  "color": "none",
                },
              },
              "MuiMenuItem": Object {
                "root": Object {
                  "&$selected": Object {
                    "backgroundColor": "#4085C6 !important",
                    "color": "#FFFFFF",
                  },
                },
              },
            },
            "palette": Object {
              "accent": Object {
                "dark": "#2a557d",
                "light": "#54acff",
                "main": "#316799",
              },
              "action": Object {
                "activatedOpacity": 0.12,
                "active": "rgba(0, 0, 0, 0.54)",
                "disabled": "rgba(0, 0, 0, 0.26)",
                "disabledBackground": "rgba(0, 0, 0, 0.12)",
                "disabledOpacity": 0.38,
                "focus": "rgba(0, 0, 0, 0.12)",
                "focusOpacity": 0.12,
                "hover": "rgba(0, 0, 0, 0.04)",
                "hoverOpacity": 0.04,
                "selected": "rgba(0, 0, 0, 0.08)",
                "selectedOpacity": 0.08,
              },
              "augmentColor": [Function],
              "background": Object {
                "default": "#fafafa",
                "paper": "#fff",
              },
              "common": Object {
                "black": "#000",
                "white": "#fff",
              },
              "contrastThreshold": 3,
              "divider": "rgba(0, 0, 0, 0.12)",
              "error": Object {
                "contrastText": "#fff",
                "dark": "#790000",
                "light": "#ff0000",
                "main": "#c80000",
              },
              "getContrastText": [Function],
              "grey": Object {
                "100": "#f5f5f5",
                "200": "#eeeeee",
                "300": "#e0e0e0",
                "400": "#bdbdbd",
                "50": "#fafafa",
                "500": "#9e9e9e",
                "600": "#757575",
                "700": "#616161",
                "800": "#424242",
                "900": "#212121",
                "A100": "#d5d5d5",
                "A200": "#aaaaaa",
                "A400": "#303030",
                "A700": "#616161",
              },
              "info": Object {
                "contrastText": "#fff",
                "dark": "#1976d2",
                "light": "#64b5f6",
                "main": "#2196f3",
              },
              "primary": Object {
                "contrastText": "#fff",
                "dark": "#3b1a59",
                "gradient": Object {
                  "diagonal": Object {
                    "background": "linear-gradient(135deg, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                    "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                  },
                  "horizontal": Object {
                    "background": "linear-gradient(to right, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                    "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                  },
                },
                "light": "#962A8B",
                "main": "#51247A",
              },
              "secondary": Object {
                "contrastText": "#fff",
                "dark": "#333333",
                "light": "#f2f2f2",
                "main": "#595959",
              },
              "success": Object {
                "contrastText": "#fff",
                "dark": "#005000",
                "light": "#00a700",
                "main": "#007200",
              },
              "text": Object {
                "disabled": "rgba(0, 0, 0, 0.38)",
                "hint": "rgba(0, 0, 0, 0.38)",
                "primary": "rgba(0, 0, 0, 0.87)",
                "secondary": "rgba(0, 0, 0, 0.54)",
              },
              "tonalOffset": 0.2,
              "type": "light",
              "warning": Object {
                "contrastText": "#fff",
                "dark": "#542400",
                "light": "#ff9a57",
                "main": "#bf5000",
              },
              "white": Object {
                "main": "#FFFFFF",
              },
            },
            "props": Object {},
            "shadows": Array [
              "none",
              "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
              "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
              "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
              "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
              "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
              "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
              "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
              "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
              "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
              "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
              "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
              "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
              "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
              "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
              "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
              "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
              "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
              "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
            ],
            "shape": Object {
              "borderRadius": 4,
            },
            "spacing": [Function],
            "status": Object {
              "danger": "#f44336",
              "warning": "#ff9800",
            },
            "transitions": Object {
              "create": [Function],
              "duration": Object {
                "complex": 375,
                "enteringScreen": 225,
                "leavingScreen": 195,
                "short": 250,
                "shorter": 200,
                "shortest": 150,
                "standard": 300,
              },
              "easing": Object {
                "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
              },
              "getAutoHeightDuration": [Function],
            },
            "typography": Object {
              "body1": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1rem",
                "fontWeight": 300,
                "letterSpacing": "0.00938em",
                "lineHeight": 1.5,
              },
              "body2": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 300,
                "letterSpacing": "0.01071em",
                "lineHeight": 1.43,
              },
              "button": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 400,
                "letterSpacing": "0.02857em",
                "lineHeight": 1.75,
                "textTransform": "uppercase",
              },
              "caption": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 300,
                "letterSpacing": "0.03333em",
                "lineHeight": 1.66,
              },
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": 14,
              "fontWeightBold": 700,
              "fontWeightLight": 200,
              "fontWeightMedium": 400,
              "fontWeightRegular": 300,
              "h1": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "6rem",
                "fontWeight": 200,
                "letterSpacing": "-0.01562em",
                "lineHeight": 1.167,
              },
              "h2": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "3.75rem",
                "fontWeight": 200,
                "letterSpacing": "-0.00833em",
                "lineHeight": 1.2,
              },
              "h3": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "3rem",
                "fontWeight": 300,
                "letterSpacing": "0em",
                "lineHeight": 1.167,
              },
              "h4": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "2.125rem",
                "fontWeight": 300,
                "letterSpacing": "0.00735em",
                "lineHeight": 1.235,
              },
              "h5": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1.5rem",
                "fontWeight": 300,
                "letterSpacing": "0em",
                "lineHeight": 1.334,
              },
              "h6": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1.25rem",
                "fontWeight": 400,
                "letterSpacing": "0.0075em",
                "lineHeight": 1.6,
              },
              "htmlFontSize": 16,
              "overline": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 300,
                "letterSpacing": "0.08333em",
                "lineHeight": 2.66,
                "textTransform": "uppercase",
              },
              "pxToRem": [Function],
              "round": [Function],
              "subtitle1": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1rem",
                "fontWeight": 300,
                "letterSpacing": "0.00938em",
                "lineHeight": 1.75,
              },
              "subtitle2": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 400,
                "letterSpacing": "0.00714em",
                "lineHeight": 1.57,
              },
              "suppressDeprecationWarnings": true,
              "useNextVariants": true,
            },
            "zIndex": Object {
              "appBar": 1100,
              "drawer": 1200,
              "mobileStepper": 1000,
              "modal": 1300,
              "snackbar": 1400,
              "speedDial": 1050,
              "tooltip": 1500,
            },
            Symbol(mui.nested): false,
          }
        }
      >
        <MuiPickersUtilsProvider
          utils={[Function]}
        >
          <ContributorsEditor
            author={
              Object {
                "aut_id": 1,
              }
            }
            canEdit={false}
            classes={
              Object {
                "list": "list",
                "scroll": "scroll",
              }
            }
            contributorEditorId="test"
            editMode={false}
            hideDelete={false}
            hideReorder={false}
            isNtro={true}
            locale={
              Object {
                "errorMessage": "Unable to add an item with the same identifier.",
                "errorTitle": "Error",
              }
            }
            showContributorAssignment={false}
            showIdentifierLookup={false}
            showRoleInput={false}
          >
            <div
              className="contributorEditor"
              id="test-list-editor"
            >
              <WithStyles(ForwardRef(Grid))
                container={true}
                spacing={1}
              >
                <ForwardRef(Grid)
                  classes={
                    Object {
                      "align-content-xs-center": "MuiGrid-align-content-xs-center",
                      "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                      "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                      "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                      "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                      "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                      "align-items-xs-center": "MuiGrid-align-items-xs-center",
                      "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                      "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                      "container": "MuiGrid-container",
                      "direction-xs-column": "MuiGrid-direction-xs-column",
                      "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                      "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                      "grid-lg-1": "MuiGrid-grid-lg-1",
                      "grid-lg-10": "MuiGrid-grid-lg-10",
                      "grid-lg-11": "MuiGrid-grid-lg-11",
                      "grid-lg-12": "MuiGrid-grid-lg-12",
                      "grid-lg-2": "MuiGrid-grid-lg-2",
                      "grid-lg-3": "MuiGrid-grid-lg-3",
                      "grid-lg-4": "MuiGrid-grid-lg-4",
                      "grid-lg-5": "MuiGrid-grid-lg-5",
                      "grid-lg-6": "MuiGrid-grid-lg-6",
                      "grid-lg-7": "MuiGrid-grid-lg-7",
                      "grid-lg-8": "MuiGrid-grid-lg-8",
                      "grid-lg-9": "MuiGrid-grid-lg-9",
                      "grid-lg-auto": "MuiGrid-grid-lg-auto",
                      "grid-lg-true": "MuiGrid-grid-lg-true",
                      "grid-md-1": "MuiGrid-grid-md-1",
                      "grid-md-10": "MuiGrid-grid-md-10",
                      "grid-md-11": "MuiGrid-grid-md-11",
                      "grid-md-12": "MuiGrid-grid-md-12",
                      "grid-md-2": "MuiGrid-grid-md-2",
                      "grid-md-3": "MuiGrid-grid-md-3",
                      "grid-md-4": "MuiGrid-grid-md-4",
                      "grid-md-5": "MuiGrid-grid-md-5",
                      "grid-md-6": "MuiGrid-grid-md-6",
                      "grid-md-7": "MuiGrid-grid-md-7",
                      "grid-md-8": "MuiGrid-grid-md-8",
                      "grid-md-9": "MuiGrid-grid-md-9",
                      "grid-md-auto": "MuiGrid-grid-md-auto",
                      "grid-md-true": "MuiGrid-grid-md-true",
                      "grid-sm-1": "MuiGrid-grid-sm-1",
                      "grid-sm-10": "MuiGrid-grid-sm-10",
                      "grid-sm-11": "MuiGrid-grid-sm-11",
                      "grid-sm-12": "MuiGrid-grid-sm-12",
                      "grid-sm-2": "MuiGrid-grid-sm-2",
                      "grid-sm-3": "MuiGrid-grid-sm-3",
                      "grid-sm-4": "MuiGrid-grid-sm-4",
                      "grid-sm-5": "MuiGrid-grid-sm-5",
                      "grid-sm-6": "MuiGrid-grid-sm-6",
                      "grid-sm-7": "MuiGrid-grid-sm-7",
                      "grid-sm-8": "MuiGrid-grid-sm-8",
                      "grid-sm-9": "MuiGrid-grid-sm-9",
                      "grid-sm-auto": "MuiGrid-grid-sm-auto",
                      "grid-sm-true": "MuiGrid-grid-sm-true",
                      "grid-xl-1": "MuiGrid-grid-xl-1",
                      "grid-xl-10": "MuiGrid-grid-xl-10",
                      "grid-xl-11": "MuiGrid-grid-xl-11",
                      "grid-xl-12": "MuiGrid-grid-xl-12",
                      "grid-xl-2": "MuiGrid-grid-xl-2",
                      "grid-xl-3": "MuiGrid-grid-xl-3",
                      "grid-xl-4": "MuiGrid-grid-xl-4",
                      "grid-xl-5": "MuiGrid-grid-xl-5",
                      "grid-xl-6": "MuiGrid-grid-xl-6",
                      "grid-xl-7": "MuiGrid-grid-xl-7",
                      "grid-xl-8": "MuiGrid-grid-xl-8",
                      "grid-xl-9": "MuiGrid-grid-xl-9",
                      "grid-xl-auto": "MuiGrid-grid-xl-auto",
                      "grid-xl-true": "MuiGrid-grid-xl-true",
                      "grid-xs-1": "MuiGrid-grid-xs-1",
                      "grid-xs-10": "MuiGrid-grid-xs-10",
                      "grid-xs-11": "MuiGrid-grid-xs-11",
                      "grid-xs-12": "MuiGrid-grid-xs-12",
                      "grid-xs-2": "MuiGrid-grid-xs-2",
                      "grid-xs-3": "MuiGrid-grid-xs-3",
                      "grid-xs-4": "MuiGrid-grid-xs-4",
                      "grid-xs-5": "MuiGrid-grid-xs-5",
                      "grid-xs-6": "MuiGrid-grid-xs-6",
                      "grid-xs-7": "MuiGrid-grid-xs-7",
                      "grid-xs-8": "MuiGrid-grid-xs-8",
                      "grid-xs-9": "MuiGrid-grid-xs-9",
                      "grid-xs-auto": "MuiGrid-grid-xs-auto",
                      "grid-xs-true": "MuiGrid-grid-xs-true",
                      "item": "MuiGrid-item",
                      "justify-xs-center": "MuiGrid-justify-xs-center",
                      "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                      "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                      "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                      "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                      "root": "MuiGrid-root",
                      "spacing-xs-1": "MuiGrid-spacing-xs-1",
                      "spacing-xs-10": "MuiGrid-spacing-xs-10",
                      "spacing-xs-2": "MuiGrid-spacing-xs-2",
                      "spacing-xs-3": "MuiGrid-spacing-xs-3",
                      "spacing-xs-4": "MuiGrid-spacing-xs-4",
                      "spacing-xs-5": "MuiGrid-spacing-xs-5",
                      "spacing-xs-6": "MuiGrid-spacing-xs-6",
                      "spacing-xs-7": "MuiGrid-spacing-xs-7",
                      "spacing-xs-8": "MuiGrid-spacing-xs-8",
                      "spacing-xs-9": "MuiGrid-spacing-xs-9",
                      "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                      "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                      "zeroMinWidth": "MuiGrid-zeroMinWidth",
                    }
                  }
                  container={true}
                  spacing={1}
                >
                  <div
                    className="MuiGrid-root MuiGrid-container MuiGrid-spacing-xs-1"
                  >
                    <WithStyles(ForwardRef(Grid))
                      item={true}
                      xs={12}
                    >
                      <ForwardRef(Grid)
                        classes={
                          Object {
                            "align-content-xs-center": "MuiGrid-align-content-xs-center",
                            "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                            "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                            "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                            "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                            "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                            "align-items-xs-center": "MuiGrid-align-items-xs-center",
                            "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                            "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                            "container": "MuiGrid-container",
                            "direction-xs-column": "MuiGrid-direction-xs-column",
                            "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                            "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                            "grid-lg-1": "MuiGrid-grid-lg-1",
                            "grid-lg-10": "MuiGrid-grid-lg-10",
                            "grid-lg-11": "MuiGrid-grid-lg-11",
                            "grid-lg-12": "MuiGrid-grid-lg-12",
                            "grid-lg-2": "MuiGrid-grid-lg-2",
                            "grid-lg-3": "MuiGrid-grid-lg-3",
                            "grid-lg-4": "MuiGrid-grid-lg-4",
                            "grid-lg-5": "MuiGrid-grid-lg-5",
                            "grid-lg-6": "MuiGrid-grid-lg-6",
                            "grid-lg-7": "MuiGrid-grid-lg-7",
                            "grid-lg-8": "MuiGrid-grid-lg-8",
                            "grid-lg-9": "MuiGrid-grid-lg-9",
                            "grid-lg-auto": "MuiGrid-grid-lg-auto",
                            "grid-lg-true": "MuiGrid-grid-lg-true",
                            "grid-md-1": "MuiGrid-grid-md-1",
                            "grid-md-10": "MuiGrid-grid-md-10",
                            "grid-md-11": "MuiGrid-grid-md-11",
                            "grid-md-12": "MuiGrid-grid-md-12",
                            "grid-md-2": "MuiGrid-grid-md-2",
                            "grid-md-3": "MuiGrid-grid-md-3",
                            "grid-md-4": "MuiGrid-grid-md-4",
                            "grid-md-5": "MuiGrid-grid-md-5",
                            "grid-md-6": "MuiGrid-grid-md-6",
                            "grid-md-7": "MuiGrid-grid-md-7",
                            "grid-md-8": "MuiGrid-grid-md-8",
                            "grid-md-9": "MuiGrid-grid-md-9",
                            "grid-md-auto": "MuiGrid-grid-md-auto",
                            "grid-md-true": "MuiGrid-grid-md-true",
                            "grid-sm-1": "MuiGrid-grid-sm-1",
                            "grid-sm-10": "MuiGrid-grid-sm-10",
                            "grid-sm-11": "MuiGrid-grid-sm-11",
                            "grid-sm-12": "MuiGrid-grid-sm-12",
                            "grid-sm-2": "MuiGrid-grid-sm-2",
                            "grid-sm-3": "MuiGrid-grid-sm-3",
                            "grid-sm-4": "MuiGrid-grid-sm-4",
                            "grid-sm-5": "MuiGrid-grid-sm-5",
                            "grid-sm-6": "MuiGrid-grid-sm-6",
                            "grid-sm-7": "MuiGrid-grid-sm-7",
                            "grid-sm-8": "MuiGrid-grid-sm-8",
                            "grid-sm-9": "MuiGrid-grid-sm-9",
                            "grid-sm-auto": "MuiGrid-grid-sm-auto",
                            "grid-sm-true": "MuiGrid-grid-sm-true",
                            "grid-xl-1": "MuiGrid-grid-xl-1",
                            "grid-xl-10": "MuiGrid-grid-xl-10",
                            "grid-xl-11": "MuiGrid-grid-xl-11",
                            "grid-xl-12": "MuiGrid-grid-xl-12",
                            "grid-xl-2": "MuiGrid-grid-xl-2",
                            "grid-xl-3": "MuiGrid-grid-xl-3",
                            "grid-xl-4": "MuiGrid-grid-xl-4",
                            "grid-xl-5": "MuiGrid-grid-xl-5",
                            "grid-xl-6": "MuiGrid-grid-xl-6",
                            "grid-xl-7": "MuiGrid-grid-xl-7",
                            "grid-xl-8": "MuiGrid-grid-xl-8",
                            "grid-xl-9": "MuiGrid-grid-xl-9",
                            "grid-xl-auto": "MuiGrid-grid-xl-auto",
                            "grid-xl-true": "MuiGrid-grid-xl-true",
                            "grid-xs-1": "MuiGrid-grid-xs-1",
                            "grid-xs-10": "MuiGrid-grid-xs-10",
                            "grid-xs-11": "MuiGrid-grid-xs-11",
                            "grid-xs-12": "MuiGrid-grid-xs-12",
                            "grid-xs-2": "MuiGrid-grid-xs-2",
                            "grid-xs-3": "MuiGrid-grid-xs-3",
                            "grid-xs-4": "MuiGrid-grid-xs-4",
                            "grid-xs-5": "MuiGrid-grid-xs-5",
                            "grid-xs-6": "MuiGrid-grid-xs-6",
                            "grid-xs-7": "MuiGrid-grid-xs-7",
                            "grid-xs-8": "MuiGrid-grid-xs-8",
                            "grid-xs-9": "MuiGrid-grid-xs-9",
                            "grid-xs-auto": "MuiGrid-grid-xs-auto",
                            "grid-xs-true": "MuiGrid-grid-xs-true",
                            "item": "MuiGrid-item",
                            "justify-xs-center": "MuiGrid-justify-xs-center",
                            "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                            "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                            "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                            "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                            "root": "MuiGrid-root",
                            "spacing-xs-1": "MuiGrid-spacing-xs-1",
                            "spacing-xs-10": "MuiGrid-spacing-xs-10",
                            "spacing-xs-2": "MuiGrid-spacing-xs-2",
                            "spacing-xs-3": "MuiGrid-spacing-xs-3",
                            "spacing-xs-4": "MuiGrid-spacing-xs-4",
                            "spacing-xs-5": "MuiGrid-spacing-xs-5",
                            "spacing-xs-6": "MuiGrid-spacing-xs-6",
                            "spacing-xs-7": "MuiGrid-spacing-xs-7",
                            "spacing-xs-8": "MuiGrid-spacing-xs-8",
                            "spacing-xs-9": "MuiGrid-spacing-xs-9",
                            "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                            "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                            "zeroMinWidth": "MuiGrid-zeroMinWidth",
                          }
                        }
                        item={true}
                        xs={12}
                      >
                        <div
                          className="MuiGrid-root MuiGrid-item MuiGrid-grid-xs-12"
                        >
                          <ContributorForm
                            author={
                              Object {
                                "aut_id": 1,
                              }
                            }
                            canEdit={false}
                            classes={
                              Object {
                                "list": "list",
                                "scroll": "scroll",
                              }
                            }
                            contributor={
                              Object {
                                "affiliation": "",
                                "creatorRole": "",
                                "nameAsPublished": "",
                                "orgaff": "",
                                "orgtype": "",
                                "uqIdentifier": "",
                                "uqUsername": "",
                              }
                            }
                            contributorEditorId="test"
                            contributorFormId="test"
                            disableNameAsPublished={false}
                            displayCancel={false}
                            editMode={false}
                            enableUqIdentifierOnAffiliationChange={true}
                            hideDelete={false}
                            hideReorder={false}
                            isContributorAssigned={false}
                            isNtro={true}
                            key="contributor-form-add"
                            locale={
                              Object {
                                "addButton": "Add author",
                                "creatorRoleHint": "Role of the creator in relation to the dataset",
                                "creatorRoleLabel": "Creator role",
                                "descriptionStep1": <div>
                                  <span
                                    className="authorSteps"
                                  >
                                    Step 1 of 2
                                  </span>
                                  - Please 
                                  <b>
                                    add to a list of contributors below
                                  </b>
                                  , in the format and order that they are published.
                                </div>,
                                "descriptionStep1NoStep2": <div>
                                  Please 
                                  <b>
                                    add to a list of contributors below
                                  </b>
                                  , in the format and order that they are published.
                                </div>,
                                "identifierLabel": "UQ identifier (if available)",
                                "nameAsPublishedHint": "Please type the name exactly as published",
                                "nameAsPublishedLabel": "Name as published",
                              }
                            }
                            onSubmit={[Function]}
                            required={false}
                            showContributorAssignment={false}
                            showIdentifierLookup={false}
                            showRoleInput={false}
                          >
                            <div>
                              Please 
                              <b>
                                add to a list of contributors below
                              </b>
                              , in the format and order that they are published.
                            </div>
                            <WithStyles(ForwardRef(Grid))
                              container={true}
                              id="contributorForm"
                              spacing={1}
                              style={
                                Object {
                                  "marginTop": 8,
                                }
                              }
                            >
                              <ForwardRef(Grid)
                                classes={
                                  Object {
                                    "align-content-xs-center": "MuiGrid-align-content-xs-center",
                                    "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                                    "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                                    "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                                    "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                                    "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                                    "align-items-xs-center": "MuiGrid-align-items-xs-center",
                                    "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                                    "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                                    "container": "MuiGrid-container",
                                    "direction-xs-column": "MuiGrid-direction-xs-column",
                                    "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                                    "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                                    "grid-lg-1": "MuiGrid-grid-lg-1",
                                    "grid-lg-10": "MuiGrid-grid-lg-10",
                                    "grid-lg-11": "MuiGrid-grid-lg-11",
                                    "grid-lg-12": "MuiGrid-grid-lg-12",
                                    "grid-lg-2": "MuiGrid-grid-lg-2",
                                    "grid-lg-3": "MuiGrid-grid-lg-3",
                                    "grid-lg-4": "MuiGrid-grid-lg-4",
                                    "grid-lg-5": "MuiGrid-grid-lg-5",
                                    "grid-lg-6": "MuiGrid-grid-lg-6",
                                    "grid-lg-7": "MuiGrid-grid-lg-7",
                                    "grid-lg-8": "MuiGrid-grid-lg-8",
                                    "grid-lg-9": "MuiGrid-grid-lg-9",
                                    "grid-lg-auto": "MuiGrid-grid-lg-auto",
                                    "grid-lg-true": "MuiGrid-grid-lg-true",
                                    "grid-md-1": "MuiGrid-grid-md-1",
                                    "grid-md-10": "MuiGrid-grid-md-10",
                                    "grid-md-11": "MuiGrid-grid-md-11",
                                    "grid-md-12": "MuiGrid-grid-md-12",
                                    "grid-md-2": "MuiGrid-grid-md-2",
                                    "grid-md-3": "MuiGrid-grid-md-3",
                                    "grid-md-4": "MuiGrid-grid-md-4",
                                    "grid-md-5": "MuiGrid-grid-md-5",
                                    "grid-md-6": "MuiGrid-grid-md-6",
                                    "grid-md-7": "MuiGrid-grid-md-7",
                                    "grid-md-8": "MuiGrid-grid-md-8",
                                    "grid-md-9": "MuiGrid-grid-md-9",
                                    "grid-md-auto": "MuiGrid-grid-md-auto",
                                    "grid-md-true": "MuiGrid-grid-md-true",
                                    "grid-sm-1": "MuiGrid-grid-sm-1",
                                    "grid-sm-10": "MuiGrid-grid-sm-10",
                                    "grid-sm-11": "MuiGrid-grid-sm-11",
                                    "grid-sm-12": "MuiGrid-grid-sm-12",
                                    "grid-sm-2": "MuiGrid-grid-sm-2",
                                    "grid-sm-3": "MuiGrid-grid-sm-3",
                                    "grid-sm-4": "MuiGrid-grid-sm-4",
                                    "grid-sm-5": "MuiGrid-grid-sm-5",
                                    "grid-sm-6": "MuiGrid-grid-sm-6",
                                    "grid-sm-7": "MuiGrid-grid-sm-7",
                                    "grid-sm-8": "MuiGrid-grid-sm-8",
                                    "grid-sm-9": "MuiGrid-grid-sm-9",
                                    "grid-sm-auto": "MuiGrid-grid-sm-auto",
                                    "grid-sm-true": "MuiGrid-grid-sm-true",
                                    "grid-xl-1": "MuiGrid-grid-xl-1",
                                    "grid-xl-10": "MuiGrid-grid-xl-10",
                                    "grid-xl-11": "MuiGrid-grid-xl-11",
                                    "grid-xl-12": "MuiGrid-grid-xl-12",
                                    "grid-xl-2": "MuiGrid-grid-xl-2",
                                    "grid-xl-3": "MuiGrid-grid-xl-3",
                                    "grid-xl-4": "MuiGrid-grid-xl-4",
                                    "grid-xl-5": "MuiGrid-grid-xl-5",
                                    "grid-xl-6": "MuiGrid-grid-xl-6",
                                    "grid-xl-7": "MuiGrid-grid-xl-7",
                                    "grid-xl-8": "MuiGrid-grid-xl-8",
                                    "grid-xl-9": "MuiGrid-grid-xl-9",
                                    "grid-xl-auto": "MuiGrid-grid-xl-auto",
                                    "grid-xl-true": "MuiGrid-grid-xl-true",
                                    "grid-xs-1": "MuiGrid-grid-xs-1",
                                    "grid-xs-10": "MuiGrid-grid-xs-10",
                                    "grid-xs-11": "MuiGrid-grid-xs-11",
                                    "grid-xs-12": "MuiGrid-grid-xs-12",
                                    "grid-xs-2": "MuiGrid-grid-xs-2",
                                    "grid-xs-3": "MuiGrid-grid-xs-3",
                                    "grid-xs-4": "MuiGrid-grid-xs-4",
                                    "grid-xs-5": "MuiGrid-grid-xs-5",
                                    "grid-xs-6": "MuiGrid-grid-xs-6",
                                    "grid-xs-7": "MuiGrid-grid-xs-7",
                                    "grid-xs-8": "MuiGrid-grid-xs-8",
                                    "grid-xs-9": "MuiGrid-grid-xs-9",
                                    "grid-xs-auto": "MuiGrid-grid-xs-auto",
                                    "grid-xs-true": "MuiGrid-grid-xs-true",
                                    "item": "MuiGrid-item",
                                    "justify-xs-center": "MuiGrid-justify-xs-center",
                                    "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                                    "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                                    "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                                    "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                                    "root": "MuiGrid-root",
                                    "spacing-xs-1": "MuiGrid-spacing-xs-1",
                                    "spacing-xs-10": "MuiGrid-spacing-xs-10",
                                    "spacing-xs-2": "MuiGrid-spacing-xs-2",
                                    "spacing-xs-3": "MuiGrid-spacing-xs-3",
                                    "spacing-xs-4": "MuiGrid-spacing-xs-4",
                                    "spacing-xs-5": "MuiGrid-spacing-xs-5",
                                    "spacing-xs-6": "MuiGrid-spacing-xs-6",
                                    "spacing-xs-7": "MuiGrid-spacing-xs-7",
                                    "spacing-xs-8": "MuiGrid-spacing-xs-8",
                                    "spacing-xs-9": "MuiGrid-spacing-xs-9",
                                    "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                                    "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                                    "zeroMinWidth": "MuiGrid-zeroMinWidth",
                                  }
                                }
                                container={true}
                                id="contributorForm"
                                spacing={1}
                                style={
                                  Object {
                                    "marginTop": 8,
                                  }
                                }
                              >
                                <div
                                  className="MuiGrid-root MuiGrid-container MuiGrid-spacing-xs-1"
                                  id="contributorForm"
                                  style={
                                    Object {
                                      "marginTop": 8,
                                    }
                                  }
                                >
                                  <WithStyles(ForwardRef(Grid))
                                    item={true}
                                    sm={2}
                                    xs={12}
                                  >
                                    <ForwardRef(Grid)
                                      classes={
                                        Object {
                                          "align-content-xs-center": "MuiGrid-align-content-xs-center",
                                          "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                                          "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                                          "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                                          "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                                          "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                                          "align-items-xs-center": "MuiGrid-align-items-xs-center",
                                          "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                                          "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                                          "container": "MuiGrid-container",
                                          "direction-xs-column": "MuiGrid-direction-xs-column",
                                          "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                                          "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                                          "grid-lg-1": "MuiGrid-grid-lg-1",
                                          "grid-lg-10": "MuiGrid-grid-lg-10",
                                          "grid-lg-11": "MuiGrid-grid-lg-11",
                                          "grid-lg-12": "MuiGrid-grid-lg-12",
                                          "grid-lg-2": "MuiGrid-grid-lg-2",
                                          "grid-lg-3": "MuiGrid-grid-lg-3",
                                          "grid-lg-4": "MuiGrid-grid-lg-4",
                                          "grid-lg-5": "MuiGrid-grid-lg-5",
                                          "grid-lg-6": "MuiGrid-grid-lg-6",
                                          "grid-lg-7": "MuiGrid-grid-lg-7",
                                          "grid-lg-8": "MuiGrid-grid-lg-8",
                                          "grid-lg-9": "MuiGrid-grid-lg-9",
                                          "grid-lg-auto": "MuiGrid-grid-lg-auto",
                                          "grid-lg-true": "MuiGrid-grid-lg-true",
                                          "grid-md-1": "MuiGrid-grid-md-1",
                                          "grid-md-10": "MuiGrid-grid-md-10",
                                          "grid-md-11": "MuiGrid-grid-md-11",
                                          "grid-md-12": "MuiGrid-grid-md-12",
                                          "grid-md-2": "MuiGrid-grid-md-2",
                                          "grid-md-3": "MuiGrid-grid-md-3",
                                          "grid-md-4": "MuiGrid-grid-md-4",
                                          "grid-md-5": "MuiGrid-grid-md-5",
                                          "grid-md-6": "MuiGrid-grid-md-6",
                                          "grid-md-7": "MuiGrid-grid-md-7",
                                          "grid-md-8": "MuiGrid-grid-md-8",
                                          "grid-md-9": "MuiGrid-grid-md-9",
                                          "grid-md-auto": "MuiGrid-grid-md-auto",
                                          "grid-md-true": "MuiGrid-grid-md-true",
                                          "grid-sm-1": "MuiGrid-grid-sm-1",
                                          "grid-sm-10": "MuiGrid-grid-sm-10",
                                          "grid-sm-11": "MuiGrid-grid-sm-11",
                                          "grid-sm-12": "MuiGrid-grid-sm-12",
                                          "grid-sm-2": "MuiGrid-grid-sm-2",
                                          "grid-sm-3": "MuiGrid-grid-sm-3",
                                          "grid-sm-4": "MuiGrid-grid-sm-4",
                                          "grid-sm-5": "MuiGrid-grid-sm-5",
                                          "grid-sm-6": "MuiGrid-grid-sm-6",
                                          "grid-sm-7": "MuiGrid-grid-sm-7",
                                          "grid-sm-8": "MuiGrid-grid-sm-8",
                                          "grid-sm-9": "MuiGrid-grid-sm-9",
                                          "grid-sm-auto": "MuiGrid-grid-sm-auto",
                                          "grid-sm-true": "MuiGrid-grid-sm-true",
                                          "grid-xl-1": "MuiGrid-grid-xl-1",
                                          "grid-xl-10": "MuiGrid-grid-xl-10",
                                          "grid-xl-11": "MuiGrid-grid-xl-11",
                                          "grid-xl-12": "MuiGrid-grid-xl-12",
                                          "grid-xl-2": "MuiGrid-grid-xl-2",
                                          "grid-xl-3": "MuiGrid-grid-xl-3",
                                          "grid-xl-4": "MuiGrid-grid-xl-4",
                                          "grid-xl-5": "MuiGrid-grid-xl-5",
                                          "grid-xl-6": "MuiGrid-grid-xl-6",
                                          "grid-xl-7": "MuiGrid-grid-xl-7",
                                          "grid-xl-8": "MuiGrid-grid-xl-8",
                                          "grid-xl-9": "MuiGrid-grid-xl-9",
                                          "grid-xl-auto": "MuiGrid-grid-xl-auto",
                                          "grid-xl-true": "MuiGrid-grid-xl-true",
                                          "grid-xs-1": "MuiGrid-grid-xs-1",
                                          "grid-xs-10": "MuiGrid-grid-xs-10",
                                          "grid-xs-11": "MuiGrid-grid-xs-11",
                                          "grid-xs-12": "MuiGrid-grid-xs-12",
                                          "grid-xs-2": "MuiGrid-grid-xs-2",
                                          "grid-xs-3": "MuiGrid-grid-xs-3",
                                          "grid-xs-4": "MuiGrid-grid-xs-4",
                                          "grid-xs-5": "MuiGrid-grid-xs-5",
                                          "grid-xs-6": "MuiGrid-grid-xs-6",
                                          "grid-xs-7": "MuiGrid-grid-xs-7",
                                          "grid-xs-8": "MuiGrid-grid-xs-8",
                                          "grid-xs-9": "MuiGrid-grid-xs-9",
                                          "grid-xs-auto": "MuiGrid-grid-xs-auto",
                                          "grid-xs-true": "MuiGrid-grid-xs-true",
                                          "item": "MuiGrid-item",
                                          "justify-xs-center": "MuiGrid-justify-xs-center",
                                          "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                                          "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                                          "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                                          "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                                          "root": "MuiGrid-root",
                                          "spacing-xs-1": "MuiGrid-spacing-xs-1",
                                          "spacing-xs-10": "MuiGrid-spacing-xs-10",
                                          "spacing-xs-2": "MuiGrid-spacing-xs-2",
                                          "spacing-xs-3": "MuiGrid-spacing-xs-3",
                                          "spacing-xs-4": "MuiGrid-spacing-xs-4",
                                          "spacing-xs-5": "MuiGrid-spacing-xs-5",
                                          "spacing-xs-6": "MuiGrid-spacing-xs-6",
                                          "spacing-xs-7": "MuiGrid-spacing-xs-7",
                                          "spacing-xs-8": "MuiGrid-spacing-xs-8",
                                          "spacing-xs-9": "MuiGrid-spacing-xs-9",
                                          "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                                          "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                                          "zeroMinWidth": "MuiGrid-zeroMinWidth",
                                        }
                                      }
                                      item={true}
                                      sm={2}
                                      xs={12}
                                    >
                                      <div
                                        className="MuiGrid-root MuiGrid-item MuiGrid-grid-xs-12 MuiGrid-grid-sm-2"
                                      >
                                        <OrgAffilicationTypeSelector
                                          affiliation=""
                                          error={false}
                                          locale={
                                            Object {
                                              "inputLabel": "Org affiliation",
                                              "options": Array [
                                                Object {
                                                  "key": "UQ",
                                                  "value": "UQ",
                                                },
                                                Object {
                                                  "key": "NotUQ",
                                                  "value": "Not UQ",
                                                },
                                              ],
                                              "placeholder": "Organisational affiliation at time of publication",
                                            }
                                          }
                                          onAffiliationChange={[Function]}
                                        >
                                          <WithStyles(ForwardRef(FormControl))
                                            error={false}
                                            fullWidth={true}
                                          >
                                            <ForwardRef(FormControl)
                                              classes={
                                                Object {
                                                  "fullWidth": "MuiFormControl-fullWidth",
                                                  "marginDense": "MuiFormControl-marginDense",
                                                  "marginNormal": "MuiFormControl-marginNormal",
                                                  "root": "MuiFormControl-root",
                                                }
                                              }
                                              error={false}
                                              fullWidth={true}
                                            >
                                              <div
                                                className="MuiFormControl-root MuiFormControl-fullWidth"
                                              >
                                                <WithStyles(ForwardRef(InputLabel))
                                                  id="org-affiliation-label"
                                                >
                                                  <ForwardRef(InputLabel)
                                                    classes={
                                                      Object {
                                                        "animated": "MuiInputLabel-animated",
                                                        "asterisk": "MuiInputLabel-asterisk",
                                                        "disabled": "Mui-disabled",
                                                        "error": "Mui-error",
                                                        "filled": "MuiInputLabel-filled",
                                                        "focused": "Mui-focused",
                                                        "formControl": "MuiInputLabel-formControl",
                                                        "marginDense": "MuiInputLabel-marginDense",
                                                        "outlined": "MuiInputLabel-outlined",
                                                        "required": "Mui-required",
                                                        "root": "MuiInputLabel-root",
                                                        "shrink": "MuiInputLabel-shrink",
                                                      }
                                                    }
                                                    id="org-affiliation-label"
                                                  >
                                                    <WithStyles(ForwardRef(FormLabel))
                                                      className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                      classes={
                                                        Object {
                                                          "asterisk": "MuiInputLabel-asterisk",
                                                          "disabled": "Mui-disabled",
                                                          "error": "Mui-error",
                                                          "focused": "Mui-focused",
                                                          "required": "Mui-required",
                                                        }
                                                      }
                                                      data-shrink={false}
                                                      id="org-affiliation-label"
                                                    >
                                                      <ForwardRef(FormLabel)
                                                        className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                        classes={
                                                          Object {
                                                            "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                                            "colorSecondary": "MuiFormLabel-colorSecondary",
                                                            "disabled": "Mui-disabled Mui-disabled",
                                                            "error": "Mui-error Mui-error",
                                                            "filled": "MuiFormLabel-filled",
                                                            "focused": "Mui-focused Mui-focused",
                                                            "required": "Mui-required Mui-required",
                                                            "root": "MuiFormLabel-root",
                                                          }
                                                        }
                                                        data-shrink={false}
                                                        id="org-affiliation-label"
                                                      >
                                                        <label
                                                          className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                          data-shrink={false}
                                                          id="org-affiliation-label"
                                                        >
                                                          Org affiliation
                                                        </label>
                                                      </ForwardRef(FormLabel)>
                                                    </WithStyles(ForwardRef(FormLabel))>
                                                  </ForwardRef(InputLabel)>
                                                </WithStyles(ForwardRef(InputLabel))>
                                                <WithStyles(ForwardRef(Select))
                                                  MenuProps={
                                                    Object {
                                                      "data-testid": "org-affiliation-options",
                                                      "id": "org-affiliation-options",
                                                    }
                                                  }
                                                  SelectDisplayProps={
                                                    Object {
                                                      "data-testid": "org-affiliation-select",
                                                      "id": "org-affiliation-select",
                                                    }
                                                  }
                                                  labelId="org-affiliation-label"
                                                  name="org-affiliation"
                                                  onChange={[Function]}
                                                  required={true}
                                                  value=""
                                                >
                                                  <ForwardRef(Select)
                                                    MenuProps={
                                                      Object {
                                                        "data-testid": "org-affiliation-options",
                                                        "id": "org-affiliation-options",
                                                      }
                                                    }
                                                    SelectDisplayProps={
                                                      Object {
                                                        "data-testid": "org-affiliation-select",
                                                        "id": "org-affiliation-select",
                                                      }
                                                    }
                                                    classes={
                                                      Object {
                                                        "disabled": "Mui-disabled",
                                                        "filled": "MuiSelect-filled",
                                                        "icon": "MuiSelect-icon",
                                                        "iconFilled": "MuiSelect-iconFilled",
                                                        "iconOpen": "MuiSelect-iconOpen",
                                                        "iconOutlined": "MuiSelect-iconOutlined",
                                                        "nativeInput": "MuiSelect-nativeInput",
                                                        "outlined": "MuiSelect-outlined",
                                                        "root": "MuiSelect-root",
                                                        "select": "MuiSelect-select",
                                                        "selectMenu": "MuiSelect-selectMenu",
                                                      }
                                                    }
                                                    labelId="org-affiliation-label"
                                                    name="org-affiliation"
                                                    onChange={[Function]}
                                                    required={true}
                                                    value=""
                                                  >
                                                    <WithStyles(ForwardRef(Input))
                                                      inputComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "propTypes": Object {
                                                            "IconComponent": [Function],
                                                            "MenuProps": [Function],
                                                            "SelectDisplayProps": [Function],
                                                            "aria-label": [Function],
                                                            "autoFocus": [Function],
                                                            "autoWidth": [Function],
                                                            "children": [Function],
                                                            "className": [Function],
                                                            "classes": [Function],
                                                            "defaultValue": [Function],
                                                            "disabled": [Function],
                                                            "displayEmpty": [Function],
                                                            "inputRef": [Function],
                                                            "labelId": [Function],
                                                            "multiple": [Function],
                                                            "name": [Function],
                                                            "onBlur": [Function],
                                                            "onChange": [Function],
                                                            "onClose": [Function],
                                                            "onFocus": [Function],
                                                            "onOpen": [Function],
                                                            "open": [Function],
                                                            "readOnly": [Function],
                                                            "renderValue": [Function],
                                                            "tabIndex": [Function],
                                                            "type": [Function],
                                                            "value": [Function],
                                                            "variant": [Function],
                                                          },
                                                          "render": [Function],
                                                        }
                                                      }
                                                      inputProps={
                                                        Object {
                                                          "IconComponent": Object {
                                                            "$$typeof": Symbol(react.memo),
                                                            "compare": null,
                                                            "type": Object {
                                                              "$$typeof": Symbol(react.forward_ref),
                                                              "render": [Function],
                                                            },
                                                          },
                                                          "MenuProps": Object {
                                                            "data-testid": "org-affiliation-options",
                                                            "id": "org-affiliation-options",
                                                          },
                                                          "SelectDisplayProps": Object {
                                                            "data-testid": "org-affiliation-select",
                                                            "id": "org-affiliation-select",
                                                          },
                                                          "autoWidth": false,
                                                          "children": Array [
                                                            <WithStyles(ForwardRef(MenuItem))
                                                              disabled={true}
                                                              value=""
                                                            >
                                                              Organisational affiliation at time of publication
                                                            </WithStyles(ForwardRef(MenuItem))>,
                                                            Array [
                                                              <WithStyles(ForwardRef(MenuItem))
                                                                value="UQ"
                                                              >
                                                                UQ
                                                              </WithStyles(ForwardRef(MenuItem))>,
                                                              <WithStyles(ForwardRef(MenuItem))
                                                                value="NotUQ"
                                                              >
                                                                Not UQ
                                                              </WithStyles(ForwardRef(MenuItem))>,
                                                            ],
                                                          ],
                                                          "classes": Object {
                                                            "disabled": "Mui-disabled",
                                                            "filled": "MuiSelect-filled",
                                                            "icon": "MuiSelect-icon",
                                                            "iconFilled": "MuiSelect-iconFilled",
                                                            "iconOpen": "MuiSelect-iconOpen",
                                                            "iconOutlined": "MuiSelect-iconOutlined",
                                                            "nativeInput": "MuiSelect-nativeInput",
                                                            "outlined": "MuiSelect-outlined",
                                                            "root": "MuiSelect-root",
                                                            "select": "MuiSelect-select",
                                                            "selectMenu": "MuiSelect-selectMenu",
                                                          },
                                                          "displayEmpty": false,
                                                          "labelId": "org-affiliation-label",
                                                          "multiple": false,
                                                          "onClose": undefined,
                                                          "onOpen": undefined,
                                                          "open": undefined,
                                                          "renderValue": undefined,
                                                          "type": undefined,
                                                          "variant": "standard",
                                                        }
                                                      }
                                                      name="org-affiliation"
                                                      onChange={[Function]}
                                                      required={true}
                                                      value=""
                                                    >
                                                      <ForwardRef(Input)
                                                        classes={
                                                          Object {
                                                            "colorSecondary": "MuiInput-colorSecondary",
                                                            "disabled": "Mui-disabled",
                                                            "error": "Mui-error",
                                                            "focused": "Mui-focused",
                                                            "formControl": "MuiInput-formControl",
                                                            "fullWidth": "MuiInput-fullWidth",
                                                            "input": "MuiInput-input",
                                                            "inputMarginDense": "MuiInput-inputMarginDense",
                                                            "inputMultiline": "MuiInput-inputMultiline",
                                                            "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                            "marginDense": "MuiInput-marginDense",
                                                            "multiline": "MuiInput-multiline",
                                                            "root": "MuiInput-root",
                                                            "underline": "MuiInput-underline",
                                                          }
                                                        }
                                                        inputComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "propTypes": Object {
                                                              "IconComponent": [Function],
                                                              "MenuProps": [Function],
                                                              "SelectDisplayProps": [Function],
                                                              "aria-label": [Function],
                                                              "autoFocus": [Function],
                                                              "autoWidth": [Function],
                                                              "children": [Function],
                                                              "className": [Function],
                                                              "classes": [Function],
                                                              "defaultValue": [Function],
                                                              "disabled": [Function],
                                                              "displayEmpty": [Function],
                                                              "inputRef": [Function],
                                                              "labelId": [Function],
                                                              "multiple": [Function],
                                                              "name": [Function],
                                                              "onBlur": [Function],
                                                              "onChange": [Function],
                                                              "onClose": [Function],
                                                              "onFocus": [Function],
                                                              "onOpen": [Function],
                                                              "open": [Function],
                                                              "readOnly": [Function],
                                                              "renderValue": [Function],
                                                              "tabIndex": [Function],
                                                              "type": [Function],
                                                              "value": [Function],
                                                              "variant": [Function],
                                                            },
                                                            "render": [Function],
                                                          }
                                                        }
                                                        inputProps={
                                                          Object {
                                                            "IconComponent": Object {
                                                              "$$typeof": Symbol(react.memo),
                                                              "compare": null,
                                                              "type": Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "render": [Function],
                                                              },
                                                            },
                                                            "MenuProps": Object {
                                                              "data-testid": "org-affiliation-options",
                                                              "id": "org-affiliation-options",
                                                            },
                                                            "SelectDisplayProps": Object {
                                                              "data-testid": "org-affiliation-select",
                                                              "id": "org-affiliation-select",
                                                            },
                                                            "autoWidth": false,
                                                            "children": Array [
                                                              <WithStyles(ForwardRef(MenuItem))
                                                                disabled={true}
                                                                value=""
                                                              >
                                                                Organisational affiliation at time of publication
                                                              </WithStyles(ForwardRef(MenuItem))>,
                                                              Array [
                                                                <WithStyles(ForwardRef(MenuItem))
                                                                  value="UQ"
                                                                >
                                                                  UQ
                                                                </WithStyles(ForwardRef(MenuItem))>,
                                                                <WithStyles(ForwardRef(MenuItem))
                                                                  value="NotUQ"
                                                                >
                                                                  Not UQ
                                                                </WithStyles(ForwardRef(MenuItem))>,
                                                              ],
                                                            ],
                                                            "classes": Object {
                                                              "disabled": "Mui-disabled",
                                                              "filled": "MuiSelect-filled",
                                                              "icon": "MuiSelect-icon",
                                                              "iconFilled": "MuiSelect-iconFilled",
                                                              "iconOpen": "MuiSelect-iconOpen",
                                                              "iconOutlined": "MuiSelect-iconOutlined",
                                                              "nativeInput": "MuiSelect-nativeInput",
                                                              "outlined": "MuiSelect-outlined",
                                                              "root": "MuiSelect-root",
                                                              "select": "MuiSelect-select",
                                                              "selectMenu": "MuiSelect-selectMenu",
                                                            },
                                                            "displayEmpty": false,
                                                            "labelId": "org-affiliation-label",
                                                            "multiple": false,
                                                            "onClose": undefined,
                                                            "onOpen": undefined,
                                                            "open": undefined,
                                                            "renderValue": undefined,
                                                            "type": undefined,
                                                            "variant": "standard",
                                                          }
                                                        }
                                                        name="org-affiliation"
                                                        onChange={[Function]}
                                                        required={true}
                                                        value=""
                                                      >
                                                        <WithStyles(ForwardRef(InputBase))
                                                          classes={
                                                            Object {
                                                              "colorSecondary": "MuiInput-colorSecondary",
                                                              "disabled": "Mui-disabled",
                                                              "error": "Mui-error",
                                                              "focused": "Mui-focused",
                                                              "formControl": "MuiInput-formControl",
                                                              "fullWidth": "MuiInput-fullWidth",
                                                              "input": "MuiInput-input",
                                                              "inputMarginDense": "MuiInput-inputMarginDense",
                                                              "inputMultiline": "MuiInput-inputMultiline",
                                                              "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                              "marginDense": "MuiInput-marginDense",
                                                              "multiline": "MuiInput-multiline",
                                                              "root": "MuiInput-root MuiInput-underline",
                                                              "underline": null,
                                                            }
                                                          }
                                                          fullWidth={false}
                                                          inputComponent={
                                                            Object {
                                                              "$$typeof": Symbol(react.forward_ref),
                                                              "propTypes": Object {
                                                                "IconComponent": [Function],
                                                                "MenuProps": [Function],
                                                                "SelectDisplayProps": [Function],
                                                                "aria-label": [Function],
                                                                "autoFocus": [Function],
                                                                "autoWidth": [Function],
                                                                "children": [Function],
                                                                "className": [Function],
                                                                "classes": [Function],
                                                                "defaultValue": [Function],
                                                                "disabled": [Function],
                                                                "displayEmpty": [Function],
                                                                "inputRef": [Function],
                                                                "labelId": [Function],
                                                                "multiple": [Function],
                                                                "name": [Function],
                                                                "onBlur": [Function],
                                                                "onChange": [Function],
                                                                "onClose": [Function],
                                                                "onFocus": [Function],
                                                                "onOpen": [Function],
                                                                "open": [Function],
                                                                "readOnly": [Function],
                                                                "renderValue": [Function],
                                                                "tabIndex": [Function],
                                                                "type": [Function],
                                                                "value": [Function],
                                                                "variant": [Function],
                                                              },
                                                              "render": [Function],
                                                            }
                                                          }
                                                          inputProps={
                                                            Object {
                                                              "IconComponent": Object {
                                                                "$$typeof": Symbol(react.memo),
                                                                "compare": null,
                                                                "type": Object {
                                                                  "$$typeof": Symbol(react.forward_ref),
                                                                  "render": [Function],
                                                                },
                                                              },
                                                              "MenuProps": Object {
                                                                "data-testid": "org-affiliation-options",
                                                                "id": "org-affiliation-options",
                                                              },
                                                              "SelectDisplayProps": Object {
                                                                "data-testid": "org-affiliation-select",
                                                                "id": "org-affiliation-select",
                                                              },
                                                              "autoWidth": false,
                                                              "children": Array [
                                                                <WithStyles(ForwardRef(MenuItem))
                                                                  disabled={true}
                                                                  value=""
                                                                >
                                                                  Organisational affiliation at time of publication
                                                                </WithStyles(ForwardRef(MenuItem))>,
                                                                Array [
                                                                  <WithStyles(ForwardRef(MenuItem))
                                                                    value="UQ"
                                                                  >
                                                                    UQ
                                                                  </WithStyles(ForwardRef(MenuItem))>,
                                                                  <WithStyles(ForwardRef(MenuItem))
                                                                    value="NotUQ"
                                                                  >
                                                                    Not UQ
                                                                  </WithStyles(ForwardRef(MenuItem))>,
                                                                ],
                                                              ],
                                                              "classes": Object {
                                                                "disabled": "Mui-disabled",
                                                                "filled": "MuiSelect-filled",
                                                                "icon": "MuiSelect-icon",
                                                                "iconFilled": "MuiSelect-iconFilled",
                                                                "iconOpen": "MuiSelect-iconOpen",
                                                                "iconOutlined": "MuiSelect-iconOutlined",
                                                                "nativeInput": "MuiSelect-nativeInput",
                                                                "outlined": "MuiSelect-outlined",
                                                                "root": "MuiSelect-root",
                                                                "select": "MuiSelect-select",
                                                                "selectMenu": "MuiSelect-selectMenu",
                                                              },
                                                              "displayEmpty": false,
                                                              "labelId": "org-affiliation-label",
                                                              "multiple": false,
                                                              "onClose": undefined,
                                                              "onOpen": undefined,
                                                              "open": undefined,
                                                              "renderValue": undefined,
                                                              "type": undefined,
                                                              "variant": "standard",
                                                            }
                                                          }
                                                          multiline={false}
                                                          name="org-affiliation"
                                                          onChange={[Function]}
                                                          required={true}
                                                          type="text"
                                                          value=""
                                                        >
                                                          <ForwardRef(InputBase)
                                                            classes={
                                                              Object {
                                                                "adornedEnd": "MuiInputBase-adornedEnd",
                                                                "adornedStart": "MuiInputBase-adornedStart",
                                                                "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                                                "disabled": "Mui-disabled Mui-disabled",
                                                                "error": "Mui-error Mui-error",
                                                                "focused": "Mui-focused Mui-focused",
                                                                "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                                                "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                                                "input": "MuiInputBase-input MuiInput-input",
                                                                "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                                                "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                                                "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                                                "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                                                "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                                                "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                                                "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                                                "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                                                "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                                                              }
                                                            }
                                                            fullWidth={false}
                                                            inputComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "propTypes": Object {
                                                                  "IconComponent": [Function],
                                                                  "MenuProps": [Function],
                                                                  "SelectDisplayProps": [Function],
                                                                  "aria-label": [Function],
                                                                  "autoFocus": [Function],
                                                                  "autoWidth": [Function],
                                                                  "children": [Function],
                                                                  "className": [Function],
                                                                  "classes": [Function],
                                                                  "defaultValue": [Function],
                                                                  "disabled": [Function],
                                                                  "displayEmpty": [Function],
                                                                  "inputRef": [Function],
                                                                  "labelId": [Function],
                                                                  "multiple": [Function],
                                                                  "name": [Function],
                                                                  "onBlur": [Function],
                                                                  "onChange": [Function],
                                                                  "onClose": [Function],
                                                                  "onFocus": [Function],
                                                                  "onOpen": [Function],
                                                                  "open": [Function],
                                                                  "readOnly": [Function],
                                                                  "renderValue": [Function],
                                                                  "tabIndex": [Function],
                                                                  "type": [Function],
                                                                  "value": [Function],
                                                                  "variant": [Function],
                                                                },
                                                                "render": [Function],
                                                              }
                                                            }
                                                            inputProps={
                                                              Object {
                                                                "IconComponent": Object {
                                                                  "$$typeof": Symbol(react.memo),
                                                                  "compare": null,
                                                                  "type": Object {
                                                                    "$$typeof": Symbol(react.forward_ref),
                                                                    "render": [Function],
                                                                  },
                                                                },
                                                                "MenuProps": Object {
                                                                  "data-testid": "org-affiliation-options",
                                                                  "id": "org-affiliation-options",
                                                                },
                                                                "SelectDisplayProps": Object {
                                                                  "data-testid": "org-affiliation-select",
                                                                  "id": "org-affiliation-select",
                                                                },
                                                                "autoWidth": false,
                                                                "children": Array [
                                                                  <WithStyles(ForwardRef(MenuItem))
                                                                    disabled={true}
                                                                    value=""
                                                                  >
                                                                    Organisational affiliation at time of publication
                                                                  </WithStyles(ForwardRef(MenuItem))>,
                                                                  Array [
                                                                    <WithStyles(ForwardRef(MenuItem))
                                                                      value="UQ"
                                                                    >
                                                                      UQ
                                                                    </WithStyles(ForwardRef(MenuItem))>,
                                                                    <WithStyles(ForwardRef(MenuItem))
                                                                      value="NotUQ"
                                                                    >
                                                                      Not UQ
                                                                    </WithStyles(ForwardRef(MenuItem))>,
                                                                  ],
                                                                ],
                                                                "classes": Object {
                                                                  "disabled": "Mui-disabled",
                                                                  "filled": "MuiSelect-filled",
                                                                  "icon": "MuiSelect-icon",
                                                                  "iconFilled": "MuiSelect-iconFilled",
                                                                  "iconOpen": "MuiSelect-iconOpen",
                                                                  "iconOutlined": "MuiSelect-iconOutlined",
                                                                  "nativeInput": "MuiSelect-nativeInput",
                                                                  "outlined": "MuiSelect-outlined",
                                                                  "root": "MuiSelect-root",
                                                                  "select": "MuiSelect-select",
                                                                  "selectMenu": "MuiSelect-selectMenu",
                                                                },
                                                                "displayEmpty": false,
                                                                "labelId": "org-affiliation-label",
                                                                "multiple": false,
                                                                "onClose": undefined,
                                                                "onOpen": undefined,
                                                                "open": undefined,
                                                                "renderValue": undefined,
                                                                "type": undefined,
                                                                "variant": "standard",
                                                              }
                                                            }
                                                            multiline={false}
                                                            name="org-affiliation"
                                                            onChange={[Function]}
                                                            required={true}
                                                            type="text"
                                                            value=""
                                                          >
                                                            <div
                                                              className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
                                                              onClick={[Function]}
                                                              required={true}
                                                            >
                                                              <ForwardRef(SelectInput)
                                                                IconComponent={
                                                                  Object {
                                                                    "$$typeof": Symbol(react.memo),
                                                                    "compare": null,
                                                                    "type": Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "render": [Function],
                                                                    },
                                                                  }
                                                                }
                                                                MenuProps={
                                                                  Object {
                                                                    "data-testid": "org-affiliation-options",
                                                                    "id": "org-affiliation-options",
                                                                  }
                                                                }
                                                                SelectDisplayProps={
                                                                  Object {
                                                                    "data-testid": "org-affiliation-select",
                                                                    "id": "org-affiliation-select",
                                                                  }
                                                                }
                                                                aria-invalid={false}
                                                                autoWidth={false}
                                                                className="MuiInputBase-input MuiInput-input"
                                                                classes={
                                                                  Object {
                                                                    "disabled": "Mui-disabled",
                                                                    "filled": "MuiSelect-filled",
                                                                    "icon": "MuiSelect-icon",
                                                                    "iconFilled": "MuiSelect-iconFilled",
                                                                    "iconOpen": "MuiSelect-iconOpen",
                                                                    "iconOutlined": "MuiSelect-iconOutlined",
                                                                    "nativeInput": "MuiSelect-nativeInput",
                                                                    "outlined": "MuiSelect-outlined",
                                                                    "root": "MuiSelect-root",
                                                                    "select": "MuiSelect-select",
                                                                    "selectMenu": "MuiSelect-selectMenu",
                                                                  }
                                                                }
                                                                disabled={false}
                                                                displayEmpty={false}
                                                                inputRef={[Function]}
                                                                labelId="org-affiliation-label"
                                                                multiple={false}
                                                                name="org-affiliation"
                                                                onAnimationStart={[Function]}
                                                                onBlur={[Function]}
                                                                onChange={[Function]}
                                                                onFocus={[Function]}
                                                                required={true}
                                                                value=""
                                                                variant="standard"
                                                              >
                                                                <div
                                                                  aria-haspopup="listbox"
                                                                  aria-labelledby="org-affiliation-label org-affiliation-select"
                                                                  className="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                                                  data-testid="org-affiliation-select"
                                                                  id="org-affiliation-select"
                                                                  onBlur={[Function]}
                                                                  onFocus={[Function]}
                                                                  onKeyDown={[Function]}
                                                                  onMouseDown={[Function]}
                                                                  role="button"
                                                                  tabIndex={0}
                                                                >
                                                                  <span
                                                                    dangerouslySetInnerHTML={
                                                                      Object {
                                                                        "__html": "&#8203;",
                                                                      }
                                                                    }
                                                                  />
                                                                </div>
                                                                <input
                                                                  aria-hidden={true}
                                                                  className="MuiSelect-nativeInput"
                                                                  name="org-affiliation"
                                                                  onAnimationStart={[Function]}
                                                                  onChange={[Function]}
                                                                  required={true}
                                                                  tabIndex={-1}
                                                                  value=""
                                                                />
                                                                <ForwardRef(ArrowDropDownIcon)
                                                                  className="MuiSelect-icon"
                                                                >
                                                                  <WithStyles(ForwardRef(SvgIcon))
                                                                    className="MuiSelect-icon"
                                                                  >
                                                                    <ForwardRef(SvgIcon)
                                                                      className="MuiSelect-icon"
                                                                      classes={
                                                                        Object {
                                                                          "colorAction": "MuiSvgIcon-colorAction",
                                                                          "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                                          "colorError": "MuiSvgIcon-colorError",
                                                                          "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                                          "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                                          "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                                          "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                                          "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                                          "root": "MuiSvgIcon-root",
                                                                        }
                                                                      }
                                                                    >
                                                                      <svg
                                                                        aria-hidden={true}
                                                                        className="MuiSvgIcon-root MuiSelect-icon"
                                                                        focusable="false"
                                                                        viewBox="0 0 24 24"
                                                                      >
                                                                        <path
                                                                          d="M7 10l5 5 5-5z"
                                                                        />
                                                                      </svg>
                                                                    </ForwardRef(SvgIcon)>
                                                                  </WithStyles(ForwardRef(SvgIcon))>
                                                                </ForwardRef(ArrowDropDownIcon)>
                                                                <WithStyles(ForwardRef(Menu))
                                                                  MenuListProps={
                                                                    Object {
                                                                      "aria-labelledby": "org-affiliation-label",
                                                                      "disableListWrap": true,
                                                                      "role": "listbox",
                                                                    }
                                                                  }
                                                                  PaperProps={
                                                                    Object {
                                                                      "style": Object {
                                                                        "minWidth": undefined,
                                                                      },
                                                                    }
                                                                  }
                                                                  anchorEl={
                                                                    <div
                                                                      aria-haspopup="listbox"
                                                                      aria-labelledby="org-affiliation-label org-affiliation-select"
                                                                      class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                                                      data-testid="org-affiliation-select"
                                                                      id="org-affiliation-select"
                                                                      role="button"
                                                                      tabindex="0"
                                                                    >
                                                                      <span>
                                                                        ​
                                                                      </span>
                                                                    </div>
                                                                  }
                                                                  data-testid="org-affiliation-options"
                                                                  id="org-affiliation-options"
                                                                  onClose={[Function]}
                                                                  open={false}
                                                                >
                                                                  <ForwardRef(Menu)
                                                                    MenuListProps={
                                                                      Object {
                                                                        "aria-labelledby": "org-affiliation-label",
                                                                        "disableListWrap": true,
                                                                        "role": "listbox",
                                                                      }
                                                                    }
                                                                    PaperProps={
                                                                      Object {
                                                                        "style": Object {
                                                                          "minWidth": undefined,
                                                                        },
                                                                      }
                                                                    }
                                                                    anchorEl={
                                                                      <div
                                                                        aria-haspopup="listbox"
                                                                        aria-labelledby="org-affiliation-label org-affiliation-select"
                                                                        class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                                                        data-testid="org-affiliation-select"
                                                                        id="org-affiliation-select"
                                                                        role="button"
                                                                        tabindex="0"
                                                                      >
                                                                        <span>
                                                                          ​
                                                                        </span>
                                                                      </div>
                                                                    }
                                                                    classes={
                                                                      Object {
                                                                        "list": "MuiMenu-list",
                                                                        "paper": "MuiMenu-paper",
                                                                      }
                                                                    }
                                                                    data-testid="org-affiliation-options"
                                                                    id="org-affiliation-options"
                                                                    onClose={[Function]}
                                                                    open={false}
                                                                  >
                                                                    <WithStyles(ForwardRef(Popover))
                                                                      PaperProps={
                                                                        Object {
                                                                          "classes": Object {
                                                                            "root": "MuiMenu-paper",
                                                                          },
                                                                          "style": Object {
                                                                            "minWidth": undefined,
                                                                          },
                                                                        }
                                                                      }
                                                                      anchorEl={
                                                                        <div
                                                                          aria-haspopup="listbox"
                                                                          aria-labelledby="org-affiliation-label org-affiliation-select"
                                                                          class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                                                          data-testid="org-affiliation-select"
                                                                          id="org-affiliation-select"
                                                                          role="button"
                                                                          tabindex="0"
                                                                        >
                                                                          <span>
                                                                            ​
                                                                          </span>
                                                                        </div>
                                                                      }
                                                                      anchorOrigin={
                                                                        Object {
                                                                          "horizontal": "left",
                                                                          "vertical": "top",
                                                                        }
                                                                      }
                                                                      data-testid="org-affiliation-options"
                                                                      getContentAnchorEl={[Function]}
                                                                      id="org-affiliation-options"
                                                                      onClose={[Function]}
                                                                      onEntering={[Function]}
                                                                      open={false}
                                                                      transformOrigin={
                                                                        Object {
                                                                          "horizontal": "left",
                                                                          "vertical": "top",
                                                                        }
                                                                      }
                                                                      transitionDuration="auto"
                                                                    >
                                                                      <ForwardRef(Popover)
                                                                        PaperProps={
                                                                          Object {
                                                                            "classes": Object {
                                                                              "root": "MuiMenu-paper",
                                                                            },
                                                                            "style": Object {
                                                                              "minWidth": undefined,
                                                                            },
                                                                          }
                                                                        }
                                                                        anchorEl={
                                                                          <div
                                                                            aria-haspopup="listbox"
                                                                            aria-labelledby="org-affiliation-label org-affiliation-select"
                                                                            class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                                                            data-testid="org-affiliation-select"
                                                                            id="org-affiliation-select"
                                                                            role="button"
                                                                            tabindex="0"
                                                                          >
                                                                            <span>
                                                                              ​
                                                                            </span>
                                                                          </div>
                                                                        }
                                                                        anchorOrigin={
                                                                          Object {
                                                                            "horizontal": "left",
                                                                            "vertical": "top",
                                                                          }
                                                                        }
                                                                        classes={
                                                                          Object {
                                                                            "paper": "MuiPopover-paper",
                                                                            "root": "MuiPopover-root",
                                                                          }
                                                                        }
                                                                        data-testid="org-affiliation-options"
                                                                        getContentAnchorEl={[Function]}
                                                                        id="org-affiliation-options"
                                                                        onClose={[Function]}
                                                                        onEntering={[Function]}
                                                                        open={false}
                                                                        transformOrigin={
                                                                          Object {
                                                                            "horizontal": "left",
                                                                            "vertical": "top",
                                                                          }
                                                                        }
                                                                        transitionDuration="auto"
                                                                      >
                                                                        <ForwardRef(Modal)
                                                                          BackdropProps={
                                                                            Object {
                                                                              "invisible": true,
                                                                            }
                                                                          }
                                                                          className="MuiPopover-root"
                                                                          container={<body />}
                                                                          data-testid="org-affiliation-options"
                                                                          id="org-affiliation-options"
                                                                          onClose={[Function]}
                                                                          open={false}
                                                                        />
                                                                      </ForwardRef(Popover)>
                                                                    </WithStyles(ForwardRef(Popover))>
                                                                  </ForwardRef(Menu)>
                                                                </WithStyles(ForwardRef(Menu))>
                                                              </ForwardRef(SelectInput)>
                                                            </div>
                                                          </ForwardRef(InputBase)>
                                                        </WithStyles(ForwardRef(InputBase))>
                                                      </ForwardRef(Input)>
                                                    </WithStyles(ForwardRef(Input))>
                                                  </ForwardRef(Select)>
                                                </WithStyles(ForwardRef(Select))>
                                              </div>
                                            </ForwardRef(FormControl)>
                                          </WithStyles(ForwardRef(FormControl))>
                                        </OrgAffilicationTypeSelector>
                                      </div>
                                    </ForwardRef(Grid)>
                                  </WithStyles(ForwardRef(Grid))>
                                  <WithStyles(ForwardRef(Grid))
                                    item={true}
                                    sm={true}
                                    xs={12}
                                  >
                                    <ForwardRef(Grid)
                                      classes={
                                        Object {
                                          "align-content-xs-center": "MuiGrid-align-content-xs-center",
                                          "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                                          "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                                          "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                                          "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                                          "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                                          "align-items-xs-center": "MuiGrid-align-items-xs-center",
                                          "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                                          "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                                          "container": "MuiGrid-container",
                                          "direction-xs-column": "MuiGrid-direction-xs-column",
                                          "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                                          "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                                          "grid-lg-1": "MuiGrid-grid-lg-1",
                                          "grid-lg-10": "MuiGrid-grid-lg-10",
                                          "grid-lg-11": "MuiGrid-grid-lg-11",
                                          "grid-lg-12": "MuiGrid-grid-lg-12",
                                          "grid-lg-2": "MuiGrid-grid-lg-2",
                                          "grid-lg-3": "MuiGrid-grid-lg-3",
                                          "grid-lg-4": "MuiGrid-grid-lg-4",
                                          "grid-lg-5": "MuiGrid-grid-lg-5",
                                          "grid-lg-6": "MuiGrid-grid-lg-6",
                                          "grid-lg-7": "MuiGrid-grid-lg-7",
                                          "grid-lg-8": "MuiGrid-grid-lg-8",
                                          "grid-lg-9": "MuiGrid-grid-lg-9",
                                          "grid-lg-auto": "MuiGrid-grid-lg-auto",
                                          "grid-lg-true": "MuiGrid-grid-lg-true",
                                          "grid-md-1": "MuiGrid-grid-md-1",
                                          "grid-md-10": "MuiGrid-grid-md-10",
                                          "grid-md-11": "MuiGrid-grid-md-11",
                                          "grid-md-12": "MuiGrid-grid-md-12",
                                          "grid-md-2": "MuiGrid-grid-md-2",
                                          "grid-md-3": "MuiGrid-grid-md-3",
                                          "grid-md-4": "MuiGrid-grid-md-4",
                                          "grid-md-5": "MuiGrid-grid-md-5",
                                          "grid-md-6": "MuiGrid-grid-md-6",
                                          "grid-md-7": "MuiGrid-grid-md-7",
                                          "grid-md-8": "MuiGrid-grid-md-8",
                                          "grid-md-9": "MuiGrid-grid-md-9",
                                          "grid-md-auto": "MuiGrid-grid-md-auto",
                                          "grid-md-true": "MuiGrid-grid-md-true",
                                          "grid-sm-1": "MuiGrid-grid-sm-1",
                                          "grid-sm-10": "MuiGrid-grid-sm-10",
                                          "grid-sm-11": "MuiGrid-grid-sm-11",
                                          "grid-sm-12": "MuiGrid-grid-sm-12",
                                          "grid-sm-2": "MuiGrid-grid-sm-2",
                                          "grid-sm-3": "MuiGrid-grid-sm-3",
                                          "grid-sm-4": "MuiGrid-grid-sm-4",
                                          "grid-sm-5": "MuiGrid-grid-sm-5",
                                          "grid-sm-6": "MuiGrid-grid-sm-6",
                                          "grid-sm-7": "MuiGrid-grid-sm-7",
                                          "grid-sm-8": "MuiGrid-grid-sm-8",
                                          "grid-sm-9": "MuiGrid-grid-sm-9",
                                          "grid-sm-auto": "MuiGrid-grid-sm-auto",
                                          "grid-sm-true": "MuiGrid-grid-sm-true",
                                          "grid-xl-1": "MuiGrid-grid-xl-1",
                                          "grid-xl-10": "MuiGrid-grid-xl-10",
                                          "grid-xl-11": "MuiGrid-grid-xl-11",
                                          "grid-xl-12": "MuiGrid-grid-xl-12",
                                          "grid-xl-2": "MuiGrid-grid-xl-2",
                                          "grid-xl-3": "MuiGrid-grid-xl-3",
                                          "grid-xl-4": "MuiGrid-grid-xl-4",
                                          "grid-xl-5": "MuiGrid-grid-xl-5",
                                          "grid-xl-6": "MuiGrid-grid-xl-6",
                                          "grid-xl-7": "MuiGrid-grid-xl-7",
                                          "grid-xl-8": "MuiGrid-grid-xl-8",
                                          "grid-xl-9": "MuiGrid-grid-xl-9",
                                          "grid-xl-auto": "MuiGrid-grid-xl-auto",
                                          "grid-xl-true": "MuiGrid-grid-xl-true",
                                          "grid-xs-1": "MuiGrid-grid-xs-1",
                                          "grid-xs-10": "MuiGrid-grid-xs-10",
                                          "grid-xs-11": "MuiGrid-grid-xs-11",
                                          "grid-xs-12": "MuiGrid-grid-xs-12",
                                          "grid-xs-2": "MuiGrid-grid-xs-2",
                                          "grid-xs-3": "MuiGrid-grid-xs-3",
                                          "grid-xs-4": "MuiGrid-grid-xs-4",
                                          "grid-xs-5": "MuiGrid-grid-xs-5",
                                          "grid-xs-6": "MuiGrid-grid-xs-6",
                                          "grid-xs-7": "MuiGrid-grid-xs-7",
                                          "grid-xs-8": "MuiGrid-grid-xs-8",
                                          "grid-xs-9": "MuiGrid-grid-xs-9",
                                          "grid-xs-auto": "MuiGrid-grid-xs-auto",
                                          "grid-xs-true": "MuiGrid-grid-xs-true",
                                          "item": "MuiGrid-item",
                                          "justify-xs-center": "MuiGrid-justify-xs-center",
                                          "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                                          "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                                          "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                                          "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                                          "root": "MuiGrid-root",
                                          "spacing-xs-1": "MuiGrid-spacing-xs-1",
                                          "spacing-xs-10": "MuiGrid-spacing-xs-10",
                                          "spacing-xs-2": "MuiGrid-spacing-xs-2",
                                          "spacing-xs-3": "MuiGrid-spacing-xs-3",
                                          "spacing-xs-4": "MuiGrid-spacing-xs-4",
                                          "spacing-xs-5": "MuiGrid-spacing-xs-5",
                                          "spacing-xs-6": "MuiGrid-spacing-xs-6",
                                          "spacing-xs-7": "MuiGrid-spacing-xs-7",
                                          "spacing-xs-8": "MuiGrid-spacing-xs-8",
                                          "spacing-xs-9": "MuiGrid-spacing-xs-9",
                                          "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                                          "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                                          "zeroMinWidth": "MuiGrid-zeroMinWidth",
                                        }
                                      }
                                      item={true}
                                      sm={true}
                                      xs={12}
                                    >
                                      <div
                                        className="MuiGrid-root MuiGrid-item MuiGrid-grid-xs-12 MuiGrid-grid-sm-true"
                                      >
                                        <TextField
                                          autoComplete="off"
                                          disabled={true}
                                          error={false}
                                          fullWidth={true}
                                          id="name-as-published"
                                          label="Name as published"
                                          onChange={[Function]}
                                          onKeyDown={[Function]}
                                          placeholder="Please type the name exactly as published"
                                          required={false}
                                          textFieldId="test"
                                          value=""
                                        >
                                          <WithStyles(ForwardRef(TextField))
                                            InputLabelProps={
                                              Object {
                                                "data-testid": "test-label",
                                                "hidden": false,
                                                "htmlFor": "test-input",
                                                "id": "test-label",
                                                "shrink": undefined,
                                              }
                                            }
                                            autoComplete="off"
                                            disabled={true}
                                            fullWidth={true}
                                            id="test"
                                            inputProps={
                                              Object {
                                                "aria-label": "Name as published",
                                                "aria-labelledby": "test-label",
                                                "data-testid": "test-input",
                                                "id": "test-input",
                                                "label": "Name as published",
                                              }
                                            }
                                            label="Name as published"
                                            onChange={[Function]}
                                            onKeyDown={[Function]}
                                            placeholder="Please type the name exactly as published"
                                            required={false}
                                            value=""
                                          >
                                            <ForwardRef(TextField)
                                              InputLabelProps={
                                                Object {
                                                  "data-testid": "test-label",
                                                  "hidden": false,
                                                  "htmlFor": "test-input",
                                                  "id": "test-label",
                                                  "shrink": undefined,
                                                }
                                              }
                                              autoComplete="off"
                                              classes={
                                                Object {
                                                  "root": "MuiTextField-root",
                                                }
                                              }
                                              disabled={true}
                                              fullWidth={true}
                                              id="test"
                                              inputProps={
                                                Object {
                                                  "aria-label": "Name as published",
                                                  "aria-labelledby": "test-label",
                                                  "data-testid": "test-input",
                                                  "id": "test-input",
                                                  "label": "Name as published",
                                                }
                                              }
                                              label="Name as published"
                                              onChange={[Function]}
                                              onKeyDown={[Function]}
                                              placeholder="Please type the name exactly as published"
                                              required={false}
                                              value=""
                                            >
                                              <WithStyles(ForwardRef(FormControl))
                                                className="MuiTextField-root"
                                                color="primary"
                                                disabled={true}
                                                error={false}
                                                fullWidth={true}
                                                onKeyDown={[Function]}
                                                required={false}
                                                variant="standard"
                                              >
                                                <ForwardRef(FormControl)
                                                  className="MuiTextField-root"
                                                  classes={
                                                    Object {
                                                      "fullWidth": "MuiFormControl-fullWidth",
                                                      "marginDense": "MuiFormControl-marginDense",
                                                      "marginNormal": "MuiFormControl-marginNormal",
                                                      "root": "MuiFormControl-root",
                                                    }
                                                  }
                                                  color="primary"
                                                  disabled={true}
                                                  error={false}
                                                  fullWidth={true}
                                                  onKeyDown={[Function]}
                                                  required={false}
                                                  variant="standard"
                                                >
                                                  <div
                                                    className="MuiFormControl-root MuiTextField-root MuiFormControl-fullWidth"
                                                    onKeyDown={[Function]}
                                                  >
                                                    <WithStyles(ForwardRef(InputLabel))
                                                      data-testid="test-label"
                                                      hidden={false}
                                                      htmlFor="test-input"
                                                      id="test-label"
                                                    >
                                                      <ForwardRef(InputLabel)
                                                        classes={
                                                          Object {
                                                            "animated": "MuiInputLabel-animated",
                                                            "asterisk": "MuiInputLabel-asterisk",
                                                            "disabled": "Mui-disabled",
                                                            "error": "Mui-error",
                                                            "filled": "MuiInputLabel-filled",
                                                            "focused": "Mui-focused",
                                                            "formControl": "MuiInputLabel-formControl",
                                                            "marginDense": "MuiInputLabel-marginDense",
                                                            "outlined": "MuiInputLabel-outlined",
                                                            "required": "Mui-required",
                                                            "root": "MuiInputLabel-root",
                                                            "shrink": "MuiInputLabel-shrink",
                                                          }
                                                        }
                                                        data-testid="test-label"
                                                        hidden={false}
                                                        htmlFor="test-input"
                                                        id="test-label"
                                                      >
                                                        <WithStyles(ForwardRef(FormLabel))
                                                          className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                          classes={
                                                            Object {
                                                              "asterisk": "MuiInputLabel-asterisk",
                                                              "disabled": "Mui-disabled",
                                                              "error": "Mui-error",
                                                              "focused": "Mui-focused",
                                                              "required": "Mui-required",
                                                            }
                                                          }
                                                          data-shrink={false}
                                                          data-testid="test-label"
                                                          hidden={false}
                                                          htmlFor="test-input"
                                                          id="test-label"
                                                        >
                                                          <ForwardRef(FormLabel)
                                                            className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                            classes={
                                                              Object {
                                                                "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                                                "colorSecondary": "MuiFormLabel-colorSecondary",
                                                                "disabled": "Mui-disabled Mui-disabled",
                                                                "error": "Mui-error Mui-error",
                                                                "filled": "MuiFormLabel-filled",
                                                                "focused": "Mui-focused Mui-focused",
                                                                "required": "Mui-required Mui-required",
                                                                "root": "MuiFormLabel-root",
                                                              }
                                                            }
                                                            data-shrink={false}
                                                            data-testid="test-label"
                                                            hidden={false}
                                                            htmlFor="test-input"
                                                            id="test-label"
                                                          >
                                                            <label
                                                              className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated Mui-disabled Mui-disabled"
                                                              data-shrink={false}
                                                              data-testid="test-label"
                                                              hidden={false}
                                                              htmlFor="test-input"
                                                              id="test-label"
                                                            >
                                                              Name as published
                                                            </label>
                                                          </ForwardRef(FormLabel)>
                                                        </WithStyles(ForwardRef(FormLabel))>
                                                      </ForwardRef(InputLabel)>
                                                    </WithStyles(ForwardRef(InputLabel))>
                                                    <WithStyles(ForwardRef(Input))
                                                      autoComplete="off"
                                                      autoFocus={false}
                                                      fullWidth={true}
                                                      id="test"
                                                      inputProps={
                                                        Object {
                                                          "aria-label": "Name as published",
                                                          "aria-labelledby": "test-label",
                                                          "data-testid": "test-input",
                                                          "id": "test-input",
                                                          "label": "Name as published",
                                                        }
                                                      }
                                                      multiline={false}
                                                      onChange={[Function]}
                                                      placeholder="Please type the name exactly as published"
                                                      value=""
                                                    >
                                                      <ForwardRef(Input)
                                                        autoComplete="off"
                                                        autoFocus={false}
                                                        classes={
                                                          Object {
                                                            "colorSecondary": "MuiInput-colorSecondary",
                                                            "disabled": "Mui-disabled",
                                                            "error": "Mui-error",
                                                            "focused": "Mui-focused",
                                                            "formControl": "MuiInput-formControl",
                                                            "fullWidth": "MuiInput-fullWidth",
                                                            "input": "MuiInput-input",
                                                            "inputMarginDense": "MuiInput-inputMarginDense",
                                                            "inputMultiline": "MuiInput-inputMultiline",
                                                            "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                            "marginDense": "MuiInput-marginDense",
                                                            "multiline": "MuiInput-multiline",
                                                            "root": "MuiInput-root",
                                                            "underline": "MuiInput-underline",
                                                          }
                                                        }
                                                        fullWidth={true}
                                                        id="test"
                                                        inputProps={
                                                          Object {
                                                            "aria-label": "Name as published",
                                                            "aria-labelledby": "test-label",
                                                            "data-testid": "test-input",
                                                            "id": "test-input",
                                                            "label": "Name as published",
                                                          }
                                                        }
                                                        multiline={false}
                                                        onChange={[Function]}
                                                        placeholder="Please type the name exactly as published"
                                                        value=""
                                                      >
                                                        <WithStyles(ForwardRef(InputBase))
                                                          autoComplete="off"
                                                          autoFocus={false}
                                                          classes={
                                                            Object {
                                                              "colorSecondary": "MuiInput-colorSecondary",
                                                              "disabled": "Mui-disabled",
                                                              "error": "Mui-error",
                                                              "focused": "Mui-focused",
                                                              "formControl": "MuiInput-formControl",
                                                              "fullWidth": "MuiInput-fullWidth",
                                                              "input": "MuiInput-input",
                                                              "inputMarginDense": "MuiInput-inputMarginDense",
                                                              "inputMultiline": "MuiInput-inputMultiline",
                                                              "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                              "marginDense": "MuiInput-marginDense",
                                                              "multiline": "MuiInput-multiline",
                                                              "root": "MuiInput-root MuiInput-underline",
                                                              "underline": null,
                                                            }
                                                          }
                                                          fullWidth={true}
                                                          id="test"
                                                          inputComponent="input"
                                                          inputProps={
                                                            Object {
                                                              "aria-label": "Name as published",
                                                              "aria-labelledby": "test-label",
                                                              "data-testid": "test-input",
                                                              "id": "test-input",
                                                              "label": "Name as published",
                                                            }
                                                          }
                                                          multiline={false}
                                                          onChange={[Function]}
                                                          placeholder="Please type the name exactly as published"
                                                          type="text"
                                                          value=""
                                                        >
                                                          <ForwardRef(InputBase)
                                                            autoComplete="off"
                                                            autoFocus={false}
                                                            classes={
                                                              Object {
                                                                "adornedEnd": "MuiInputBase-adornedEnd",
                                                                "adornedStart": "MuiInputBase-adornedStart",
                                                                "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                                                "disabled": "Mui-disabled Mui-disabled",
                                                                "error": "Mui-error Mui-error",
                                                                "focused": "Mui-focused Mui-focused",
                                                                "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                                                "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                                                "input": "MuiInputBase-input MuiInput-input",
                                                                "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                                                "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                                                "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                                                "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                                                "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                                                "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                                                "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                                                "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                                                "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                                                              }
                                                            }
                                                            fullWidth={true}
                                                            id="test"
                                                            inputComponent="input"
                                                            inputProps={
                                                              Object {
                                                                "aria-label": "Name as published",
                                                                "aria-labelledby": "test-label",
                                                                "data-testid": "test-input",
                                                                "id": "test-input",
                                                                "label": "Name as published",
                                                              }
                                                            }
                                                            multiline={false}
                                                            onChange={[Function]}
                                                            placeholder="Please type the name exactly as published"
                                                            type="text"
                                                            value=""
                                                          >
                                                            <div
                                                              className="MuiInputBase-root MuiInput-root MuiInput-underline Mui-disabled Mui-disabled MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl"
                                                              onClick={[Function]}
                                                            >
                                                              <input
                                                                aria-invalid={false}
                                                                aria-label="Name as published"
                                                                aria-labelledby="test-label"
                                                                autoComplete="off"
                                                                autoFocus={false}
                                                                className="MuiInputBase-input MuiInput-input Mui-disabled Mui-disabled"
                                                                data-testid="test-input"
                                                                disabled={true}
                                                                id="test-input"
                                                                label="Name as published"
                                                                onAnimationStart={[Function]}
                                                                onBlur={[Function]}
                                                                onChange={[Function]}
                                                                onFocus={[Function]}
                                                                placeholder="Please type the name exactly as published"
                                                                required={false}
                                                                type="text"
                                                                value=""
                                                              />
                                                            </div>
                                                          </ForwardRef(InputBase)>
                                                        </WithStyles(ForwardRef(InputBase))>
                                                      </ForwardRef(Input)>
                                                    </WithStyles(ForwardRef(Input))>
                                                  </div>
                                                </ForwardRef(FormControl)>
                                              </WithStyles(ForwardRef(FormControl))>
                                            </ForwardRef(TextField)>
                                          </WithStyles(ForwardRef(TextField))>
                                        </TextField>
                                      </div>
                                    </ForwardRef(Grid)>
                                  </WithStyles(ForwardRef(Grid))>
                                  <WithStyles(ForwardRef(Grid))
                                    item={true}
                                    sm={3}
                                    xs={12}
                                  >
                                    <ForwardRef(Grid)
                                      classes={
                                        Object {
                                          "align-content-xs-center": "MuiGrid-align-content-xs-center",
                                          "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                                          "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                                          "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                                          "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                                          "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                                          "align-items-xs-center": "MuiGrid-align-items-xs-center",
                                          "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                                          "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                                          "container": "MuiGrid-container",
                                          "direction-xs-column": "MuiGrid-direction-xs-column",
                                          "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                                          "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                                          "grid-lg-1": "MuiGrid-grid-lg-1",
                                          "grid-lg-10": "MuiGrid-grid-lg-10",
                                          "grid-lg-11": "MuiGrid-grid-lg-11",
                                          "grid-lg-12": "MuiGrid-grid-lg-12",
                                          "grid-lg-2": "MuiGrid-grid-lg-2",
                                          "grid-lg-3": "MuiGrid-grid-lg-3",
                                          "grid-lg-4": "MuiGrid-grid-lg-4",
                                          "grid-lg-5": "MuiGrid-grid-lg-5",
                                          "grid-lg-6": "MuiGrid-grid-lg-6",
                                          "grid-lg-7": "MuiGrid-grid-lg-7",
                                          "grid-lg-8": "MuiGrid-grid-lg-8",
                                          "grid-lg-9": "MuiGrid-grid-lg-9",
                                          "grid-lg-auto": "MuiGrid-grid-lg-auto",
                                          "grid-lg-true": "MuiGrid-grid-lg-true",
                                          "grid-md-1": "MuiGrid-grid-md-1",
                                          "grid-md-10": "MuiGrid-grid-md-10",
                                          "grid-md-11": "MuiGrid-grid-md-11",
                                          "grid-md-12": "MuiGrid-grid-md-12",
                                          "grid-md-2": "MuiGrid-grid-md-2",
                                          "grid-md-3": "MuiGrid-grid-md-3",
                                          "grid-md-4": "MuiGrid-grid-md-4",
                                          "grid-md-5": "MuiGrid-grid-md-5",
                                          "grid-md-6": "MuiGrid-grid-md-6",
                                          "grid-md-7": "MuiGrid-grid-md-7",
                                          "grid-md-8": "MuiGrid-grid-md-8",
                                          "grid-md-9": "MuiGrid-grid-md-9",
                                          "grid-md-auto": "MuiGrid-grid-md-auto",
                                          "grid-md-true": "MuiGrid-grid-md-true",
                                          "grid-sm-1": "MuiGrid-grid-sm-1",
                                          "grid-sm-10": "MuiGrid-grid-sm-10",
                                          "grid-sm-11": "MuiGrid-grid-sm-11",
                                          "grid-sm-12": "MuiGrid-grid-sm-12",
                                          "grid-sm-2": "MuiGrid-grid-sm-2",
                                          "grid-sm-3": "MuiGrid-grid-sm-3",
                                          "grid-sm-4": "MuiGrid-grid-sm-4",
                                          "grid-sm-5": "MuiGrid-grid-sm-5",
                                          "grid-sm-6": "MuiGrid-grid-sm-6",
                                          "grid-sm-7": "MuiGrid-grid-sm-7",
                                          "grid-sm-8": "MuiGrid-grid-sm-8",
                                          "grid-sm-9": "MuiGrid-grid-sm-9",
                                          "grid-sm-auto": "MuiGrid-grid-sm-auto",
                                          "grid-sm-true": "MuiGrid-grid-sm-true",
                                          "grid-xl-1": "MuiGrid-grid-xl-1",
                                          "grid-xl-10": "MuiGrid-grid-xl-10",
                                          "grid-xl-11": "MuiGrid-grid-xl-11",
                                          "grid-xl-12": "MuiGrid-grid-xl-12",
                                          "grid-xl-2": "MuiGrid-grid-xl-2",
                                          "grid-xl-3": "MuiGrid-grid-xl-3",
                                          "grid-xl-4": "MuiGrid-grid-xl-4",
                                          "grid-xl-5": "MuiGrid-grid-xl-5",
                                          "grid-xl-6": "MuiGrid-grid-xl-6",
                                          "grid-xl-7": "MuiGrid-grid-xl-7",
                                          "grid-xl-8": "MuiGrid-grid-xl-8",
                                          "grid-xl-9": "MuiGrid-grid-xl-9",
                                          "grid-xl-auto": "MuiGrid-grid-xl-auto",
                                          "grid-xl-true": "MuiGrid-grid-xl-true",
                                          "grid-xs-1": "MuiGrid-grid-xs-1",
                                          "grid-xs-10": "MuiGrid-grid-xs-10",
                                          "grid-xs-11": "MuiGrid-grid-xs-11",
                                          "grid-xs-12": "MuiGrid-grid-xs-12",
                                          "grid-xs-2": "MuiGrid-grid-xs-2",
                                          "grid-xs-3": "MuiGrid-grid-xs-3",
                                          "grid-xs-4": "MuiGrid-grid-xs-4",
                                          "grid-xs-5": "MuiGrid-grid-xs-5",
                                          "grid-xs-6": "MuiGrid-grid-xs-6",
                                          "grid-xs-7": "MuiGrid-grid-xs-7",
                                          "grid-xs-8": "MuiGrid-grid-xs-8",
                                          "grid-xs-9": "MuiGrid-grid-xs-9",
                                          "grid-xs-auto": "MuiGrid-grid-xs-auto",
                                          "grid-xs-true": "MuiGrid-grid-xs-true",
                                          "item": "MuiGrid-item",
                                          "justify-xs-center": "MuiGrid-justify-xs-center",
                                          "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                                          "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                                          "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                                          "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                                          "root": "MuiGrid-root",
                                          "spacing-xs-1": "MuiGrid-spacing-xs-1",
                                          "spacing-xs-10": "MuiGrid-spacing-xs-10",
                                          "spacing-xs-2": "MuiGrid-spacing-xs-2",
                                          "spacing-xs-3": "MuiGrid-spacing-xs-3",
                                          "spacing-xs-4": "MuiGrid-spacing-xs-4",
                                          "spacing-xs-5": "MuiGrid-spacing-xs-5",
                                          "spacing-xs-6": "MuiGrid-spacing-xs-6",
                                          "spacing-xs-7": "MuiGrid-spacing-xs-7",
                                          "spacing-xs-8": "MuiGrid-spacing-xs-8",
                                          "spacing-xs-9": "MuiGrid-spacing-xs-9",
                                          "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                                          "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                                          "zeroMinWidth": "MuiGrid-zeroMinWidth",
                                        }
                                      }
                                      item={true}
                                      sm={3}
                                      xs={12}
                                    >
                                      <div
                                        className="MuiGrid-root MuiGrid-item MuiGrid-grid-xs-12 MuiGrid-grid-sm-3"
                                      >
                                        <Connect(Component)
                                          disabled={true}
                                          floatingLabelText="UQ Author ID"
                                          hintText="Type UQ author name to search"
                                          key="aut-id"
                                          onChange={[Function]}
                                          onClear={[Function]}
                                          prefilledSearch={false}
                                          uqIdFieldId="test-aut-id"
                                          value=""
                                        >
                                          <Memo(AutoCompleteAsynchronousField)
                                            OptionTemplate={
                                              Object {
                                                "$$typeof": Symbol(react.memo),
                                                "compare": null,
                                                "type": [Function],
                                              }
                                            }
                                            autoCompleteAsynchronousFieldId="test-aut-id"
                                            clearSuggestions={[Function]}
                                            defaultValue={null}
                                            disabled={true}
                                            error={false}
                                            errorText="Type UQ author name to search"
                                            filterOptions={[Function]}
                                            floatingLabelText="UQ Author ID"
                                            getOptionLabel={[Function]}
                                            hintText="Type UQ author name to search"
                                            itemsList={Array []}
                                            itemsLoading={false}
                                            loadSuggestions={[Function]}
                                            onChange={[Function]}
                                            onClear={[Function]}
                                            prefilledSearch={false}
                                            uqIdFieldId="test-aut-id"
                                            value=""
                                          >
                                            <WithStyles(ForwardRef(Autocomplete))
                                              ListboxProps={
                                                Object {
                                                  "data-testid": "test-aut-id-options",
                                                  "id": "test-aut-id-options",
                                                }
                                              }
                                              clearOnEscape={true}
                                              disabled={true}
                                              filterOptions={[Function]}
                                              getOptionLabel={[Function]}
                                              getOptionSelected={[Function]}
                                              id="test-aut-id"
                                              loading={false}
                                              onChange={[Function]}
                                              onClose={[Function]}
                                              onInputChange={[Function]}
                                              onOpen={[Function]}
                                              open={false}
                                              options={Array []}
                                              popupIcon={false}
                                              renderInput={[Function]}
                                              renderOption={[Function]}
                                              value={null}
                                            >
                                              <ForwardRef(Autocomplete)
                                                ListboxProps={
                                                  Object {
                                                    "data-testid": "test-aut-id-options",
                                                    "id": "test-aut-id-options",
                                                  }
                                                }
                                                classes={
                                                  Object {
                                                    "clearIndicator": "MuiAutocomplete-clearIndicator",
                                                    "clearIndicatorDirty": "MuiAutocomplete-clearIndicatorDirty",
                                                    "endAdornment": "MuiAutocomplete-endAdornment",
                                                    "focused": "Mui-focused",
                                                    "fullWidth": "MuiAutocomplete-fullWidth",
                                                    "groupLabel": "MuiAutocomplete-groupLabel",
                                                    "groupUl": "MuiAutocomplete-groupUl",
                                                    "hasClearIcon": "MuiAutocomplete-hasClearIcon",
                                                    "hasPopupIcon": "MuiAutocomplete-hasPopupIcon",
                                                    "input": "MuiAutocomplete-input",
                                                    "inputFocused": "MuiAutocomplete-inputFocused",
                                                    "inputRoot": "MuiAutocomplete-inputRoot",
                                                    "listbox": "MuiAutocomplete-listbox",
                                                    "loading": "MuiAutocomplete-loading",
                                                    "noOptions": "MuiAutocomplete-noOptions",
                                                    "option": "MuiAutocomplete-option",
                                                    "paper": "MuiAutocomplete-paper",
                                                    "popper": "MuiAutocomplete-popper",
                                                    "popperDisablePortal": "MuiAutocomplete-popperDisablePortal",
                                                    "popupIndicator": "MuiAutocomplete-popupIndicator",
                                                    "popupIndicatorOpen": "MuiAutocomplete-popupIndicatorOpen",
                                                    "root": "MuiAutocomplete-root",
                                                    "tag": "MuiAutocomplete-tag",
                                                    "tagSizeSmall": "MuiAutocomplete-tagSizeSmall",
                                                  }
                                                }
                                                clearOnEscape={true}
                                                disabled={true}
                                                filterOptions={[Function]}
                                                getOptionLabel={[Function]}
                                                getOptionSelected={[Function]}
                                                id="test-aut-id"
                                                loading={false}
                                                onChange={[Function]}
                                                onClose={[Function]}
                                                onInputChange={[Function]}
                                                onOpen={[Function]}
                                                open={false}
                                                options={Array []}
                                                popupIcon={false}
                                                renderInput={[Function]}
                                                renderOption={[Function]}
                                                value={null}
                                              >
                                                <div
                                                  aria-expanded={false}
                                                  aria-owns={null}
                                                  className="MuiAutocomplete-root MuiAutocomplete-hasPopupIcon"
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onMouseDown={[Function]}
                                                  role="combobox"
                                                >
                                                  <WithStyles(ForwardRef(TextField))
                                                    InputLabelProps={
                                                      Object {
                                                        "htmlFor": "test-aut-id",
                                                        "id": "test-aut-id-label",
                                                      }
                                                    }
                                                    InputProps={
                                                      Object {
                                                        "className": "MuiAutocomplete-inputRoot",
                                                        "endAdornment": <React.Fragment>
                                                          <div
                                                            className="MuiAutocomplete-endAdornment"
                                                          >
                                                            <WithStyles(ForwardRef(IconButton))
                                                              aria-label="Open"
                                                              className="MuiAutocomplete-popupIndicator"
                                                              disabled={true}
                                                              onClick={[Function]}
                                                              tabIndex={-1}
                                                              title="Open"
                                                            />
                                                          </div>
                                                        </React.Fragment>,
                                                        "ref": [Function],
                                                        "startAdornment": undefined,
                                                      }
                                                    }
                                                    disabled={true}
                                                    error={false}
                                                    fullWidth={true}
                                                    helperText=""
                                                    id="test-aut-id"
                                                    inputProps={
                                                      Object {
                                                        "aria-activedescendant": null,
                                                        "aria-autocomplete": "list",
                                                        "aria-controls": null,
                                                        "autoCapitalize": "none",
                                                        "autoComplete": "off",
                                                        "className": "MuiAutocomplete-input MuiAutocomplete-inputFocused",
                                                        "data-testid": "test-aut-id-input",
                                                        "disabled": true,
                                                        "id": "test-aut-id-input",
                                                        "onBlur": [Function],
                                                        "onChange": [Function],
                                                        "onFocus": [Function],
                                                        "onMouseDown": [Function],
                                                        "ref": Object {
                                                          "current": <input
                                                            aria-autocomplete="list"
                                                            aria-invalid="false"
                                                            autocapitalize="none"
                                                            autocomplete="off"
                                                            class="MuiInputBase-input MuiInput-input MuiAutocomplete-input MuiAutocomplete-inputFocused Mui-disabled Mui-disabled MuiInputBase-inputAdornedEnd"
                                                            data-testid="test-aut-id-input"
                                                            disabled=""
                                                            id="test-aut-id-input"
                                                            name="test-aut-id"
                                                            spellcheck="false"
                                                            type="text"
                                                            value=""
                                                          />,
                                                        },
                                                        "spellCheck": "false",
                                                        "value": "",
                                                      }
                                                    }
                                                    label="UQ Author ID"
                                                    name="test-aut-id"
                                                    onChange={[Function]}
                                                    value=""
                                                  >
                                                    <ForwardRef(TextField)
                                                      InputLabelProps={
                                                        Object {
                                                          "htmlFor": "test-aut-id",
                                                          "id": "test-aut-id-label",
                                                        }
                                                      }
                                                      InputProps={
                                                        Object {
                                                          "className": "MuiAutocomplete-inputRoot",
                                                          "endAdornment": <React.Fragment>
                                                            <div
                                                              className="MuiAutocomplete-endAdornment"
                                                            >
                                                              <WithStyles(ForwardRef(IconButton))
                                                                aria-label="Open"
                                                                className="MuiAutocomplete-popupIndicator"
                                                                disabled={true}
                                                                onClick={[Function]}
                                                                tabIndex={-1}
                                                                title="Open"
                                                              />
                                                            </div>
                                                          </React.Fragment>,
                                                          "ref": [Function],
                                                          "startAdornment": undefined,
                                                        }
                                                      }
                                                      classes={
                                                        Object {
                                                          "root": "MuiTextField-root",
                                                        }
                                                      }
                                                      disabled={true}
                                                      error={false}
                                                      fullWidth={true}
                                                      helperText=""
                                                      id="test-aut-id"
                                                      inputProps={
                                                        Object {
                                                          "aria-activedescendant": null,
                                                          "aria-autocomplete": "list",
                                                          "aria-controls": null,
                                                          "autoCapitalize": "none",
                                                          "autoComplete": "off",
                                                          "className": "MuiAutocomplete-input MuiAutocomplete-inputFocused",
                                                          "data-testid": "test-aut-id-input",
                                                          "disabled": true,
                                                          "id": "test-aut-id-input",
                                                          "onBlur": [Function],
                                                          "onChange": [Function],
                                                          "onFocus": [Function],
                                                          "onMouseDown": [Function],
                                                          "ref": Object {
                                                            "current": <input
                                                              aria-autocomplete="list"
                                                              aria-invalid="false"
                                                              autocapitalize="none"
                                                              autocomplete="off"
                                                              class="MuiInputBase-input MuiInput-input MuiAutocomplete-input MuiAutocomplete-inputFocused Mui-disabled Mui-disabled MuiInputBase-inputAdornedEnd"
                                                              data-testid="test-aut-id-input"
                                                              disabled=""
                                                              id="test-aut-id-input"
                                                              name="test-aut-id"
                                                              spellcheck="false"
                                                              type="text"
                                                              value=""
                                                            />,
                                                          },
                                                          "spellCheck": "false",
                                                          "value": "",
                                                        }
                                                      }
                                                      label="UQ Author ID"
                                                      name="test-aut-id"
                                                      onChange={[Function]}
                                                      value=""
                                                    >
                                                      <WithStyles(ForwardRef(FormControl))
                                                        className="MuiTextField-root"
                                                        color="primary"
                                                        disabled={true}
                                                        error={false}
                                                        fullWidth={true}
                                                        required={false}
                                                        variant="standard"
                                                      >
                                                        <ForwardRef(FormControl)
                                                          className="MuiTextField-root"
                                                          classes={
                                                            Object {
                                                              "fullWidth": "MuiFormControl-fullWidth",
                                                              "marginDense": "MuiFormControl-marginDense",
                                                              "marginNormal": "MuiFormControl-marginNormal",
                                                              "root": "MuiFormControl-root",
                                                            }
                                                          }
                                                          color="primary"
                                                          disabled={true}
                                                          error={false}
                                                          fullWidth={true}
                                                          required={false}
                                                          variant="standard"
                                                        >
                                                          <div
                                                            className="MuiFormControl-root MuiTextField-root MuiFormControl-fullWidth"
                                                          >
                                                            <WithStyles(ForwardRef(InputLabel))
                                                              htmlFor="test-aut-id"
                                                              id="test-aut-id-label"
                                                            >
                                                              <ForwardRef(InputLabel)
                                                                classes={
                                                                  Object {
                                                                    "animated": "MuiInputLabel-animated",
                                                                    "asterisk": "MuiInputLabel-asterisk",
                                                                    "disabled": "Mui-disabled",
                                                                    "error": "Mui-error",
                                                                    "filled": "MuiInputLabel-filled",
                                                                    "focused": "Mui-focused",
                                                                    "formControl": "MuiInputLabel-formControl",
                                                                    "marginDense": "MuiInputLabel-marginDense",
                                                                    "outlined": "MuiInputLabel-outlined",
                                                                    "required": "Mui-required",
                                                                    "root": "MuiInputLabel-root",
                                                                    "shrink": "MuiInputLabel-shrink",
                                                                  }
                                                                }
                                                                htmlFor="test-aut-id"
                                                                id="test-aut-id-label"
                                                              >
                                                                <WithStyles(ForwardRef(FormLabel))
                                                                  className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                                  classes={
                                                                    Object {
                                                                      "asterisk": "MuiInputLabel-asterisk",
                                                                      "disabled": "Mui-disabled",
                                                                      "error": "Mui-error",
                                                                      "focused": "Mui-focused",
                                                                      "required": "Mui-required",
                                                                    }
                                                                  }
                                                                  data-shrink={false}
                                                                  htmlFor="test-aut-id"
                                                                  id="test-aut-id-label"
                                                                >
                                                                  <ForwardRef(FormLabel)
                                                                    className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                                    classes={
                                                                      Object {
                                                                        "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                                                        "colorSecondary": "MuiFormLabel-colorSecondary",
                                                                        "disabled": "Mui-disabled Mui-disabled",
                                                                        "error": "Mui-error Mui-error",
                                                                        "filled": "MuiFormLabel-filled",
                                                                        "focused": "Mui-focused Mui-focused",
                                                                        "required": "Mui-required Mui-required",
                                                                        "root": "MuiFormLabel-root",
                                                                      }
                                                                    }
                                                                    data-shrink={false}
                                                                    htmlFor="test-aut-id"
                                                                    id="test-aut-id-label"
                                                                  >
                                                                    <label
                                                                      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated Mui-disabled Mui-disabled"
                                                                      data-shrink={false}
                                                                      htmlFor="test-aut-id"
                                                                      id="test-aut-id-label"
                                                                    >
                                                                      UQ Author ID
                                                                    </label>
                                                                  </ForwardRef(FormLabel)>
                                                                </WithStyles(ForwardRef(FormLabel))>
                                                              </ForwardRef(InputLabel)>
                                                            </WithStyles(ForwardRef(InputLabel))>
                                                            <WithStyles(ForwardRef(Input))
                                                              autoFocus={false}
                                                              className="MuiAutocomplete-inputRoot"
                                                              endAdornment={
                                                                <React.Fragment>
                                                                  <div
                                                                    className="MuiAutocomplete-endAdornment"
                                                                  >
                                                                    <WithStyles(ForwardRef(IconButton))
                                                                      aria-label="Open"
                                                                      className="MuiAutocomplete-popupIndicator"
                                                                      disabled={true}
                                                                      onClick={[Function]}
                                                                      tabIndex={-1}
                                                                      title="Open"
                                                                    />
                                                                  </div>
                                                                </React.Fragment>
                                                              }
                                                              fullWidth={true}
                                                              id="test-aut-id"
                                                              inputProps={
                                                                Object {
                                                                  "aria-activedescendant": null,
                                                                  "aria-autocomplete": "list",
                                                                  "aria-controls": null,
                                                                  "autoCapitalize": "none",
                                                                  "autoComplete": "off",
                                                                  "className": "MuiAutocomplete-input MuiAutocomplete-inputFocused",
                                                                  "data-testid": "test-aut-id-input",
                                                                  "disabled": true,
                                                                  "id": "test-aut-id-input",
                                                                  "onBlur": [Function],
                                                                  "onChange": [Function],
                                                                  "onFocus": [Function],
                                                                  "onMouseDown": [Function],
                                                                  "ref": Object {
                                                                    "current": <input
                                                                      aria-autocomplete="list"
                                                                      aria-invalid="false"
                                                                      autocapitalize="none"
                                                                      autocomplete="off"
                                                                      class="MuiInputBase-input MuiInput-input MuiAutocomplete-input MuiAutocomplete-inputFocused Mui-disabled Mui-disabled MuiInputBase-inputAdornedEnd"
                                                                      data-testid="test-aut-id-input"
                                                                      disabled=""
                                                                      id="test-aut-id-input"
                                                                      name="test-aut-id"
                                                                      spellcheck="false"
                                                                      type="text"
                                                                      value=""
                                                                    />,
                                                                  },
                                                                  "spellCheck": "false",
                                                                  "value": "",
                                                                }
                                                              }
                                                              multiline={false}
                                                              name="test-aut-id"
                                                              onChange={[Function]}
                                                              value=""
                                                            >
                                                              <ForwardRef(Input)
                                                                autoFocus={false}
                                                                className="MuiAutocomplete-inputRoot"
                                                                classes={
                                                                  Object {
                                                                    "colorSecondary": "MuiInput-colorSecondary",
                                                                    "disabled": "Mui-disabled",
                                                                    "error": "Mui-error",
                                                                    "focused": "Mui-focused",
                                                                    "formControl": "MuiInput-formControl",
                                                                    "fullWidth": "MuiInput-fullWidth",
                                                                    "input": "MuiInput-input",
                                                                    "inputMarginDense": "MuiInput-inputMarginDense",
                                                                    "inputMultiline": "MuiInput-inputMultiline",
                                                                    "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                                    "marginDense": "MuiInput-marginDense",
                                                                    "multiline": "MuiInput-multiline",
                                                                    "root": "MuiInput-root",
                                                                    "underline": "MuiInput-underline",
                                                                  }
                                                                }
                                                                endAdornment={
                                                                  <React.Fragment>
                                                                    <div
                                                                      className="MuiAutocomplete-endAdornment"
                                                                    >
                                                                      <WithStyles(ForwardRef(IconButton))
                                                                        aria-label="Open"
                                                                        className="MuiAutocomplete-popupIndicator"
                                                                        disabled={true}
                                                                        onClick={[Function]}
                                                                        tabIndex={-1}
                                                                        title="Open"
                                                                      />
                                                                    </div>
                                                                  </React.Fragment>
                                                                }
                                                                fullWidth={true}
                                                                id="test-aut-id"
                                                                inputProps={
                                                                  Object {
                                                                    "aria-activedescendant": null,
                                                                    "aria-autocomplete": "list",
                                                                    "aria-controls": null,
                                                                    "autoCapitalize": "none",
                                                                    "autoComplete": "off",
                                                                    "className": "MuiAutocomplete-input MuiAutocomplete-inputFocused",
                                                                    "data-testid": "test-aut-id-input",
                                                                    "disabled": true,
                                                                    "id": "test-aut-id-input",
                                                                    "onBlur": [Function],
                                                                    "onChange": [Function],
                                                                    "onFocus": [Function],
                                                                    "onMouseDown": [Function],
                                                                    "ref": Object {
                                                                      "current": <input
                                                                        aria-autocomplete="list"
                                                                        aria-invalid="false"
                                                                        autocapitalize="none"
                                                                        autocomplete="off"
                                                                        class="MuiInputBase-input MuiInput-input MuiAutocomplete-input MuiAutocomplete-inputFocused Mui-disabled Mui-disabled MuiInputBase-inputAdornedEnd"
                                                                        data-testid="test-aut-id-input"
                                                                        disabled=""
                                                                        id="test-aut-id-input"
                                                                        name="test-aut-id"
                                                                        spellcheck="false"
                                                                        type="text"
                                                                        value=""
                                                                      />,
                                                                    },
                                                                    "spellCheck": "false",
                                                                    "value": "",
                                                                  }
                                                                }
                                                                multiline={false}
                                                                name="test-aut-id"
                                                                onChange={[Function]}
                                                                value=""
                                                              >
                                                                <WithStyles(ForwardRef(InputBase))
                                                                  autoFocus={false}
                                                                  className="MuiAutocomplete-inputRoot"
                                                                  classes={
                                                                    Object {
                                                                      "colorSecondary": "MuiInput-colorSecondary",
                                                                      "disabled": "Mui-disabled",
                                                                      "error": "Mui-error",
                                                                      "focused": "Mui-focused",
                                                                      "formControl": "MuiInput-formControl",
                                                                      "fullWidth": "MuiInput-fullWidth",
                                                                      "input": "MuiInput-input",
                                                                      "inputMarginDense": "MuiInput-inputMarginDense",
                                                                      "inputMultiline": "MuiInput-inputMultiline",
                                                                      "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                                      "marginDense": "MuiInput-marginDense",
                                                                      "multiline": "MuiInput-multiline",
                                                                      "root": "MuiInput-root MuiInput-underline",
                                                                      "underline": null,
                                                                    }
                                                                  }
                                                                  endAdornment={
                                                                    <React.Fragment>
                                                                      <div
                                                                        className="MuiAutocomplete-endAdornment"
                                                                      >
                                                                        <WithStyles(ForwardRef(IconButton))
                                                                          aria-label="Open"
                                                                          className="MuiAutocomplete-popupIndicator"
                                                                          disabled={true}
                                                                          onClick={[Function]}
                                                                          tabIndex={-1}
                                                                          title="Open"
                                                                        />
                                                                      </div>
                                                                    </React.Fragment>
                                                                  }
                                                                  fullWidth={true}
                                                                  id="test-aut-id"
                                                                  inputComponent="input"
                                                                  inputProps={
                                                                    Object {
                                                                      "aria-activedescendant": null,
                                                                      "aria-autocomplete": "list",
                                                                      "aria-controls": null,
                                                                      "autoCapitalize": "none",
                                                                      "autoComplete": "off",
                                                                      "className": "MuiAutocomplete-input MuiAutocomplete-inputFocused",
                                                                      "data-testid": "test-aut-id-input",
                                                                      "disabled": true,
                                                                      "id": "test-aut-id-input",
                                                                      "onBlur": [Function],
                                                                      "onChange": [Function],
                                                                      "onFocus": [Function],
                                                                      "onMouseDown": [Function],
                                                                      "ref": Object {
                                                                        "current": <input
                                                                          aria-autocomplete="list"
                                                                          aria-invalid="false"
                                                                          autocapitalize="none"
                                                                          autocomplete="off"
                                                                          class="MuiInputBase-input MuiInput-input MuiAutocomplete-input MuiAutocomplete-inputFocused Mui-disabled Mui-disabled MuiInputBase-inputAdornedEnd"
                                                                          data-testid="test-aut-id-input"
                                                                          disabled=""
                                                                          id="test-aut-id-input"
                                                                          name="test-aut-id"
                                                                          spellcheck="false"
                                                                          type="text"
                                                                          value=""
                                                                        />,
                                                                      },
                                                                      "spellCheck": "false",
                                                                      "value": "",
                                                                    }
                                                                  }
                                                                  multiline={false}
                                                                  name="test-aut-id"
                                                                  onChange={[Function]}
                                                                  type="text"
                                                                  value=""
                                                                >
                                                                  <ForwardRef(InputBase)
                                                                    autoFocus={false}
                                                                    className="MuiAutocomplete-inputRoot"
                                                                    classes={
                                                                      Object {
                                                                        "adornedEnd": "MuiInputBase-adornedEnd",
                                                                        "adornedStart": "MuiInputBase-adornedStart",
                                                                        "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                                                        "disabled": "Mui-disabled Mui-disabled",
                                                                        "error": "Mui-error Mui-error",
                                                                        "focused": "Mui-focused Mui-focused",
                                                                        "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                                                        "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                                                        "input": "MuiInputBase-input MuiInput-input",
                                                                        "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                                                        "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                                                        "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                                                        "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                                                        "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                                                        "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                                                        "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                                                        "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                                                        "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                                                                      }
                                                                    }
                                                                    endAdornment={
                                                                      <React.Fragment>
                                                                        <div
                                                                          className="MuiAutocomplete-endAdornment"
                                                                        >
                                                                          <WithStyles(ForwardRef(IconButton))
                                                                            aria-label="Open"
                                                                            className="MuiAutocomplete-popupIndicator"
                                                                            disabled={true}
                                                                            onClick={[Function]}
                                                                            tabIndex={-1}
                                                                            title="Open"
                                                                          />
                                                                        </div>
                                                                      </React.Fragment>
                                                                    }
                                                                    fullWidth={true}
                                                                    id="test-aut-id"
                                                                    inputComponent="input"
                                                                    inputProps={
                                                                      Object {
                                                                        "aria-activedescendant": null,
                                                                        "aria-autocomplete": "list",
                                                                        "aria-controls": null,
                                                                        "autoCapitalize": "none",
                                                                        "autoComplete": "off",
                                                                        "className": "MuiAutocomplete-input MuiAutocomplete-inputFocused",
                                                                        "data-testid": "test-aut-id-input",
                                                                        "disabled": true,
                                                                        "id": "test-aut-id-input",
                                                                        "onBlur": [Function],
                                                                        "onChange": [Function],
                                                                        "onFocus": [Function],
                                                                        "onMouseDown": [Function],
                                                                        "ref": Object {
                                                                          "current": <input
                                                                            aria-autocomplete="list"
                                                                            aria-invalid="false"
                                                                            autocapitalize="none"
                                                                            autocomplete="off"
                                                                            class="MuiInputBase-input MuiInput-input MuiAutocomplete-input MuiAutocomplete-inputFocused Mui-disabled Mui-disabled MuiInputBase-inputAdornedEnd"
                                                                            data-testid="test-aut-id-input"
                                                                            disabled=""
                                                                            id="test-aut-id-input"
                                                                            name="test-aut-id"
                                                                            spellcheck="false"
                                                                            type="text"
                                                                            value=""
                                                                          />,
                                                                        },
                                                                        "spellCheck": "false",
                                                                        "value": "",
                                                                      }
                                                                    }
                                                                    multiline={false}
                                                                    name="test-aut-id"
                                                                    onChange={[Function]}
                                                                    type="text"
                                                                    value=""
                                                                  >
                                                                    <div
                                                                      className="MuiInputBase-root MuiInput-root MuiInput-underline MuiAutocomplete-inputRoot Mui-disabled Mui-disabled MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedEnd"
                                                                      onClick={[Function]}
                                                                    >
                                                                      <input
                                                                        aria-activedescendant={null}
                                                                        aria-autocomplete="list"
                                                                        aria-controls={null}
                                                                        aria-invalid={false}
                                                                        autoCapitalize="none"
                                                                        autoComplete="off"
                                                                        autoFocus={false}
                                                                        className="MuiInputBase-input MuiInput-input MuiAutocomplete-input MuiAutocomplete-inputFocused Mui-disabled Mui-disabled MuiInputBase-inputAdornedEnd"
                                                                        data-testid="test-aut-id-input"
                                                                        disabled={true}
                                                                        id="test-aut-id-input"
                                                                        name="test-aut-id"
                                                                        onAnimationStart={[Function]}
                                                                        onBlur={[Function]}
                                                                        onChange={[Function]}
                                                                        onFocus={[Function]}
                                                                        onMouseDown={[Function]}
                                                                        required={false}
                                                                        spellCheck="false"
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                      <div
                                                                        className="MuiAutocomplete-endAdornment"
                                                                      >
                                                                        <WithStyles(ForwardRef(IconButton))
                                                                          aria-label="Open"
                                                                          className="MuiAutocomplete-popupIndicator"
                                                                          disabled={true}
                                                                          onClick={[Function]}
                                                                          tabIndex={-1}
                                                                          title="Open"
                                                                        >
                                                                          <ForwardRef(IconButton)
                                                                            aria-label="Open"
                                                                            className="MuiAutocomplete-popupIndicator"
                                                                            classes={
                                                                              Object {
                                                                                "colorInherit": "MuiIconButton-colorInherit",
                                                                                "colorPrimary": "MuiIconButton-colorPrimary",
                                                                                "colorSecondary": "MuiIconButton-colorSecondary",
                                                                                "disabled": "Mui-disabled",
                                                                                "edgeEnd": "MuiIconButton-edgeEnd",
                                                                                "edgeStart": "MuiIconButton-edgeStart",
                                                                                "label": "MuiIconButton-label",
                                                                                "root": "MuiIconButton-root",
                                                                                "sizeSmall": "MuiIconButton-sizeSmall",
                                                                              }
                                                                            }
                                                                            disabled={true}
                                                                            onClick={[Function]}
                                                                            tabIndex={-1}
                                                                            title="Open"
                                                                          >
                                                                            <WithStyles(ForwardRef(ButtonBase))
                                                                              aria-label="Open"
                                                                              centerRipple={true}
                                                                              className="MuiIconButton-root MuiAutocomplete-popupIndicator Mui-disabled"
                                                                              disabled={true}
                                                                              focusRipple={true}
                                                                              onClick={[Function]}
                                                                              tabIndex={-1}
                                                                              title="Open"
                                                                            >
                                                                              <ForwardRef(ButtonBase)
                                                                                aria-label="Open"
                                                                                centerRipple={true}
                                                                                className="MuiIconButton-root MuiAutocomplete-popupIndicator Mui-disabled"
                                                                                classes={
                                                                                  Object {
                                                                                    "disabled": "Mui-disabled",
                                                                                    "focusVisible": "Mui-focusVisible",
                                                                                    "root": "MuiButtonBase-root",
                                                                                  }
                                                                                }
                                                                                disabled={true}
                                                                                focusRipple={true}
                                                                                onClick={[Function]}
                                                                                tabIndex={-1}
                                                                                title="Open"
                                                                              >
                                                                                <button
                                                                                  aria-label="Open"
                                                                                  className="MuiButtonBase-root MuiIconButton-root MuiAutocomplete-popupIndicator Mui-disabled Mui-disabled"
                                                                                  disabled={true}
                                                                                  onBlur={[Function]}
                                                                                  onClick={[Function]}
                                                                                  onDragLeave={[Function]}
                                                                                  onFocus={[Function]}
                                                                                  onKeyDown={[Function]}
                                                                                  onKeyUp={[Function]}
                                                                                  onMouseDown={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                  onMouseUp={[Function]}
                                                                                  onTouchEnd={[Function]}
                                                                                  onTouchMove={[Function]}
                                                                                  onTouchStart={[Function]}
                                                                                  tabIndex={-1}
                                                                                  title="Open"
                                                                                  type="button"
                                                                                >
                                                                                  <span
                                                                                    className="MuiIconButton-label"
                                                                                  />
                                                                                </button>
                                                                              </ForwardRef(ButtonBase)>
                                                                            </WithStyles(ForwardRef(ButtonBase))>
                                                                          </ForwardRef(IconButton)>
                                                                        </WithStyles(ForwardRef(IconButton))>
                                                                      </div>
                                                                    </div>
                                                                  </ForwardRef(InputBase)>
                                                                </WithStyles(ForwardRef(InputBase))>
                                                              </ForwardRef(Input)>
                                                            </WithStyles(ForwardRef(Input))>
                                                          </div>
                                                        </ForwardRef(FormControl)>
                                                      </WithStyles(ForwardRef(FormControl))>
                                                    </ForwardRef(TextField)>
                                                  </WithStyles(ForwardRef(TextField))>
                                                </div>
                                              </ForwardRef(Autocomplete)>
                                            </WithStyles(ForwardRef(Autocomplete))>
                                          </Memo(AutoCompleteAsynchronousField)>
                                        </Connect(Component)>
                                      </div>
                                    </ForwardRef(Grid)>
                                  </WithStyles(ForwardRef(Grid))>
                                </div>
                              </ForwardRef(Grid)>
                            </WithStyles(ForwardRef(Grid))>
                            <WithStyles(ForwardRef(Grid))
                              container={true}
                              spacing={1}
                              style={
                                Object {
                                  "marginTop": 8,
                                }
                              }
                            >
                              <ForwardRef(Grid)
                                classes={
                                  Object {
                                    "align-content-xs-center": "MuiGrid-align-content-xs-center",
                                    "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                                    "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                                    "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                                    "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                                    "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                                    "align-items-xs-center": "MuiGrid-align-items-xs-center",
                                    "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                                    "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                                    "container": "MuiGrid-container",
                                    "direction-xs-column": "MuiGrid-direction-xs-column",
                                    "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                                    "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                                    "grid-lg-1": "MuiGrid-grid-lg-1",
                                    "grid-lg-10": "MuiGrid-grid-lg-10",
                                    "grid-lg-11": "MuiGrid-grid-lg-11",
                                    "grid-lg-12": "MuiGrid-grid-lg-12",
                                    "grid-lg-2": "MuiGrid-grid-lg-2",
                                    "grid-lg-3": "MuiGrid-grid-lg-3",
                                    "grid-lg-4": "MuiGrid-grid-lg-4",
                                    "grid-lg-5": "MuiGrid-grid-lg-5",
                                    "grid-lg-6": "MuiGrid-grid-lg-6",
                                    "grid-lg-7": "MuiGrid-grid-lg-7",
                                    "grid-lg-8": "MuiGrid-grid-lg-8",
                                    "grid-lg-9": "MuiGrid-grid-lg-9",
                                    "grid-lg-auto": "MuiGrid-grid-lg-auto",
                                    "grid-lg-true": "MuiGrid-grid-lg-true",
                                    "grid-md-1": "MuiGrid-grid-md-1",
                                    "grid-md-10": "MuiGrid-grid-md-10",
                                    "grid-md-11": "MuiGrid-grid-md-11",
                                    "grid-md-12": "MuiGrid-grid-md-12",
                                    "grid-md-2": "MuiGrid-grid-md-2",
                                    "grid-md-3": "MuiGrid-grid-md-3",
                                    "grid-md-4": "MuiGrid-grid-md-4",
                                    "grid-md-5": "MuiGrid-grid-md-5",
                                    "grid-md-6": "MuiGrid-grid-md-6",
                                    "grid-md-7": "MuiGrid-grid-md-7",
                                    "grid-md-8": "MuiGrid-grid-md-8",
                                    "grid-md-9": "MuiGrid-grid-md-9",
                                    "grid-md-auto": "MuiGrid-grid-md-auto",
                                    "grid-md-true": "MuiGrid-grid-md-true",
                                    "grid-sm-1": "MuiGrid-grid-sm-1",
                                    "grid-sm-10": "MuiGrid-grid-sm-10",
                                    "grid-sm-11": "MuiGrid-grid-sm-11",
                                    "grid-sm-12": "MuiGrid-grid-sm-12",
                                    "grid-sm-2": "MuiGrid-grid-sm-2",
                                    "grid-sm-3": "MuiGrid-grid-sm-3",
                                    "grid-sm-4": "MuiGrid-grid-sm-4",
                                    "grid-sm-5": "MuiGrid-grid-sm-5",
                                    "grid-sm-6": "MuiGrid-grid-sm-6",
                                    "grid-sm-7": "MuiGrid-grid-sm-7",
                                    "grid-sm-8": "MuiGrid-grid-sm-8",
                                    "grid-sm-9": "MuiGrid-grid-sm-9",
                                    "grid-sm-auto": "MuiGrid-grid-sm-auto",
                                    "grid-sm-true": "MuiGrid-grid-sm-true",
                                    "grid-xl-1": "MuiGrid-grid-xl-1",
                                    "grid-xl-10": "MuiGrid-grid-xl-10",
                                    "grid-xl-11": "MuiGrid-grid-xl-11",
                                    "grid-xl-12": "MuiGrid-grid-xl-12",
                                    "grid-xl-2": "MuiGrid-grid-xl-2",
                                    "grid-xl-3": "MuiGrid-grid-xl-3",
                                    "grid-xl-4": "MuiGrid-grid-xl-4",
                                    "grid-xl-5": "MuiGrid-grid-xl-5",
                                    "grid-xl-6": "MuiGrid-grid-xl-6",
                                    "grid-xl-7": "MuiGrid-grid-xl-7",
                                    "grid-xl-8": "MuiGrid-grid-xl-8",
                                    "grid-xl-9": "MuiGrid-grid-xl-9",
                                    "grid-xl-auto": "MuiGrid-grid-xl-auto",
                                    "grid-xl-true": "MuiGrid-grid-xl-true",
                                    "grid-xs-1": "MuiGrid-grid-xs-1",
                                    "grid-xs-10": "MuiGrid-grid-xs-10",
                                    "grid-xs-11": "MuiGrid-grid-xs-11",
                                    "grid-xs-12": "MuiGrid-grid-xs-12",
                                    "grid-xs-2": "MuiGrid-grid-xs-2",
                                    "grid-xs-3": "MuiGrid-grid-xs-3",
                                    "grid-xs-4": "MuiGrid-grid-xs-4",
                                    "grid-xs-5": "MuiGrid-grid-xs-5",
                                    "grid-xs-6": "MuiGrid-grid-xs-6",
                                    "grid-xs-7": "MuiGrid-grid-xs-7",
                                    "grid-xs-8": "MuiGrid-grid-xs-8",
                                    "grid-xs-9": "MuiGrid-grid-xs-9",
                                    "grid-xs-auto": "MuiGrid-grid-xs-auto",
                                    "grid-xs-true": "MuiGrid-grid-xs-true",
                                    "item": "MuiGrid-item",
                                    "justify-xs-center": "MuiGrid-justify-xs-center",
                                    "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                                    "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                                    "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                                    "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                                    "root": "MuiGrid-root",
                                    "spacing-xs-1": "MuiGrid-spacing-xs-1",
                                    "spacing-xs-10": "MuiGrid-spacing-xs-10",
                                    "spacing-xs-2": "MuiGrid-spacing-xs-2",
                                    "spacing-xs-3": "MuiGrid-spacing-xs-3",
                                    "spacing-xs-4": "MuiGrid-spacing-xs-4",
                                    "spacing-xs-5": "MuiGrid-spacing-xs-5",
                                    "spacing-xs-6": "MuiGrid-spacing-xs-6",
                                    "spacing-xs-7": "MuiGrid-spacing-xs-7",
                                    "spacing-xs-8": "MuiGrid-spacing-xs-8",
                                    "spacing-xs-9": "MuiGrid-spacing-xs-9",
                                    "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                                    "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                                    "zeroMinWidth": "MuiGrid-zeroMinWidth",
                                  }
                                }
                                container={true}
                                spacing={1}
                                style={
                                  Object {
                                    "marginTop": 8,
                                  }
                                }
                              >
                                <div
                                  className="MuiGrid-root MuiGrid-container MuiGrid-spacing-xs-1"
                                  style={
                                    Object {
                                      "marginTop": 8,
                                    }
                                  }
                                >
                                  <WithStyles(ForwardRef(Grid))
                                    item={true}
                                    style={
                                      Object {
                                        "marginBottom": 8,
                                      }
                                    }
                                    xs={12}
                                  >
                                    <ForwardRef(Grid)
                                      classes={
                                        Object {
                                          "align-content-xs-center": "MuiGrid-align-content-xs-center",
                                          "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                                          "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                                          "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                                          "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                                          "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                                          "align-items-xs-center": "MuiGrid-align-items-xs-center",
                                          "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                                          "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                                          "container": "MuiGrid-container",
                                          "direction-xs-column": "MuiGrid-direction-xs-column",
                                          "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                                          "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                                          "grid-lg-1": "MuiGrid-grid-lg-1",
                                          "grid-lg-10": "MuiGrid-grid-lg-10",
                                          "grid-lg-11": "MuiGrid-grid-lg-11",
                                          "grid-lg-12": "MuiGrid-grid-lg-12",
                                          "grid-lg-2": "MuiGrid-grid-lg-2",
                                          "grid-lg-3": "MuiGrid-grid-lg-3",
                                          "grid-lg-4": "MuiGrid-grid-lg-4",
                                          "grid-lg-5": "MuiGrid-grid-lg-5",
                                          "grid-lg-6": "MuiGrid-grid-lg-6",
                                          "grid-lg-7": "MuiGrid-grid-lg-7",
                                          "grid-lg-8": "MuiGrid-grid-lg-8",
                                          "grid-lg-9": "MuiGrid-grid-lg-9",
                                          "grid-lg-auto": "MuiGrid-grid-lg-auto",
                                          "grid-lg-true": "MuiGrid-grid-lg-true",
                                          "grid-md-1": "MuiGrid-grid-md-1",
                                          "grid-md-10": "MuiGrid-grid-md-10",
                                          "grid-md-11": "MuiGrid-grid-md-11",
                                          "grid-md-12": "MuiGrid-grid-md-12",
                                          "grid-md-2": "MuiGrid-grid-md-2",
                                          "grid-md-3": "MuiGrid-grid-md-3",
                                          "grid-md-4": "MuiGrid-grid-md-4",
                                          "grid-md-5": "MuiGrid-grid-md-5",
                                          "grid-md-6": "MuiGrid-grid-md-6",
                                          "grid-md-7": "MuiGrid-grid-md-7",
                                          "grid-md-8": "MuiGrid-grid-md-8",
                                          "grid-md-9": "MuiGrid-grid-md-9",
                                          "grid-md-auto": "MuiGrid-grid-md-auto",
                                          "grid-md-true": "MuiGrid-grid-md-true",
                                          "grid-sm-1": "MuiGrid-grid-sm-1",
                                          "grid-sm-10": "MuiGrid-grid-sm-10",
                                          "grid-sm-11": "MuiGrid-grid-sm-11",
                                          "grid-sm-12": "MuiGrid-grid-sm-12",
                                          "grid-sm-2": "MuiGrid-grid-sm-2",
                                          "grid-sm-3": "MuiGrid-grid-sm-3",
                                          "grid-sm-4": "MuiGrid-grid-sm-4",
                                          "grid-sm-5": "MuiGrid-grid-sm-5",
                                          "grid-sm-6": "MuiGrid-grid-sm-6",
                                          "grid-sm-7": "MuiGrid-grid-sm-7",
                                          "grid-sm-8": "MuiGrid-grid-sm-8",
                                          "grid-sm-9": "MuiGrid-grid-sm-9",
                                          "grid-sm-auto": "MuiGrid-grid-sm-auto",
                                          "grid-sm-true": "MuiGrid-grid-sm-true",
                                          "grid-xl-1": "MuiGrid-grid-xl-1",
                                          "grid-xl-10": "MuiGrid-grid-xl-10",
                                          "grid-xl-11": "MuiGrid-grid-xl-11",
                                          "grid-xl-12": "MuiGrid-grid-xl-12",
                                          "grid-xl-2": "MuiGrid-grid-xl-2",
                                          "grid-xl-3": "MuiGrid-grid-xl-3",
                                          "grid-xl-4": "MuiGrid-grid-xl-4",
                                          "grid-xl-5": "MuiGrid-grid-xl-5",
                                          "grid-xl-6": "MuiGrid-grid-xl-6",
                                          "grid-xl-7": "MuiGrid-grid-xl-7",
                                          "grid-xl-8": "MuiGrid-grid-xl-8",
                                          "grid-xl-9": "MuiGrid-grid-xl-9",
                                          "grid-xl-auto": "MuiGrid-grid-xl-auto",
                                          "grid-xl-true": "MuiGrid-grid-xl-true",
                                          "grid-xs-1": "MuiGrid-grid-xs-1",
                                          "grid-xs-10": "MuiGrid-grid-xs-10",
                                          "grid-xs-11": "MuiGrid-grid-xs-11",
                                          "grid-xs-12": "MuiGrid-grid-xs-12",
                                          "grid-xs-2": "MuiGrid-grid-xs-2",
                                          "grid-xs-3": "MuiGrid-grid-xs-3",
                                          "grid-xs-4": "MuiGrid-grid-xs-4",
                                          "grid-xs-5": "MuiGrid-grid-xs-5",
                                          "grid-xs-6": "MuiGrid-grid-xs-6",
                                          "grid-xs-7": "MuiGrid-grid-xs-7",
                                          "grid-xs-8": "MuiGrid-grid-xs-8",
                                          "grid-xs-9": "MuiGrid-grid-xs-9",
                                          "grid-xs-auto": "MuiGrid-grid-xs-auto",
                                          "grid-xs-true": "MuiGrid-grid-xs-true",
                                          "item": "MuiGrid-item",
                                          "justify-xs-center": "MuiGrid-justify-xs-center",
                                          "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                                          "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                                          "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                                          "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                                          "root": "MuiGrid-root",
                                          "spacing-xs-1": "MuiGrid-spacing-xs-1",
                                          "spacing-xs-10": "MuiGrid-spacing-xs-10",
                                          "spacing-xs-2": "MuiGrid-spacing-xs-2",
                                          "spacing-xs-3": "MuiGrid-spacing-xs-3",
                                          "spacing-xs-4": "MuiGrid-spacing-xs-4",
                                          "spacing-xs-5": "MuiGrid-spacing-xs-5",
                                          "spacing-xs-6": "MuiGrid-spacing-xs-6",
                                          "spacing-xs-7": "MuiGrid-spacing-xs-7",
                                          "spacing-xs-8": "MuiGrid-spacing-xs-8",
                                          "spacing-xs-9": "MuiGrid-spacing-xs-9",
                                          "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                                          "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                                          "zeroMinWidth": "MuiGrid-zeroMinWidth",
                                        }
                                      }
                                      item={true}
                                      style={
                                        Object {
                                          "marginBottom": 8,
                                        }
                                      }
                                      xs={12}
                                    >
                                      <div
                                        className="MuiGrid-root MuiGrid-item MuiGrid-grid-xs-12"
                                        style={
                                          Object {
                                            "marginBottom": 8,
                                          }
                                        }
                                      >
                                        <WithStyles(ForwardRef(Button))
                                          color="primary"
                                          data-testid="test-add"
                                          disabled={true}
                                          fullWidth={true}
                                          id="test-add"
                                          onClick={[Function]}
                                          variant="contained"
                                        >
                                          <ForwardRef(Button)
                                            classes={
                                              Object {
                                                "colorInherit": "MuiButton-colorInherit",
                                                "contained": "MuiButton-contained",
                                                "containedPrimary": "MuiButton-containedPrimary",
                                                "containedSecondary": "MuiButton-containedSecondary",
                                                "containedSizeLarge": "MuiButton-containedSizeLarge",
                                                "containedSizeSmall": "MuiButton-containedSizeSmall",
                                                "disableElevation": "MuiButton-disableElevation",
                                                "disabled": "Mui-disabled",
                                                "endIcon": "MuiButton-endIcon",
                                                "focusVisible": "Mui-focusVisible",
                                                "fullWidth": "MuiButton-fullWidth",
                                                "iconSizeLarge": "MuiButton-iconSizeLarge",
                                                "iconSizeMedium": "MuiButton-iconSizeMedium",
                                                "iconSizeSmall": "MuiButton-iconSizeSmall",
                                                "label": "MuiButton-label",
                                                "outlined": "MuiButton-outlined",
                                                "outlinedPrimary": "MuiButton-outlinedPrimary",
                                                "outlinedSecondary": "MuiButton-outlinedSecondary",
                                                "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                                "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                                "root": "MuiButton-root",
                                                "sizeLarge": "MuiButton-sizeLarge",
                                                "sizeSmall": "MuiButton-sizeSmall",
                                                "startIcon": "MuiButton-startIcon",
                                                "text": "MuiButton-text",
                                                "textPrimary": "MuiButton-textPrimary",
                                                "textSecondary": "MuiButton-textSecondary",
                                                "textSizeLarge": "MuiButton-textSizeLarge",
                                                "textSizeSmall": "MuiButton-textSizeSmall",
                                              }
                                            }
                                            color="primary"
                                            data-testid="test-add"
                                            disabled={true}
                                            fullWidth={true}
                                            id="test-add"
                                            onClick={[Function]}
                                            variant="contained"
                                          >
                                            <WithStyles(ForwardRef(ButtonBase))
                                              className="MuiButton-root MuiButton-contained MuiButton-containedPrimary Mui-disabled MuiButton-fullWidth"
                                              component="button"
                                              data-testid="test-add"
                                              disabled={true}
                                              focusRipple={true}
                                              focusVisibleClassName="Mui-focusVisible"
                                              id="test-add"
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <ForwardRef(ButtonBase)
                                                className="MuiButton-root MuiButton-contained MuiButton-containedPrimary Mui-disabled MuiButton-fullWidth"
                                                classes={
                                                  Object {
                                                    "disabled": "Mui-disabled",
                                                    "focusVisible": "Mui-focusVisible",
                                                    "root": "MuiButtonBase-root",
                                                  }
                                                }
                                                component="button"
                                                data-testid="test-add"
                                                disabled={true}
                                                focusRipple={true}
                                                focusVisibleClassName="Mui-focusVisible"
                                                id="test-add"
                                                onClick={[Function]}
                                                type="button"
                                              >
                                                <button
                                                  className="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary Mui-disabled MuiButton-fullWidth Mui-disabled"
                                                  data-testid="test-add"
                                                  disabled={true}
                                                  id="test-add"
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onDragLeave={[Function]}
                                                  onFocus={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  onMouseDown={[Function]}
                                                  onMouseLeave={[Function]}
                                                  onMouseUp={[Function]}
                                                  onTouchEnd={[Function]}
                                                  onTouchMove={[Function]}
                                                  onTouchStart={[Function]}
                                                  tabIndex={-1}
                                                  type="button"
                                                >
                                                  <span
                                                    className="MuiButton-label"
                                                  >
                                                    Add author
                                                  </span>
                                                </button>
                                              </ForwardRef(ButtonBase)>
                                            </WithStyles(ForwardRef(ButtonBase))>
                                          </ForwardRef(Button)>
                                        </WithStyles(ForwardRef(Button))>
                                      </div>
                                    </ForwardRef(Grid)>
                                  </WithStyles(ForwardRef(Grid))>
                                </div>
                              </ForwardRef(Grid)>
                            </WithStyles(ForwardRef(Grid))>
                          </ContributorForm>
                        </div>
                      </ForwardRef(Grid)>
                    </WithStyles(ForwardRef(Grid))>
                  </div>
                </ForwardRef(Grid)>
              </WithStyles(ForwardRef(Grid))>
            </div>
          </ContributorsEditor>
        </MuiPickersUtilsProvider>
      </ThemeProvider>
    </Router>
  </MemoryRouter>
</Provider>
`;

exports[`ContributorsEditor renders full component with a defined className 1`] = `
<div
  className="contributorEditor"
  id="test-list-editor"
>
  <WithStyles(ForwardRef(Grid))
    container={true}
    spacing={1}
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
      xs={12}
    >
      <ContributorForm
        author={
          Object {
            "aut_id": 1,
          }
        }
        canEdit={false}
        className="requiredField"
        classes={
          Object {
            "list": "list",
            "scroll": "scroll",
          }
        }
        contributor={
          Object {
            "affiliation": "",
            "creatorRole": "",
            "nameAsPublished": "",
            "orgaff": "",
            "orgtype": "",
            "uqIdentifier": "",
            "uqUsername": "",
          }
        }
        contributorEditorId="test"
        contributorFormId="test"
        disableNameAsPublished={false}
        displayCancel={false}
        editMode={false}
        enableUqIdentifierOnAffiliationChange={true}
        hideDelete={false}
        hideReorder={false}
        isContributorAssigned={false}
        isNtro={false}
        key="contributor-form-add"
        locale={
          Object {
            "addButton": "Add author",
            "creatorRoleHint": "Role of the creator in relation to the dataset",
            "creatorRoleLabel": "Creator role",
            "descriptionStep1": <div>
              <span
                className="authorSteps"
              >
                Step 1 of 2
              </span>
              - Please 
              <b>
                add to a list of contributors below
              </b>
              , in the format and order that they are published.
            </div>,
            "descriptionStep1NoStep2": <div>
              Please 
              <b>
                add to a list of contributors below
              </b>
              , in the format and order that they are published.
            </div>,
            "identifierLabel": "UQ identifier (if available)",
            "nameAsPublishedHint": "Please type the name exactly as published",
            "nameAsPublishedLabel": "Name as published",
          }
        }
        onSubmit={[Function]}
        required={false}
        showContributorAssignment={false}
        showIdentifierLookup={false}
        showRoleInput={false}
      />
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
</div>
`;

exports[`ContributorsEditor renders full component with identifier lookup 1`] = `
<div
  className="contributorEditor"
  id="test-list-editor"
>
  <WithStyles(ForwardRef(Grid))
    container={true}
    spacing={1}
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
      xs={12}
    >
      <ContributorForm
        author={
          Object {
            "aut_id": 1,
          }
        }
        canEdit={false}
        classes={
          Object {
            "list": "list",
            "scroll": "scroll",
          }
        }
        contributor={
          Object {
            "affiliation": "",
            "creatorRole": "",
            "nameAsPublished": "",
            "orgaff": "",
            "orgtype": "",
            "uqIdentifier": "",
            "uqUsername": "",
          }
        }
        contributorEditorId="test"
        contributorFormId="test"
        disableNameAsPublished={false}
        displayCancel={false}
        editMode={false}
        enableUqIdentifierOnAffiliationChange={true}
        hideDelete={false}
        hideReorder={false}
        isContributorAssigned={false}
        isNtro={false}
        key="contributor-form-add"
        locale={
          Object {
            "addButton": "Add author",
            "creatorRoleHint": "Role of the creator in relation to the dataset",
            "creatorRoleLabel": "Creator role",
            "descriptionStep1": <div>
              <span
                className="authorSteps"
              >
                Step 1 of 2
              </span>
              - Please 
              <b>
                add to a list of contributors below
              </b>
              , in the format and order that they are published.
            </div>,
            "descriptionStep1NoStep2": <div>
              Please 
              <b>
                add to a list of contributors below
              </b>
              , in the format and order that they are published.
            </div>,
            "identifierLabel": "UQ identifier (if available)",
            "nameAsPublishedHint": "Please type the name exactly as published",
            "nameAsPublishedLabel": "Name as published",
          }
        }
        onSubmit={[Function]}
        required={false}
        showContributorAssignment={false}
        showIdentifierLookup={true}
        showRoleInput={false}
      />
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
</div>
`;

exports[`ContributorsEditor renders full component with role input 1`] = `
<div
  className="contributorEditor"
  id="test-list-editor"
>
  <WithStyles(ForwardRef(Grid))
    container={true}
    spacing={1}
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
      xs={12}
    >
      <ContributorForm
        author={
          Object {
            "aut_id": 1,
          }
        }
        canEdit={false}
        classes={
          Object {
            "list": "list",
            "scroll": "scroll",
          }
        }
        contributor={
          Object {
            "affiliation": "",
            "creatorRole": "",
            "nameAsPublished": "",
            "orgaff": "",
            "orgtype": "",
            "uqIdentifier": "",
            "uqUsername": "",
          }
        }
        contributorEditorId="test"
        contributorFormId="test"
        disableNameAsPublished={false}
        displayCancel={false}
        editMode={false}
        enableUqIdentifierOnAffiliationChange={true}
        hideDelete={false}
        hideReorder={false}
        isContributorAssigned={false}
        isNtro={false}
        key="contributor-form-add"
        locale={
          Object {
            "addButton": "Add author",
            "creatorRoleHint": "Role of the creator in relation to the dataset",
            "creatorRoleLabel": "Creator role",
            "descriptionStep1": <div>
              <span
                className="authorSteps"
              >
                Step 1 of 2
              </span>
              - Please 
              <b>
                add to a list of contributors below
              </b>
              , in the format and order that they are published.
            </div>,
            "descriptionStep1NoStep2": <div>
              Please 
              <b>
                add to a list of contributors below
              </b>
              , in the format and order that they are published.
            </div>,
            "identifierLabel": "UQ identifier (if available)",
            "nameAsPublishedHint": "Please type the name exactly as published",
            "nameAsPublishedLabel": "Name as published",
          }
        }
        onSubmit={[Function]}
        required={false}
        showContributorAssignment={false}
        showIdentifierLookup={false}
        showRoleInput={true}
      />
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
</div>
`;

exports[`ContributorsEditor renders no contributor rows with no infinite scroll 1`] = `
<div
  className="contributorEditor"
  id="test-list-editor"
>
  <WithStyles(ForwardRef(Grid))
    container={true}
    spacing={1}
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
      xs={12}
    >
      <ContributorForm
        author={
          Object {
            "aut_id": 1,
          }
        }
        canEdit={false}
        classes={
          Object {
            "list": "list",
            "scroll": "scroll",
          }
        }
        contributor={
          Object {
            "affiliation": "",
            "creatorRole": "",
            "nameAsPublished": "",
            "orgaff": "",
            "orgtype": "",
            "uqIdentifier": "",
            "uqUsername": "",
          }
        }
        contributorEditorId="test"
        contributorFormId="test"
        contributors={Array []}
        disableNameAsPublished={false}
        displayCancel={false}
        editMode={false}
        enableUqIdentifierOnAffiliationChange={true}
        hideDelete={false}
        hideReorder={false}
        isContributorAssigned={false}
        isNtro={false}
        key="contributor-form-add"
        locale={
          Object {
            "addButton": "Add author",
            "creatorRoleHint": "Role of the creator in relation to the dataset",
            "creatorRoleLabel": "Creator role",
            "descriptionStep1": <div>
              <span
                className="authorSteps"
              >
                Step 1 of 2
              </span>
              - Please 
              <b>
                add to a list of contributors below
              </b>
              , in the format and order that they are published.
            </div>,
            "descriptionStep1NoStep2": <div>
              Please 
              <b>
                add to a list of contributors below
              </b>
              , in the format and order that they are published.
            </div>,
            "identifierLabel": "UQ identifier (if available)",
            "nameAsPublishedHint": "Please type the name exactly as published",
            "nameAsPublishedLabel": "Name as published",
          }
        }
        onSubmit={[Function]}
        required={false}
        showContributorAssignment={false}
        showIdentifierLookup={false}
        showRoleInput={false}
      />
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
</div>
`;

exports[`ContributorsEditor returns contributor form with expected props 1`] = `
<ContributorForm
  author={
    Object {
      "aut_id": 1,
    }
  }
  canEdit={false}
  classes={
    Object {
      "list": "list",
      "scroll": "scroll",
    }
  }
  contributor={
    Object {
      "affiliation": "",
      "creatorRole": "",
      "nameAsPublished": "",
      "orgaff": "",
      "orgtype": "",
      "uqIdentifier": "",
      "uqUsername": "",
    }
  }
  contributorEditorId="test"
  contributorFormId="test"
  contributors={
    Array [
      Object {
        "nameAsPublished": 1,
      },
    ]
  }
  disableNameAsPublished={false}
  displayCancel={false}
  editMode={false}
  enableUqIdentifierOnAffiliationChange={true}
  hideDelete={false}
  hideReorder={false}
  isContributorAssigned={false}
  isNtro={false}
  locale={
    Object {
      "addButton": "Add author",
      "creatorRoleHint": "Role of the creator in relation to the dataset",
      "creatorRoleLabel": "Creator role",
      "descriptionStep1": <div>
        <span
          className="authorSteps"
        >
          Step 1 of 2
        </span>
        - Please 
        <b>
          add to a list of contributors below
        </b>
        , in the format and order that they are published.
      </div>,
      "descriptionStep1NoStep2": <div>
        Please 
        <b>
          add to a list of contributors below
        </b>
        , in the format and order that they are published.
      </div>,
      "identifierLabel": "UQ identifier (if available)",
      "nameAsPublishedHint": "Please type the name exactly as published",
      "nameAsPublishedLabel": "Name as published",
    }
  }
  onSubmit={[MockFunction]}
  required={false}
  showContributorAssignment={false}
  showIdentifierLookup={false}
  showRoleInput={false}
/>
`;

exports[`ContributorsEditor returns contributor form with expected props 2`] = `
<ContributorForm
  author={
    Object {
      "aut_id": 1,
    }
  }
  canEdit={true}
  classes={
    Object {
      "list": "list",
      "scroll": "scroll",
    }
  }
  contributor={
    Object {
      "affiliation": "",
      "creatorRole": "",
      "nameAsPublished": "",
      "orgaff": "",
      "orgtype": "",
      "uqIdentifier": "",
      "uqUsername": "",
    }
  }
  contributorEditorId="test"
  contributorFormId="test"
  contributors={
    Array [
      Object {
        "nameAsPublished": 1,
      },
    ]
  }
  disableNameAsPublished={false}
  displayCancel={true}
  editMode={true}
  enableUqIdentifierOnAffiliationChange={true}
  hideDelete={false}
  hideReorder={false}
  isContributorAssigned={false}
  isNtro={false}
  locale={
    Object {
      "addButton": "test",
    }
  }
  meta={
    Object {
      "initial": Object {
        "toJS": [Function],
      },
    }
  }
  onSubmit={[MockFunction]}
  required={false}
  showContributorAssignment={false}
  showIdentifierLookup={false}
  showRoleInput={false}
/>
`;

exports[`ContributorsEditor should get contributors from props and input value set as an Immutable list 1`] = `
<div
  className="contributorEditor"
  id="test-list-editor"
>
  <WithStyles(ForwardRef(Grid))
    container={true}
    spacing={1}
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
      xs={12}
    >
      <ContributorForm
        author={
          Object {
            "aut_id": 1,
          }
        }
        canEdit={false}
        classes={
          Object {
            "list": "list",
            "scroll": "scroll",
          }
        }
        contributor={
          Object {
            "affiliation": "",
            "creatorRole": "",
            "nameAsPublished": "",
            "orgaff": "",
            "orgtype": "",
            "uqIdentifier": "",
            "uqUsername": "",
          }
        }
        contributorEditorId="test"
        contributorFormId="test"
        disableNameAsPublished={false}
        displayCancel={false}
        editMode={false}
        enableUqIdentifierOnAffiliationChange={true}
        hideDelete={false}
        hideReorder={false}
        input={
          Object {
            "name": "test",
            "value": Immutable.List [
              Object {
                "displayName": "test 1",
              },
              Object {
                "displayName": "test 2",
              },
            ],
          }
        }
        isContributorAssigned={true}
        isNtro={false}
        key="contributor-form-add"
        locale={
          Object {
            "addButton": "Add author",
            "creatorRoleHint": "Role of the creator in relation to the dataset",
            "creatorRoleLabel": "Creator role",
            "descriptionStep1": <div>
              <span
                className="authorSteps"
              >
                Step 1 of 2
              </span>
              - Please 
              <b>
                add to a list of contributors below
              </b>
              , in the format and order that they are published.
            </div>,
            "descriptionStep1NoStep2": <div>
              Please 
              <b>
                add to a list of contributors below
              </b>
              , in the format and order that they are published.
            </div>,
            "identifierLabel": "UQ identifier (if available)",
            "nameAsPublishedHint": "Please type the name exactly as published",
            "nameAsPublishedLabel": "Name as published",
          }
        }
        onSubmit={[Function]}
        required={false}
        showContributorAssignment={false}
        showIdentifierLookup={false}
        showRoleInput={false}
      />
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
  <WithStyles(ForwardRef(Grid))
    container={true}
    spacing={1}
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
      xs={12}
    >
      <WithStyles(ForwardRef(List))
        style={
          Object {
            "marginBottom": 0,
          }
        }
      >
        <WithStyles(ContributorRowHeader)
          hideDelete={false}
          isInfinite={false}
          isNtro={false}
          onDeleteAll={[Function]}
          showContributorAssignment={false}
          showIdentifierLookup={false}
          showRoleInput={false}
        />
      </WithStyles(ForwardRef(List))>
      <WithStyles(ForwardRef(List))
        classes={
          Object {
            "root": "ContributorList list ",
          }
        }
        data-testid="test-list"
        id="test-list"
      >
        <Memo(ContributorRow)
          canEdit={false}
          canMoveDown={true}
          canMoveUp={false}
          className="ContributorRow"
          contributor={
            Object {
              "displayName": "test 1",
            }
          }
          contributorRowId="test-list-row"
          enableSelect={false}
          hideDelete={false}
          hideReorder={false}
          index={0}
          key="ContributorRow_0"
          onDelete={[Function]}
          onEdit={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={[Function]}
          showIdentifierLookup={false}
          showRoleInput={false}
        />
        <Memo(ContributorRow)
          canEdit={false}
          canMoveDown={false}
          canMoveUp={true}
          className="ContributorRow"
          contributor={
            Object {
              "displayName": "test 2",
            }
          }
          contributorRowId="test-list-row"
          enableSelect={false}
          hideDelete={false}
          hideReorder={false}
          index={1}
          key="ContributorRow_1"
          onDelete={[Function]}
          onEdit={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={[Function]}
          showIdentifierLookup={false}
          showRoleInput={false}
        />
      </WithStyles(ForwardRef(List))>
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
</div>
`;

exports[`ContributorsEditor should get contributors from props and input value set as an array 1`] = `
<div
  className="contributorEditor"
  id="test-list-editor"
>
  <WithStyles(ForwardRef(Grid))
    container={true}
    spacing={1}
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
      xs={12}
    >
      <ContributorForm
        author={
          Object {
            "aut_id": 1,
          }
        }
        canEdit={false}
        classes={
          Object {
            "list": "list",
            "scroll": "scroll",
          }
        }
        contributor={
          Object {
            "affiliation": "",
            "creatorRole": "",
            "nameAsPublished": "",
            "orgaff": "",
            "orgtype": "",
            "uqIdentifier": "",
            "uqUsername": "",
          }
        }
        contributorEditorId="test"
        contributorFormId="test"
        disableNameAsPublished={false}
        displayCancel={false}
        editMode={false}
        enableUqIdentifierOnAffiliationChange={true}
        hideDelete={false}
        hideReorder={false}
        input={
          Object {
            "name": "test",
            "value": Array [
              Object {
                "displayName": "test 1",
              },
              Object {
                "displayName": "test 2",
              },
            ],
          }
        }
        isContributorAssigned={true}
        isNtro={false}
        key="contributor-form-add"
        locale={
          Object {
            "addButton": "Add author",
            "creatorRoleHint": "Role of the creator in relation to the dataset",
            "creatorRoleLabel": "Creator role",
            "descriptionStep1": <div>
              <span
                className="authorSteps"
              >
                Step 1 of 2
              </span>
              - Please 
              <b>
                add to a list of contributors below
              </b>
              , in the format and order that they are published.
            </div>,
            "descriptionStep1NoStep2": <div>
              Please 
              <b>
                add to a list of contributors below
              </b>
              , in the format and order that they are published.
            </div>,
            "identifierLabel": "UQ identifier (if available)",
            "nameAsPublishedHint": "Please type the name exactly as published",
            "nameAsPublishedLabel": "Name as published",
          }
        }
        onSubmit={[Function]}
        required={false}
        showContributorAssignment={false}
        showIdentifierLookup={false}
        showRoleInput={false}
      />
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
  <WithStyles(ForwardRef(Grid))
    container={true}
    spacing={1}
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
      xs={12}
    >
      <WithStyles(ForwardRef(List))
        style={
          Object {
            "marginBottom": 0,
          }
        }
      >
        <WithStyles(ContributorRowHeader)
          hideDelete={false}
          isInfinite={false}
          isNtro={false}
          onDeleteAll={[Function]}
          showContributorAssignment={false}
          showIdentifierLookup={false}
          showRoleInput={false}
        />
      </WithStyles(ForwardRef(List))>
      <WithStyles(ForwardRef(List))
        classes={
          Object {
            "root": "ContributorList list ",
          }
        }
        data-testid="test-list"
        id="test-list"
      >
        <Memo(ContributorRow)
          canEdit={false}
          canMoveDown={true}
          canMoveUp={false}
          className="ContributorRow"
          contributor={
            Object {
              "displayName": "test 1",
            }
          }
          contributorRowId="test-list-row"
          enableSelect={false}
          hideDelete={false}
          hideReorder={false}
          index={0}
          key="ContributorRow_0"
          onDelete={[Function]}
          onEdit={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={[Function]}
          showIdentifierLookup={false}
          showRoleInput={false}
        />
        <Memo(ContributorRow)
          canEdit={false}
          canMoveDown={false}
          canMoveUp={true}
          className="ContributorRow"
          contributor={
            Object {
              "displayName": "test 2",
            }
          }
          contributorRowId="test-list-row"
          enableSelect={false}
          hideDelete={false}
          hideReorder={false}
          index={1}
          key="ContributorRow_1"
          onDelete={[Function]}
          onEdit={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={[Function]}
          showIdentifierLookup={false}
          showRoleInput={false}
        />
      </WithStyles(ForwardRef(List))>
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
</div>
`;

exports[`ContributorsEditor should have a proper style generator 1`] = `
Object {
  "list": Object {
    "margin": "0",
    "marginBottom": 16,
    "maxHeight": 225,
    "overflow": "hidden",
    "width": "100%",
  },
  "scroll": Object {
    "overflowY": "scroll",
  },
}
`;

exports[`ContributorsEditor should not move contributor down 1`] = `
<div
  className="contributorEditor"
  id="test-list-editor"
>
  <WithStyles(ForwardRef(Grid))
    container={true}
    spacing={1}
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
      xs={12}
    >
      <ContributorForm
        author={
          Object {
            "aut_id": 1,
          }
        }
        canEdit={false}
        classes={
          Object {
            "list": "list",
            "scroll": "scroll",
          }
        }
        contributor={
          Object {
            "affiliation": "",
            "creatorRole": "",
            "nameAsPublished": "",
            "orgaff": "",
            "orgtype": "",
            "uqIdentifier": "",
            "uqUsername": "",
          }
        }
        contributorEditorId="test"
        contributorFormId="test"
        disableNameAsPublished={false}
        displayCancel={false}
        editMode={false}
        enableUqIdentifierOnAffiliationChange={true}
        hideDelete={false}
        hideReorder={false}
        isContributorAssigned={false}
        isNtro={false}
        key="contributor-form-add"
        locale={
          Object {
            "addButton": "Add author",
            "creatorRoleHint": "Role of the creator in relation to the dataset",
            "creatorRoleLabel": "Creator role",
            "descriptionStep1": <div>
              <span
                className="authorSteps"
              >
                Step 1 of 2
              </span>
              - Please 
              <b>
                add to a list of contributors below
              </b>
              , in the format and order that they are published.
            </div>,
            "descriptionStep1NoStep2": <div>
              Please 
              <b>
                add to a list of contributors below
              </b>
              , in the format and order that they are published.
            </div>,
            "identifierLabel": "UQ identifier (if available)",
            "nameAsPublishedHint": "Please type the name exactly as published",
            "nameAsPublishedLabel": "Name as published",
          }
        }
        onSubmit={[Function]}
        required={false}
        showContributorAssignment={false}
        showIdentifierLookup={false}
        showRoleInput={false}
      />
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
</div>
`;

exports[`ContributorsEditor should render error as html 1`] = `
<div
  className="contributorEditor"
  id="test-list-editor"
>
  <WithStyles(ForwardRef(Grid))
    container={true}
    spacing={1}
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
      xs={12}
    >
      <ContributorForm
        author={
          Object {
            "aut_id": 1,
          }
        }
        canEdit={false}
        classes={
          Object {
            "list": "list",
            "scroll": "scroll",
          }
        }
        contributor={
          Object {
            "affiliation": "",
            "creatorRole": "",
            "nameAsPublished": "",
            "orgaff": "",
            "orgtype": "",
            "uqIdentifier": "",
            "uqUsername": "",
          }
        }
        contributorEditorId="test"
        contributorFormId="test"
        disableNameAsPublished={false}
        displayCancel={false}
        editMode={false}
        enableUqIdentifierOnAffiliationChange={true}
        hideDelete={false}
        hideReorder={false}
        isContributorAssigned={false}
        isNtro={false}
        key="contributor-form-add"
        locale={
          Object {
            "addButton": "Add author",
            "creatorRoleHint": "Role of the creator in relation to the dataset",
            "creatorRoleLabel": "Creator role",
            "descriptionStep1": <div>
              <span
                className="authorSteps"
              >
                Step 1 of 2
              </span>
              - Please 
              <b>
                add to a list of contributors below
              </b>
              , in the format and order that they are published.
            </div>,
            "descriptionStep1NoStep2": <div>
              Please 
              <b>
                add to a list of contributors below
              </b>
              , in the format and order that they are published.
            </div>,
            "identifierLabel": "UQ identifier (if available)",
            "nameAsPublishedHint": "Please type the name exactly as published",
            "nameAsPublishedLabel": "Name as published",
          }
        }
        meta={
          Object {
            "error": <p>
              <span>
                test
              </span>
            </p>,
          }
        }
        onSubmit={[Function]}
        required={false}
        showContributorAssignment={false}
        showIdentifierLookup={false}
        showRoleInput={false}
      />
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
  <WithStyles(ForwardRef(Typography))
    color="error"
    variant="caption"
  >
    <span
      key="0/.0"
    >
      test
    </span>
  </WithStyles(ForwardRef(Typography))>
</div>
`;

exports[`ContributorsEditor should render error as one child 1`] = `
<div
  className="contributorEditor"
  id="test-list-editor"
>
  <WithStyles(ForwardRef(Grid))
    container={true}
    spacing={1}
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
      xs={12}
    >
      <ContributorForm
        author={
          Object {
            "aut_id": 1,
          }
        }
        canEdit={false}
        classes={
          Object {
            "list": "list",
            "scroll": "scroll",
          }
        }
        contributor={
          Object {
            "affiliation": "",
            "creatorRole": "",
            "nameAsPublished": "",
            "orgaff": "",
            "orgtype": "",
            "uqIdentifier": "",
            "uqUsername": "",
          }
        }
        contributorEditorId="test"
        contributorFormId="test"
        disableNameAsPublished={false}
        displayCancel={false}
        editMode={false}
        enableUqIdentifierOnAffiliationChange={true}
        hideDelete={false}
        hideReorder={false}
        isContributorAssigned={false}
        isNtro={false}
        key="contributor-form-add"
        locale={
          Object {
            "addButton": "Add author",
            "creatorRoleHint": "Role of the creator in relation to the dataset",
            "creatorRoleLabel": "Creator role",
            "descriptionStep1": <div>
              <span
                className="authorSteps"
              >
                Step 1 of 2
              </span>
              - Please 
              <b>
                add to a list of contributors below
              </b>
              , in the format and order that they are published.
            </div>,
            "descriptionStep1NoStep2": <div>
              Please 
              <b>
                add to a list of contributors below
              </b>
              , in the format and order that they are published.
            </div>,
            "identifierLabel": "UQ identifier (if available)",
            "nameAsPublishedHint": "Please type the name exactly as published",
            "nameAsPublishedLabel": "Name as published",
          }
        }
        meta={
          Object {
            "error": <span>
              test
            </span>,
          }
        }
        onSubmit={[Function]}
        required={false}
        showContributorAssignment={false}
        showIdentifierLookup={false}
        showRoleInput={false}
      />
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
  <WithStyles(ForwardRef(Typography))
    color="error"
    variant="caption"
  >
    test
  </WithStyles(ForwardRef(Typography))>
</div>
`;

exports[`ContributorsEditor should show validation error 1`] = `
<div
  className="contributorEditor"
  id="test-list-editor"
>
  <WithStyles(ForwardRef(Grid))
    container={true}
    spacing={1}
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
      xs={12}
    >
      <ContributorForm
        author={
          Object {
            "aut_id": 1,
          }
        }
        canEdit={false}
        classes={
          Object {
            "list": "list",
            "scroll": "scroll",
          }
        }
        contributor={
          Object {
            "affiliation": "",
            "creatorRole": "",
            "nameAsPublished": "",
            "orgaff": "",
            "orgtype": "",
            "uqIdentifier": "",
            "uqUsername": "",
          }
        }
        contributorEditorId="test"
        contributorFormId="test"
        contributors={Array []}
        disableNameAsPublished={false}
        displayCancel={false}
        editMode={false}
        enableUqIdentifierOnAffiliationChange={true}
        hideDelete={false}
        hideReorder={false}
        isContributorAssigned={false}
        isNtro={false}
        key="contributor-form-add"
        locale={
          Object {
            "addButton": "Add author",
            "creatorRoleHint": "Role of the creator in relation to the dataset",
            "creatorRoleLabel": "Creator role",
            "descriptionStep1": <div>
              <span
                className="authorSteps"
              >
                Step 1 of 2
              </span>
              - Please 
              <b>
                add to a list of contributors below
              </b>
              , in the format and order that they are published.
            </div>,
            "descriptionStep1NoStep2": <div>
              Please 
              <b>
                add to a list of contributors below
              </b>
              , in the format and order that they are published.
            </div>,
            "identifierLabel": "UQ identifier (if available)",
            "nameAsPublishedHint": "Please type the name exactly as published",
            "nameAsPublishedLabel": "Name as published",
          }
        }
        meta={
          Object {
            "error": "This is a test error",
          }
        }
        onSubmit={[Function]}
        required={false}
        showContributorAssignment={false}
        showIdentifierLookup={false}
        showRoleInput={false}
      />
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
  <WithStyles(ForwardRef(Typography))
    color="error"
    variant="caption"
  >
    This is a test error
  </WithStyles(ForwardRef(Typography))>
</div>
`;
